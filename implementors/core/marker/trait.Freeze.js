(function() {var implementors = {};
implementors["glsl_lang"] = [{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for IdentifierData","synthetic":true,"types":[]},{"text":"impl Freeze for TypeNameData","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSpecifierNonArray","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSpecifier","synthetic":true,"types":[]},{"text":"impl Freeze for StructSpecifier","synthetic":true,"types":[]},{"text":"impl Freeze for StructFieldSpecifier","synthetic":true,"types":[]},{"text":"impl Freeze for ArrayedIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for TypeQualifier","synthetic":true,"types":[]},{"text":"impl Freeze for TypeQualifierSpec","synthetic":true,"types":[]},{"text":"impl Freeze for StorageQualifier","synthetic":true,"types":[]},{"text":"impl Freeze for LayoutQualifier","synthetic":true,"types":[]},{"text":"impl Freeze for LayoutQualifierSpec","synthetic":true,"types":[]},{"text":"impl Freeze for PrecisionQualifier","synthetic":true,"types":[]},{"text":"impl Freeze for InterpolationQualifier","synthetic":true,"types":[]},{"text":"impl Freeze for FullySpecifiedType","synthetic":true,"types":[]},{"text":"impl Freeze for ArraySpecifier","synthetic":true,"types":[]},{"text":"impl Freeze for ArraySpecifierDimension","synthetic":true,"types":[]},{"text":"impl Freeze for DeclarationData","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for FunIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionPrototypeData","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionParameterDeclarationData","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionParameterDeclarator","synthetic":true,"types":[]},{"text":"impl Freeze for InitDeclaratorList","synthetic":true,"types":[]},{"text":"impl Freeze for SingleDeclaration","synthetic":true,"types":[]},{"text":"impl Freeze for SingleDeclarationNoType","synthetic":true,"types":[]},{"text":"impl Freeze for Initializer","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl Freeze for UnaryOp","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryOp","synthetic":true,"types":[]},{"text":"impl Freeze for AssignmentOp","synthetic":true,"types":[]},{"text":"impl Freeze for TranslationUnit","synthetic":true,"types":[]},{"text":"impl Freeze for ExternalDeclarationData","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionDefinitionData","synthetic":true,"types":[]},{"text":"impl Freeze for CompoundStatementData","synthetic":true,"types":[]},{"text":"impl Freeze for StatementData","synthetic":true,"types":[]},{"text":"impl Freeze for ExprStatement","synthetic":true,"types":[]},{"text":"impl Freeze for SelectionStatement","synthetic":true,"types":[]},{"text":"impl Freeze for Condition","synthetic":true,"types":[]},{"text":"impl Freeze for SelectionRestStatement","synthetic":true,"types":[]},{"text":"impl Freeze for SwitchStatement","synthetic":true,"types":[]},{"text":"impl Freeze for CaseLabel","synthetic":true,"types":[]},{"text":"impl Freeze for IterationStatement","synthetic":true,"types":[]},{"text":"impl Freeze for ForInitStatement","synthetic":true,"types":[]},{"text":"impl Freeze for ForRestStatement","synthetic":true,"types":[]},{"text":"impl Freeze for JumpStatement","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorData","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorDefine","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorElseIf","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorError","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorIf","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorIfDef","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorIfNDef","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorInclude","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorLine","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorPragma","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorUndef","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorVersion","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorVersionProfile","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorExtension","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorExtensionName","synthetic":true,"types":[]},{"text":"impl Freeze for PreprocessorExtensionBehavior","synthetic":true,"types":[]},{"text":"impl Freeze for CommentData","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Freeze for PreprocessorToken&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Freeze for Token&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Freeze for LexerStage&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Freeze for Lexer&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LexicalError","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Freeze for __Symbol&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; Freeze for __StateMachine&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TranslationUnitParser","synthetic":true,"types":[]},{"text":"impl Freeze for ParseOptions","synthetic":true,"types":[]},{"text":"impl Freeze for ParseContext","synthetic":true,"types":[]},{"text":"impl Freeze for ParseContextData","synthetic":true,"types":[]},{"text":"impl Freeze for IdentifierContext","synthetic":true,"types":[]},{"text":"impl Freeze for GlslTypeTablePolicy","synthetic":true,"types":[]},{"text":"impl Freeze for IndentStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Whitespace","synthetic":true,"types":[]},{"text":"impl Freeze for FormattingSettings","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; Freeze for FormattingState&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DEFAULT_SETTINGS","synthetic":true,"types":[]},{"text":"impl Freeze for Visit","synthetic":true,"types":[]}];
implementors["lang_util"] = [{"text":"impl Freeze for ResolvedPosition","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseErrorKind&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Node&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for NodeDisplayWrapper&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LexerPosition","synthetic":true,"types":[]},{"text":"impl Freeze for NodeSpan","synthetic":true,"types":[]}];
implementors["lang_util_derive"] = [{"text":"impl Freeze for DisplayFieldOpts","synthetic":true,"types":[]},{"text":"impl Freeze for DisplayVariantOpts","synthetic":true,"types":[]},{"text":"impl Freeze for NodeDisplayField","synthetic":true,"types":[]},{"text":"impl Freeze for NodeDisplayVariant","synthetic":true,"types":[]},{"text":"impl Freeze for NodeDisplay","synthetic":true,"types":[]},{"text":"impl Freeze for NodeContentOpts","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()