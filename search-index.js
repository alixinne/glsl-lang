var searchIndex = JSON.parse('{\
"glsl_lang":{"doc":"<code>glsl-lang</code> is a crate implementing a LALR parser for the …","t":"ACAAAANNNNNNNGDGEGDNNGENNNNNNGENNNGNDNNNNNNGNENNNGENNNGDGENNNNNNNNNNNNNNNNNNNGNNNENNNNNNNNNNNNNNNNNNNNGNNEGDNNNGEDNNNNGEGDGDNGEGNDNGEGDGNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGNDNNNNNNNNNNNNNNNNNNGNDGENNNGENNNGENGENNNGDGENNNNNNNNNNNNNNNNNNNNNNNNNNDIYIDNNNNNNNGENNNNNNGEGNEGEGDGDGGEDGEGDGDGDGDGDGDGDGDGENNNNNNNNNNNNNNNNNNNNNNNNNNNNNGEGDNNNNGDGDDNNGNENGENGDGDNNNNNNGDNDDNNNNNNNNNNNDGNDGDGEGNDGENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGENNNNNNNNNNNNNNNNNLLLLLLLLLMMMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMMLLLLMMMMMMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMGIIIIQIQIIDDDGDGQLLLLMLLLLLLAKLLLLLLLLMMLMLLLLMLLLLKLLLLLLLLOLLLLLLMMKLLLLLLLLLMAKKKKKKKKKMMLLLLMMMLLLLLLLLLLLLLLLLKIQDLLKLMLLLLMLLMLLLMMLLLIIKOLLKKKCIFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFAKDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRRDERFFFFFMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAHDDIENNNNNNELLLLLLLLMLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLMMLLLMMMMMMKMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMNIINEIILLLLLLLLLLOOLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ast","lexer","parse","parser","transpiler","visitor","Absolute","Add","Add","Add","All","And","And","ArraySpecifier","ArraySpecifierData","ArraySpecifierDimension","ArraySpecifierDimensionData","ArrayedIdentifier","ArrayedIdentifierData","Assignment","Assignment","AssignmentOp","AssignmentOpData","AtomicUInt","Attribute","BVec2","BVec3","BVec4","Binary","BinaryOp","BinaryOpData","BitAnd","BitOr","BitXor","Block","Block","BlockData","Bool","BoolConst","Bracket","Break","Buffer","Case","CaseLabel","CaseLabel","CaseLabelData","Centroid","Coherent","Comma","Comment","CommentData","Compatibility","Complement","Compound","CompoundStatement","CompoundStatementData","Condition","ConditionData","Const","Continue","Core","DMat2","DMat22","DMat23","DMat24","DMat3","DMat32","DMat33","DMat34","DMat4","DMat42","DMat43","DMat44","DVec2","DVec3","DVec4","Dec","Declaration","Declaration","Declaration","Declaration","DeclarationData","Def","Define","Disable","Discard","Div","Div","DoWhile","Dot","Double","DoubleConst","Else","Else","ElseIf","Enable","EndIf","Equal","Equal","Error","Es","ExplicitlySized","Expr","Expr","Expr","ExprData","ExprStatement","ExprStatementData","Expression","Expression","Extension","ExternalDeclaration","ExternalDeclarationData","FileId","Flat","Float","FloatConst","For","ForInitStatement","ForInitStatementData","ForRestStatement","ForRestStatementData","FullySpecifiedType","FullySpecifiedTypeData","FunCall","FunIdentifier","FunIdentifierData","FunctionDefinition","FunctionDefinition","FunctionDefinitionData","FunctionLike","FunctionParameterDeclaration","FunctionParameterDeclarationData","FunctionParameterDeclarator","FunctionParameterDeclaratorData","FunctionPrototype","FunctionPrototype","FunctionPrototypeData","Gt","Gte","High","IImage1D","IImage1DArray","IImage2D","IImage2DArray","IImage2DMs","IImage2DMsArray","IImage2DRect","IImage3D","IImageBuffer","IImageCube","IImageCubeArray","ISampler1D","ISampler1DArray","ISampler2D","ISampler2DArray","ISampler2DMs","ISampler2DMsArray","ISampler2DRect","ISampler3D","ISamplerBuffer","ISamplerCube","ISamplerCubeArray","ISubpassInput","ISubpassInputMs","ITexture1D","ITexture1DArray","ITexture2D","ITexture2DArray","ITexture2DMs","ITexture2DMsArray","ITexture2DRect","ITexture3D","ITextureBuffer","ITextureCube","ITextureCubeArray","IVec2","IVec3","IVec4","Identifier","Identifier","IdentifierData","If","IfDef","IfNDef","Image1D","Image1DArray","Image2D","Image2DArray","Image2DMs","Image2DMsArray","Image2DRect","Image3D","ImageBuffer","ImageCube","ImageCubeArray","In","InOut","Inc","Include","InitDeclaratorList","InitDeclaratorList","InitDeclaratorListData","Initializer","InitializerData","Int","IntConst","Interpolation","InterpolationQualifier","InterpolationQualifierData","Invariant","Invariant","Iteration","IterationStatement","IterationStatementData","Jump","JumpStatement","JumpStatementData","LShift","LShift","Layout","LayoutQualifier","LayoutQualifierData","LayoutQualifierSpec","LayoutQualifierSpecData","Line","List","Low","Lt","Lte","Mat2","Mat22","Mat23","Mat24","Mat3","Mat32","Mat33","Mat34","Mat4","Mat42","Mat43","Mat44","Medium","Minus","Mod","Mod","Mult","Mult","Multi","Named","NoPerspective","Node","NodeContent","NodeContentDisplay","NodeDisplay","NodeSpan","NonEqual","Not","ObjectLike","Or","Or","Out","Patch","Path","PathData","PostDec","PostInc","Pragma","Precise","Precision","Precision","PrecisionQualifier","PrecisionQualifierData","Preprocessor","Preprocessor","PreprocessorData","PreprocessorDefine","PreprocessorDefineData","PreprocessorElseIf","PreprocessorElseIfData","PreprocessorError","PreprocessorErrorData","PreprocessorExtension","PreprocessorExtensionBehavior","PreprocessorExtensionBehaviorData","PreprocessorExtensionData","PreprocessorExtensionName","PreprocessorExtensionNameData","PreprocessorIf","PreprocessorIfData","PreprocessorIfDef","PreprocessorIfDefData","PreprocessorIfNDef","PreprocessorIfNDefData","PreprocessorInclude","PreprocessorIncludeData","PreprocessorLine","PreprocessorLineData","PreprocessorPragma","PreprocessorPragmaData","PreprocessorUndef","PreprocessorUndefData","PreprocessorVersion","PreprocessorVersionData","PreprocessorVersionProfile","PreprocessorVersionProfileData","RShift","RShift","ReadOnly","Relative","Require","Restrict","Return","Sample","Sampler","Sampler1D","Sampler1DArray","Sampler1DArrayShadow","Sampler1DShadow","Sampler2D","Sampler2DArray","Sampler2DArrayShadow","Sampler2DMs","Sampler2DMsArray","Sampler2DRect","Sampler2DRectShadow","Sampler2DShadow","Sampler3D","SamplerBuffer","SamplerCube","SamplerCubeArray","SamplerCubeArrayShadow","SamplerCubeShadow","SamplerShadow","Selection","SelectionRestStatement","SelectionRestStatementData","SelectionStatement","SelectionStatementData","Shared","Shared","Simple","Single","SingleDeclaration","SingleDeclarationData","SingleDeclarationNoType","SingleDeclarationNoTypeData","SmolStr","Smooth","Specific","Statement","Statement","StatementData","Storage","StorageQualifier","StorageQualifierData","Struct","StructFieldSpecifier","StructFieldSpecifierData","StructSpecifier","StructSpecifierData","Sub","Sub","SubpassInput","SubpassInputMs","Subroutine","Switch","SwitchStatement","SwitchStatementData","Ternary","TextRange","TextSize","Texture1D","Texture1DArray","Texture2D","Texture2DArray","Texture2DMs","Texture2DMsArray","Texture2DRect","Texture3D","TextureBuffer","TextureCube","TextureCubeArray","TranslationUnit","TypeName","TypeName","TypeNameData","TypeQualifier","TypeQualifierData","TypeQualifierSpec","TypeQualifierSpecData","TypeSpecifier","TypeSpecifier","TypeSpecifierData","TypeSpecifierNonArray","TypeSpecifierNonArrayData","UImage1D","UImage1DArray","UImage2D","UImage2DArray","UImage2DMs","UImage2DMsArray","UImage2DRect","UImage3D","UImageBuffer","UImageCube","UImageCubeArray","UInt","UIntConst","USampler1D","USampler1DArray","USampler2D","USampler2DArray","USampler2DMs","USampler2DMsArray","USampler2DRect","USampler3D","USamplerBuffer","USamplerCube","USamplerCubeArray","USubpassInput","USubpassInputMs","UVec2","UVec3","UVec4","Unary","UnaryOp","UnaryOpData","Undef","Uniform","Unnamed","Unsized","Variable","Varying","Vec2","Vec3","Vec4","Version","Void","Volatile","Warn","While","WriteOnly","Xor","Xor","add","add","add","add","add","add","add_assign","add_assign","add_assign","array_spec","array_specifier","array_specifier","as_ident","as_ident_mut","as_ref","as_rs_ident","as_rs_ident","as_rs_ident","as_str","as_str","as_str","at","behavior","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builtin","checked_add","checked_add","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","command","cond","condition","condition","condition","contains","contains_inclusive","contains_range","content","cover","cover_offset","declare_var","default","default","default","default","deref","deref","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dimensions","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","empty","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_lexer","from_str","hash","hash","hash","hash","hash","hash","hash","hash","head","head","ident","ident","ident","ident","ident","ident","identifier","identifiers","ids","initializer","initializer","intersect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_node","is_empty","is_empty","is_empty","is_heap_allocated","is_multi","is_single","len","len","len","line","map","map_spanned","message","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","new","new","new","new","new","new","new","new","new_end","new_inline","new_inline_from_ascii","new_start","number","of","ordering","parameters","parse","parse","parse_with_context","parse_with_context","parse_with_context","parse_with_context","parse_with_options","parse_with_options","parse_with_options","parse_with_options","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","post_expr","precedence","precedence","precedence","precedence","profile","prototype","qualifier","qualifier","qualifier","qualifiers","range","range","raw","rest","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_string_number","span","spanned","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start_bound","statement","statement_list","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sum","tail","text","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","up_to","variable","version","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","args","ident","ident","value","value","DefaultLexer","DefaultParse","Extractable","HasParser","IntoParseBuilderExt","Item","LangParser","Lexer","Parsable","Parse","ParseBuilder","ParseContext","ParseContextData","ParseError","ParseOptions","ParseResult","Parser","add_comment","add_comment","add_type_name","add_type_name","allow_rs_ident","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","builder","clone","clone","clone","clone_inner","clone_into","clone_into","clone_into","comments","comments","context","data","data","data_mut","default","default","default","default_version","eq","eq","eq","equivalent","extract","fmt","fmt","fmt","from","from","from","from","has_comments","impl_parse","into","into","into","into_data","is_type_name","is_type_name","lexer","names","new","new","new","new","new_identifier","new_identifier","new_with_comments","new_with_comments_and_policy","new_with_context","new_with_policy","opts","parsable","parse","parse","parse","parse_with_context","parse_with_context","parse_with_context","parse_with_options","parse_with_options","parse_with_options","parser","policy","pop_scope","pop_scope","push_scope","push_scope","source","source_id","target_vulkan","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_comments","with_comments_and_policy","with_policy","with_policy","wrap","IntoParseBuilderExt","Lexer","ParseBuilder","borrow","borrow_mut","builder","context","context","default","extract","from","into","lexer","new","opts","opts","parse","parse_source","parser","parser","source","try_from","try_into","type_id","Extractable","Parsable","extract","impl_parsable_statement","parse","parse","parse_with_context","parse_with_options","wrap","TranslationUnitParser","__ToTriple","__action0","__action1","__action10","__action100","__action101","__action102","__action103","__action104","__action105","__action106","__action107","__action108","__action109","__action11","__action110","__action111","__action112","__action113","__action114","__action115","__action116","__action117","__action118","__action119","__action12","__action120","__action121","__action122","__action123","__action124","__action125","__action126","__action127","__action128","__action129","__action13","__action130","__action131","__action132","__action133","__action134","__action135","__action136","__action137","__action138","__action139","__action14","__action140","__action141","__action142","__action143","__action144","__action145","__action146","__action147","__action148","__action149","__action15","__action150","__action151","__action152","__action153","__action154","__action155","__action156","__action157","__action158","__action159","__action16","__action160","__action161","__action162","__action163","__action164","__action165","__action166","__action167","__action168","__action169","__action17","__action170","__action171","__action172","__action173","__action174","__action175","__action176","__action177","__action178","__action179","__action18","__action180","__action181","__action182","__action183","__action184","__action185","__action186","__action187","__action188","__action189","__action19","__action190","__action191","__action192","__action193","__action194","__action195","__action196","__action197","__action198","__action199","__action2","__action20","__action200","__action201","__action202","__action203","__action204","__action205","__action206","__action207","__action208","__action209","__action21","__action210","__action211","__action212","__action213","__action214","__action215","__action216","__action217","__action218","__action219","__action22","__action220","__action221","__action222","__action223","__action224","__action225","__action226","__action227","__action228","__action229","__action23","__action230","__action231","__action232","__action233","__action234","__action235","__action236","__action237","__action238","__action239","__action24","__action240","__action241","__action242","__action243","__action244","__action245","__action246","__action247","__action248","__action249","__action25","__action250","__action251","__action252","__action253","__action254","__action255","__action256","__action257","__action258","__action259","__action26","__action260","__action261","__action262","__action263","__action264","__action265","__action266","__action267","__action268","__action269","__action27","__action270","__action271","__action272","__action273","__action274","__action275","__action276","__action277","__action278","__action279","__action28","__action280","__action281","__action282","__action283","__action284","__action285","__action286","__action287","__action288","__action289","__action29","__action290","__action291","__action292","__action293","__action294","__action295","__action296","__action297","__action298","__action299","__action3","__action30","__action300","__action301","__action302","__action303","__action304","__action305","__action306","__action307","__action308","__action309","__action31","__action310","__action311","__action312","__action313","__action314","__action315","__action316","__action317","__action318","__action319","__action32","__action320","__action321","__action322","__action323","__action324","__action325","__action326","__action327","__action328","__action329","__action33","__action330","__action331","__action332","__action333","__action334","__action335","__action336","__action337","__action338","__action339","__action34","__action340","__action341","__action342","__action343","__action344","__action345","__action346","__action347","__action348","__action349","__action35","__action350","__action351","__action352","__action353","__action354","__action355","__action356","__action357","__action358","__action359","__action36","__action360","__action361","__action362","__action363","__action364","__action365","__action366","__action367","__action368","__action369","__action37","__action370","__action371","__action372","__action373","__action374","__action375","__action376","__action377","__action378","__action379","__action38","__action380","__action381","__action382","__action383","__action384","__action385","__action386","__action387","__action388","__action389","__action39","__action390","__action391","__action392","__action393","__action394","__action395","__action396","__action397","__action398","__action399","__action4","__action40","__action400","__action401","__action402","__action403","__action404","__action405","__action406","__action407","__action408","__action409","__action41","__action410","__action411","__action412","__action413","__action414","__action415","__action416","__action417","__action418","__action419","__action42","__action420","__action421","__action422","__action423","__action424","__action425","__action426","__action427","__action428","__action429","__action43","__action430","__action431","__action432","__action433","__action434","__action435","__action436","__action437","__action438","__action439","__action44","__action440","__action441","__action442","__action443","__action444","__action445","__action446","__action447","__action448","__action449","__action45","__action450","__action451","__action452","__action453","__action454","__action455","__action456","__action457","__action458","__action459","__action46","__action460","__action461","__action462","__action463","__action464","__action465","__action466","__action467","__action468","__action469","__action47","__action470","__action471","__action472","__action473","__action474","__action475","__action476","__action477","__action478","__action479","__action48","__action480","__action481","__action482","__action483","__action484","__action485","__action486","__action487","__action488","__action489","__action49","__action490","__action491","__action492","__action493","__action494","__action495","__action496","__action497","__action498","__action499","__action5","__action50","__action500","__action501","__action502","__action503","__action504","__action505","__action506","__action507","__action508","__action509","__action51","__action510","__action511","__action512","__action513","__action514","__action515","__action516","__action517","__action518","__action519","__action52","__action520","__action521","__action522","__action523","__action524","__action525","__action526","__action527","__action528","__action529","__action53","__action530","__action531","__action532","__action533","__action534","__action535","__action536","__action537","__action538","__action539","__action54","__action540","__action541","__action542","__action543","__action544","__action545","__action546","__action547","__action548","__action549","__action55","__action550","__action551","__action552","__action553","__action554","__action555","__action556","__action557","__action558","__action559","__action56","__action560","__action561","__action562","__action563","__action564","__action565","__action566","__action567","__action568","__action569","__action57","__action570","__action571","__action572","__action573","__action574","__action575","__action576","__action577","__action578","__action579","__action58","__action580","__action581","__action582","__action583","__action584","__action585","__action586","__action587","__action588","__action589","__action59","__action590","__action591","__action592","__action593","__action594","__action595","__action596","__action597","__action598","__action599","__action6","__action60","__action600","__action601","__action602","__action603","__action604","__action605","__action606","__action607","__action608","__action609","__action61","__action610","__action611","__action612","__action613","__action614","__action615","__action616","__action617","__action618","__action619","__action62","__action620","__action621","__action622","__action623","__action624","__action625","__action626","__action627","__action628","__action629","__action63","__action630","__action631","__action632","__action633","__action634","__action635","__action636","__action637","__action638","__action639","__action64","__action640","__action641","__action642","__action643","__action644","__action645","__action646","__action647","__action648","__action649","__action65","__action650","__action651","__action652","__action653","__action654","__action655","__action656","__action657","__action658","__action659","__action66","__action660","__action661","__action662","__action663","__action664","__action665","__action666","__action667","__action668","__action669","__action67","__action670","__action671","__action672","__action673","__action674","__action675","__action676","__action677","__action678","__action679","__action68","__action680","__action681","__action682","__action683","__action684","__action685","__action686","__action687","__action688","__action689","__action69","__action690","__action691","__action692","__action693","__action694","__action695","__action696","__action697","__action698","__action699","__action7","__action70","__action700","__action701","__action702","__action703","__action704","__action705","__action706","__action707","__action708","__action709","__action71","__action710","__action711","__action712","__action713","__action714","__action715","__action716","__action717","__action718","__action719","__action72","__action720","__action721","__action722","__action723","__action724","__action725","__action726","__action727","__action728","__action729","__action73","__action730","__action731","__action732","__action733","__action734","__action735","__action736","__action737","__action738","__action739","__action74","__action740","__action741","__action742","__action743","__action744","__action745","__action746","__action747","__action748","__action749","__action75","__action750","__action751","__action752","__action753","__action754","__action755","__action756","__action757","__action758","__action759","__action76","__action760","__action761","__action762","__action763","__action764","__action765","__action766","__action767","__action768","__action769","__action77","__action770","__action771","__action772","__action773","__action774","__action775","__action776","__action777","__action778","__action779","__action78","__action780","__action781","__action782","__action783","__action784","__action785","__action786","__action787","__action788","__action789","__action79","__action790","__action791","__action792","__action793","__action794","__action795","__action796","__action797","__action798","__action799","__action8","__action80","__action800","__action801","__action802","__action803","__action804","__action805","__action806","__action807","__action808","__action809","__action81","__action810","__action811","__action812","__action813","__action814","__action815","__action816","__action817","__action818","__action819","__action82","__action820","__action821","__action822","__action823","__action824","__action825","__action826","__action827","__action828","__action829","__action83","__action830","__action831","__action832","__action833","__action834","__action835","__action836","__action837","__action838","__action839","__action84","__action840","__action841","__action842","__action843","__action844","__action845","__action846","__action847","__action848","__action849","__action85","__action850","__action851","__action852","__action853","__action854","__action855","__action856","__action857","__action858","__action859","__action86","__action860","__action861","__action862","__action863","__action864","__action865","__action866","__action867","__action868","__action869","__action87","__action870","__action871","__action872","__action873","__action874","__action875","__action876","__action877","__action878","__action879","__action88","__action880","__action881","__action882","__action883","__action884","__action885","__action886","__action887","__action888","__action889","__action89","__action890","__action891","__action9","__action90","__action91","__action92","__action93","__action94","__action95","__action96","__action97","__action98","__action99","__parse__TranslationUnit","to_triple","TranslationUnitParser","Variant0","Variant1","Variant10","Variant100","Variant101","Variant102","Variant103","Variant104","Variant105","Variant106","Variant107","Variant108","Variant109","Variant11","Variant110","Variant111","Variant112","Variant113","Variant114","Variant115","Variant12","Variant13","Variant14","Variant15","Variant16","Variant17","Variant18","Variant19","Variant2","Variant20","Variant21","Variant22","Variant23","Variant24","Variant25","Variant26","Variant27","Variant28","Variant29","Variant3","Variant30","Variant31","Variant32","Variant33","Variant34","Variant35","Variant36","Variant37","Variant38","Variant39","Variant4","Variant40","Variant41","Variant42","Variant43","Variant44","Variant45","Variant46","Variant47","Variant48","Variant49","Variant5","Variant50","Variant51","Variant52","Variant53","Variant54","Variant55","Variant56","Variant57","Variant58","Variant59","Variant6","Variant60","Variant61","Variant62","Variant63","Variant64","Variant65","Variant66","Variant67","Variant68","Variant69","Variant7","Variant70","Variant71","Variant72","Variant73","Variant74","Variant75","Variant76","Variant77","Variant78","Variant79","Variant8","Variant80","Variant81","Variant82","Variant83","Variant84","Variant85","Variant86","Variant87","Variant88","Variant89","Variant9","Variant90","Variant91","Variant92","Variant93","Variant94","Variant95","Variant96","Variant97","Variant98","Variant99","__ACTION","__EOF_ACTION","__StateMachine","__Symbol","__TERMINAL","__accepts","__action","__expected_tokens","__expected_tokens_from_states","__goto","__phantom","__pop_Variant0","__pop_Variant1","__pop_Variant10","__pop_Variant100","__pop_Variant101","__pop_Variant102","__pop_Variant103","__pop_Variant104","__pop_Variant105","__pop_Variant106","__pop_Variant107","__pop_Variant108","__pop_Variant109","__pop_Variant11","__pop_Variant110","__pop_Variant111","__pop_Variant112","__pop_Variant113","__pop_Variant114","__pop_Variant115","__pop_Variant12","__pop_Variant13","__pop_Variant14","__pop_Variant15","__pop_Variant16","__pop_Variant17","__pop_Variant18","__pop_Variant19","__pop_Variant2","__pop_Variant20","__pop_Variant21","__pop_Variant22","__pop_Variant23","__pop_Variant24","__pop_Variant25","__pop_Variant26","__pop_Variant27","__pop_Variant28","__pop_Variant29","__pop_Variant3","__pop_Variant30","__pop_Variant31","__pop_Variant32","__pop_Variant33","__pop_Variant34","__pop_Variant35","__pop_Variant36","__pop_Variant37","__pop_Variant38","__pop_Variant39","__pop_Variant4","__pop_Variant40","__pop_Variant41","__pop_Variant42","__pop_Variant43","__pop_Variant44","__pop_Variant45","__pop_Variant46","__pop_Variant47","__pop_Variant48","__pop_Variant49","__pop_Variant5","__pop_Variant50","__pop_Variant51","__pop_Variant52","__pop_Variant53","__pop_Variant54","__pop_Variant55","__pop_Variant56","__pop_Variant57","__pop_Variant58","__pop_Variant59","__pop_Variant6","__pop_Variant60","__pop_Variant61","__pop_Variant62","__pop_Variant63","__pop_Variant64","__pop_Variant65","__pop_Variant66","__pop_Variant67","__pop_Variant68","__pop_Variant69","__pop_Variant7","__pop_Variant70","__pop_Variant71","__pop_Variant72","__pop_Variant73","__pop_Variant74","__pop_Variant75","__pop_Variant76","__pop_Variant77","__pop_Variant78","__pop_Variant79","__pop_Variant8","__pop_Variant80","__pop_Variant81","__pop_Variant82","__pop_Variant83","__pop_Variant84","__pop_Variant85","__pop_Variant86","__pop_Variant87","__pop_Variant88","__pop_Variant89","__pop_Variant9","__pop_Variant90","__pop_Variant91","__pop_Variant92","__pop_Variant93","__pop_Variant94","__pop_Variant95","__pop_Variant96","__pop_Variant97","__pop_Variant98","__pop_Variant99","__reduce","__reduce0","__reduce1","__reduce10","__reduce100","__reduce101","__reduce102","__reduce103","__reduce104","__reduce105","__reduce106","__reduce107","__reduce108","__reduce109","__reduce11","__reduce110","__reduce111","__reduce112","__reduce113","__reduce114","__reduce115","__reduce116","__reduce117","__reduce118","__reduce119","__reduce12","__reduce120","__reduce121","__reduce122","__reduce123","__reduce124","__reduce125","__reduce126","__reduce127","__reduce128","__reduce129","__reduce13","__reduce130","__reduce131","__reduce132","__reduce133","__reduce134","__reduce135","__reduce136","__reduce137","__reduce138","__reduce139","__reduce14","__reduce140","__reduce141","__reduce142","__reduce143","__reduce144","__reduce145","__reduce146","__reduce147","__reduce148","__reduce149","__reduce15","__reduce150","__reduce151","__reduce152","__reduce153","__reduce154","__reduce155","__reduce156","__reduce157","__reduce158","__reduce159","__reduce16","__reduce160","__reduce161","__reduce162","__reduce163","__reduce164","__reduce165","__reduce166","__reduce167","__reduce168","__reduce169","__reduce17","__reduce170","__reduce171","__reduce172","__reduce173","__reduce174","__reduce175","__reduce176","__reduce177","__reduce178","__reduce179","__reduce18","__reduce180","__reduce181","__reduce182","__reduce183","__reduce184","__reduce185","__reduce186","__reduce187","__reduce188","__reduce189","__reduce19","__reduce190","__reduce191","__reduce192","__reduce193","__reduce194","__reduce195","__reduce196","__reduce197","__reduce198","__reduce199","__reduce2","__reduce20","__reduce200","__reduce201","__reduce202","__reduce203","__reduce204","__reduce205","__reduce206","__reduce207","__reduce208","__reduce209","__reduce21","__reduce210","__reduce211","__reduce212","__reduce213","__reduce214","__reduce215","__reduce216","__reduce217","__reduce218","__reduce219","__reduce22","__reduce220","__reduce221","__reduce222","__reduce223","__reduce224","__reduce225","__reduce226","__reduce227","__reduce228","__reduce229","__reduce23","__reduce230","__reduce231","__reduce232","__reduce233","__reduce234","__reduce235","__reduce236","__reduce237","__reduce238","__reduce239","__reduce24","__reduce240","__reduce241","__reduce242","__reduce243","__reduce244","__reduce245","__reduce246","__reduce247","__reduce248","__reduce249","__reduce25","__reduce250","__reduce251","__reduce252","__reduce253","__reduce254","__reduce255","__reduce256","__reduce257","__reduce258","__reduce259","__reduce26","__reduce260","__reduce261","__reduce262","__reduce263","__reduce264","__reduce265","__reduce266","__reduce267","__reduce268","__reduce269","__reduce27","__reduce270","__reduce271","__reduce272","__reduce273","__reduce274","__reduce275","__reduce276","__reduce277","__reduce278","__reduce279","__reduce28","__reduce280","__reduce281","__reduce282","__reduce283","__reduce284","__reduce285","__reduce286","__reduce287","__reduce288","__reduce289","__reduce29","__reduce290","__reduce291","__reduce292","__reduce293","__reduce294","__reduce295","__reduce296","__reduce297","__reduce298","__reduce299","__reduce3","__reduce30","__reduce300","__reduce301","__reduce302","__reduce303","__reduce304","__reduce305","__reduce306","__reduce307","__reduce308","__reduce309","__reduce31","__reduce310","__reduce311","__reduce312","__reduce313","__reduce314","__reduce315","__reduce316","__reduce317","__reduce318","__reduce319","__reduce32","__reduce320","__reduce321","__reduce322","__reduce323","__reduce324","__reduce325","__reduce326","__reduce327","__reduce328","__reduce329","__reduce33","__reduce330","__reduce331","__reduce332","__reduce333","__reduce334","__reduce335","__reduce336","__reduce337","__reduce338","__reduce339","__reduce34","__reduce340","__reduce341","__reduce342","__reduce343","__reduce344","__reduce345","__reduce346","__reduce347","__reduce348","__reduce349","__reduce35","__reduce350","__reduce351","__reduce352","__reduce353","__reduce354","__reduce355","__reduce356","__reduce357","__reduce358","__reduce359","__reduce36","__reduce360","__reduce361","__reduce362","__reduce363","__reduce364","__reduce365","__reduce366","__reduce367","__reduce368","__reduce369","__reduce37","__reduce370","__reduce371","__reduce372","__reduce373","__reduce374","__reduce375","__reduce376","__reduce377","__reduce378","__reduce379","__reduce38","__reduce380","__reduce381","__reduce382","__reduce383","__reduce384","__reduce385","__reduce386","__reduce387","__reduce388","__reduce389","__reduce39","__reduce390","__reduce391","__reduce392","__reduce393","__reduce394","__reduce395","__reduce396","__reduce397","__reduce398","__reduce399","__reduce4","__reduce40","__reduce400","__reduce401","__reduce402","__reduce403","__reduce404","__reduce405","__reduce406","__reduce407","__reduce408","__reduce409","__reduce41","__reduce410","__reduce411","__reduce412","__reduce413","__reduce414","__reduce415","__reduce416","__reduce417","__reduce418","__reduce419","__reduce42","__reduce420","__reduce421","__reduce422","__reduce423","__reduce424","__reduce425","__reduce426","__reduce427","__reduce428","__reduce429","__reduce43","__reduce430","__reduce431","__reduce432","__reduce433","__reduce434","__reduce435","__reduce436","__reduce437","__reduce438","__reduce439","__reduce44","__reduce440","__reduce441","__reduce442","__reduce443","__reduce444","__reduce445","__reduce446","__reduce447","__reduce448","__reduce449","__reduce45","__reduce450","__reduce451","__reduce452","__reduce453","__reduce454","__reduce455","__reduce456","__reduce457","__reduce458","__reduce459","__reduce46","__reduce460","__reduce461","__reduce462","__reduce463","__reduce464","__reduce465","__reduce466","__reduce467","__reduce468","__reduce469","__reduce47","__reduce470","__reduce471","__reduce472","__reduce473","__reduce474","__reduce475","__reduce476","__reduce477","__reduce478","__reduce479","__reduce48","__reduce480","__reduce481","__reduce482","__reduce483","__reduce484","__reduce485","__reduce486","__reduce487","__reduce488","__reduce489","__reduce49","__reduce490","__reduce491","__reduce492","__reduce493","__reduce494","__reduce495","__reduce496","__reduce497","__reduce498","__reduce499","__reduce5","__reduce50","__reduce500","__reduce501","__reduce502","__reduce503","__reduce504","__reduce505","__reduce506","__reduce507","__reduce508","__reduce509","__reduce51","__reduce510","__reduce511","__reduce512","__reduce513","__reduce514","__reduce515","__reduce516","__reduce517","__reduce518","__reduce519","__reduce52","__reduce520","__reduce521","__reduce522","__reduce523","__reduce524","__reduce525","__reduce526","__reduce527","__reduce528","__reduce529","__reduce53","__reduce530","__reduce531","__reduce532","__reduce533","__reduce534","__reduce535","__reduce536","__reduce537","__reduce538","__reduce539","__reduce540","__reduce541","__reduce542","__reduce543","__reduce544","__reduce545","__reduce55","__reduce56","__reduce57","__reduce58","__reduce59","__reduce6","__reduce60","__reduce61","__reduce62","__reduce63","__reduce64","__reduce65","__reduce66","__reduce67","__reduce68","__reduce69","__reduce7","__reduce70","__reduce71","__reduce72","__reduce73","__reduce74","__reduce75","__reduce76","__reduce77","__reduce78","__reduce79","__reduce8","__reduce80","__reduce81","__reduce82","__reduce83","__reduce84","__reduce85","__reduce86","__reduce87","__reduce88","__reduce89","__reduce9","__reduce90","__reduce91","__reduce92","__reduce93","__reduce94","__reduce95","__reduce96","__reduce97","__reduce98","__reduce99","__simulate_reduce","__symbol_type_mismatch","__token_to_integer","__token_to_symbol","_priv","action","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","ctx","eof_action","error_action","error_recovery_symbol","expected_tokens","expected_tokens_from_states","from","from","from","goto","into","into","into","new","new","parse","parse","reduce","simulate_reduce","start_location","start_state","token_to_index","token_to_symbol","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uses_error_recovery","glsl","DEFAULT_SETTINGS","FormattingSettings","FormattingState","HasPrecedence","IndentStyle","Newline","None","None","Space","Spaces","Tabs","Whitespace","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_label_terminator","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","collapse_single_item_compound_statements","consume_function_definition_statement","consume_newline","declaration_terminator","default","default","default","end_initializer_list","enter_block","enter_block_inner","enter_case_label","enter_collapsed_compound_statement","enter_compound_statement_block","enter_external_declaration","enter_function_definition_statement","enter_initializer_list","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","exit_block","exit_collapsed_compound_statement","exit_external_declaration","flush_line","flush_space","fmt","fmt","fmt","fmt","from","from","from","from","from","function_definition_terminator","in_function_definition_statement","indent_style","indentation_level","into","into","into","into","is_first_external_declaration","last_flush_line_flushed_line","minifying","move_to_empty_line","new_line","new_line_pending","newline_after_close_block","newline_after_collapsed_statement","newline_after_open_block","newline_before_close_block","newline_before_collapsed_statement","precedence","settings","show_array_spec","show_arrayed_identifier","show_assignment_op","show_binary_op","show_block","show_case_label","show_compound_statement","show_condition","show_declaration","show_double","show_expr","show_expression_statement","show_external_declaration","show_float","show_for_init_statement","show_for_rest_statement","show_fully_specified_type","show_function_definition","show_function_identifier","show_function_parameter_declaration","show_function_parameter_declarator","show_function_prototype","show_identifier","show_init_declarator_list","show_initializer","show_interpolation_qualifier","show_iteration_statement","show_jump_statement","show_layout_qualifier","show_layout_qualifier_spec","show_path","show_precision_qualifier","show_preprocessor","show_preprocessor_define","show_preprocessor_else","show_preprocessor_elseif","show_preprocessor_endif","show_preprocessor_error","show_preprocessor_extension","show_preprocessor_if","show_preprocessor_ifdef","show_preprocessor_ifndef","show_preprocessor_include","show_preprocessor_line","show_preprocessor_pragma","show_preprocessor_undef","show_preprocessor_version","show_selection_rest_statement","show_selection_statement","show_single_declaration","show_single_declaration_no_type","show_statement","show_storage_qualifier","show_struct","show_struct_field","show_struct_non_declaration","show_subroutine","show_switch_statement","show_translation_unit","show_type_name","show_type_qualifier","show_type_qualifier_spec","show_type_specifier","show_type_specifier_non_array","show_unary_op","space_after_for_statement_separator","space_after_list_separator","space_before_else","space_before_open_block","spaces_around_binary_ops","spaces_surrounding_initializer_list_expressions","spaces_surrounding_statement_parentheses","statement_terminator","struct_declaration_terminator","struct_field_separator","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","write_binary_op","write_declaration_terminator","write_else","write_for_statement_separator","write_function_definition_terminator","write_indent","write_line","write_list_separator","write_statement_closing_parenthesis","write_statement_opening_parenthesis","write_statement_terminator","write_struct_declaration_terminator","write_struct_field_separator","count","count","tab_size","Children","Host","HostMut","Parent","Visit","Visitor","VisitorMut","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","hash","into","make_host_trait","make_visitor_trait","to_owned","try_from","try_into","type_id","visit","visit_array_specifier","visit_array_specifier","visit_array_specifier_dimension","visit_array_specifier_dimension","visit_arrayed_identifier","visit_arrayed_identifier","visit_assignment_op","visit_assignment_op","visit_binary_op","visit_binary_op","visit_block","visit_block","visit_case_label","visit_case_label","visit_compound_statement","visit_compound_statement","visit_condition","visit_condition","visit_declaration","visit_declaration","visit_expr","visit_expr","visit_expr_statement","visit_expr_statement","visit_external_declaration","visit_external_declaration","visit_for_init_statement","visit_for_init_statement","visit_for_rest_statement","visit_for_rest_statement","visit_full_specified_type","visit_full_specified_type","visit_fun_identifier","visit_fun_identifier","visit_function_definition","visit_function_definition","visit_function_parameter_declaration","visit_function_parameter_declaration","visit_function_parameter_declarator","visit_function_parameter_declarator","visit_function_prototype","visit_function_prototype","visit_identifier","visit_identifier","visit_init_declarator_list","visit_init_declarator_list","visit_initializer","visit_initializer","visit_interpolation_qualifier","visit_interpolation_qualifier","visit_iteration_statement","visit_iteration_statement","visit_jump_statement","visit_jump_statement","visit_layout_qualifier","visit_layout_qualifier","visit_layout_qualifier_spec","visit_layout_qualifier_spec","visit_mut","visit_precision_qualifier","visit_precision_qualifier","visit_preprocessor","visit_preprocessor","visit_preprocessor_define","visit_preprocessor_define","visit_preprocessor_elseif","visit_preprocessor_elseif","visit_preprocessor_error","visit_preprocessor_error","visit_preprocessor_extension","visit_preprocessor_extension","visit_preprocessor_extension_behavior","visit_preprocessor_extension_behavior","visit_preprocessor_extension_name","visit_preprocessor_extension_name","visit_preprocessor_if","visit_preprocessor_if","visit_preprocessor_ifdef","visit_preprocessor_ifdef","visit_preprocessor_ifndef","visit_preprocessor_ifndef","visit_preprocessor_include","visit_preprocessor_include","visit_preprocessor_line","visit_preprocessor_line","visit_preprocessor_pragma","visit_preprocessor_pragma","visit_preprocessor_undef","visit_preprocessor_undef","visit_preprocessor_version","visit_preprocessor_version","visit_preprocessor_version_profile","visit_preprocessor_version_profile","visit_selection_rest_statement","visit_selection_rest_statement","visit_selection_statement","visit_selection_statement","visit_single_declaration","visit_single_declaration","visit_single_declaration_no_type","visit_single_declaration_no_type","visit_statement","visit_statement","visit_storage_qualifier","visit_storage_qualifier","visit_struct_field_specifier","visit_struct_field_specifier","visit_struct_specifier","visit_struct_specifier","visit_switch_statement","visit_switch_statement","visit_translation_unit","visit_translation_unit","visit_type_name","visit_type_name","visit_type_qualifier","visit_type_qualifier","visit_type_qualifier_spec","visit_type_qualifier_spec","visit_type_specifier","visit_type_specifier","visit_type_specifier_non_array","visit_type_specifier_non_array","visit_unary_op","visit_unary_op"],"q":[[0,"glsl_lang"],[6,"glsl_lang::ast"],[2599,"glsl_lang::ast::PreprocessorDefineData"],[2604,"glsl_lang::parse"],[2720,"glsl_lang::parse::builder"],[2744,"glsl_lang::parse::parsable"],[2753,"glsl_lang::parser"],[3649,"glsl_lang::parser::__parse__TranslationUnit"],[4484,"glsl_lang::transpiler"],[4485,"glsl_lang::transpiler::glsl"],[4679,"glsl_lang::transpiler::glsl::IndentStyle"],[4682,"glsl_lang::visitor"]],"d":["GLSL abstract syntax tree and grammar.","","Parsing utilities and entry points","","GLSL transpilers – i.e. going from GLSL to anything else.","AST visitors (i.e. on-the-fly mutation at different places …","Specified with angle brackets.","<code>+</code> unary operator","<code>+</code> binary operator","<code>+=</code> assignment operator","All extensions you could ever imagine in your whole …","<code>&amp;&amp;</code> binary operator","<code>&amp;=</code> assignment operator","Type alias for <code>Node&lt;ArraySpecifierData&gt;</code>.","Dimensionality of an array.","Type alias for <code>Node&lt;ArraySpecifierDimensionData&gt;</code>.","One array specifier dimension.","Type alias for <code>Node&lt;ArrayedIdentifierData&gt;</code>.","An identifier with an optional array specifier.","An assignment is also an expression. Gathers an expression …","A variable declaration used as a condition","Type alias for <code>Node&lt;AssignmentOpData&gt;</code>.","All possible operators for assigning expressions.","<code>atomic_uint</code> type specifier","<code>attribute</code> storage qualifier","<code>bvec2</code> type specifier","<code>bvec3</code> type specifier","<code>bvec4</code> type specifier","A binary expression, gathering two expressions and a …","Type alias for <code>Node&lt;BinaryOpData&gt;</code>.","All binary operators that exist in GLSL.","<code>&amp;</code> binary operator","<code>|</code> binary operator","<code>^</code> binary operator","Type alias for <code>Node&lt;BlockData&gt;</code>.","Block declaration","A general purpose block, containing fields and possibly a …","<code>bool</code> type specifier","Boolean constant expression.","Add an array specifier to an expression.","<code>break</code> jump statement","<code>buffer</code> storage qualifier","<code>case:</code> case label","Type alias for <code>Node&lt;CaseLabelData&gt;</code>.","Switch statement case label","Case label statement.","<code>centroid</code> storage qualifier","<code>coherent</code> storage qualifier","An expression that contains several, separated with comma.","Type alias for <code>Node&lt;CommentData&gt;</code>.","A comment","<code>compatibility</code> version profile","<code>~</code> unary operator","Statement block","Type alias for <code>Node&lt;CompoundStatementData&gt;</code>.","Compound statement (with no new scope).","Type alias for <code>Node&lt;ConditionData&gt;</code>.","Condition.","<code>const</code> storage qualifier","<code>continue</code> jump statement","<code>core</code> version profile","<code>dmat2</code> type specifier","<code>dmat2x2</code> type specifier","<code>dmat2x3</code> type specifier","<code>dmat2x4</code> type specifier","<code>dmat3</code> type specifier","<code>dmat3x2</code> type specifier","<code>dmat3x3</code> type specifier","<code>dmat3x4</code> type specifier","<code>dmat4</code> type specifier","<code>dmat4x2</code> type specifier","<code>dmat4x3</code> type specifier","<code>dmat4x4</code> type specifier","<code>dvec2</code> type specifier","<code>dvec3</code> type specifier","<code>dvec4</code> type specifier","<code>--</code> unary operator","Type alias for <code>Node&lt;DeclarationData&gt;</code>.","Declaration","Declaration","Variable declaration","A declaration.","<code>default:</code> case label","<code>#define</code> preprocessor directive","<code>disable</code> preprocessor extension behavior","<code>discard</code> jump statement","<code>/</code> binary operator","<code>/=</code> assignment operator","<code>do</code> iteration statement","An expression associated with a field selection (struct).","<code>double</code> type specifier","Double precision floating expression.","The first argument is the body of the if, the rest is the …","<code>#else</code> preprocessor directive","<code>#elseif</code> preprocessor directive","<code>enable</code> preprocessor extension behavior","<code>#endif</code> preprocessor directive","<code>==</code> binary operator","<code>=</code> assignment operator","<code>#error</code> preprocessor directive","<code>es</code> version profile","<code>[expr]</code> dimension","Type alias for <code>Node&lt;ExprData&gt;</code>.","Expression used for the function name","An expression","The most general form of an expression.","Type alias for <code>Node&lt;ExprStatementData&gt;</code>.","Expression statement.","Expression statement","Expression","<code>#extension</code> preprocessor directive","Type alias for <code>Node&lt;ExternalDeclarationData&gt;</code>.","External declaration.","Unique file identifier","<code>flat</code> interpolation qualifier","<code>float</code> type specifier","Single precision floating expression.","<code>for</code> iteration statement","Type alias for <code>Node&lt;ForInitStatementData&gt;</code>.","For init statement.","Type alias for <code>Node&lt;ForRestStatementData&gt;</code>.","For init statement.","Type alias for <code>Node&lt;FullySpecifiedTypeData&gt;</code>.","Fully specified type.","A functional call. It has a function identifier and a list …","Type alias for <code>Node&lt;FunIdentifierData&gt;</code>.","Function identifier.","Type alias for <code>Node&lt;FunctionDefinitionData&gt;</code>.","Function definition","Function definition.","A preprocessor function definition","Type alias for <code>Node&lt;FunctionParameterDeclarationData&gt;</code>.","Function parameter declaration.","Type alias for <code>Node&lt;FunctionParameterDeclaratorData&gt;</code>.","Function parameter declarator.","Type alias for <code>Node&lt;FunctionPrototypeData&gt;</code>.","Function prototype declaration","Function prototype.","<code>&gt;</code> binary operator","<code>&gt;=</code> binary operator","<code>high</code> precision qualifier","<code>iimage1D</code> type specifier","<code>iimage1DArray</code> type specifier","<code>iimage2D</code> type specifier","<code>iimage2DArray</code> type specifier","<code>iimage2DMS</code> type specifier","<code>iimage2DMSArray</code> type specifier","<code>iimage2DRect</code> type specifier","<code>iimage3D</code> type specifier","<code>iimageBuffer</code> type specifier","<code>iimageCube</code> type specifier","<code>iimageCubeArray</code> type specifier","<code>isampler1D</code> type specifier","<code>isampler1DArray</code> type specifier","<code>isampler2D</code> type specifier","<code>isampler2DArray</code> type specifier","<code>isampler2DMS</code> type specifier","<code>isampler2DMSArray</code> type specifier","<code>isampler2DRect</code> type specifier","<code>isampler3D</code> type specifier","<code>isamplerBuffer</code> type specifier","<code>isamplerCube</code> type specifier","<code>isamplerCubeArray</code> type specifier","<code>isubpassInput</code> type specifier","<code>isubpassInputMs</code> type specifier","<code>itexture1D</code> type specifier","<code>itexture1DArray</code> type specifier","<code>itexture2D</code> type specifier","<code>itexture2DArray</code> type specifier","<code>itexture2DMs</code> type specifier","<code>itexture2DMsArray</code> type specifier","<code>itexture2DRect</code> type specifier","<code>itexture3D</code> type specifier","<code>itextureBuffer</code> type specifier","<code>itextureCube</code> type specifier","<code>itextureCubeArray</code> type specifier","<code>ivec2</code> type specifier","<code>ivec3</code> type specifier","<code>ivec4</code> type specifier","Type alias for <code>Node&lt;IdentifierData&gt;</code>.","An <code>ident = expr</code> layout qualifier","A generic identifier.","<code>#if</code> preprocessor directive","<code>#ifdef</code> preprocessor directive","<code>#ifndef</code> preprocessor directive","<code>image1D</code> type specifier","<code>image1DArray</code> type specifier","<code>image2D</code> type specifier","<code>image2DArray</code> type specifier","<code>image2DMS</code> type specifier","<code>image2DMSArray</code> type specifier","<code>image2DRect</code> type specifier","<code>image3D</code> type specifier","<code>imageBuffer</code> type specifier","<code>imageCube</code> type specifier","<code>imageCubeArray</code> type specifier","<code>in</code> storage qualifier","<code>inout</code> storage qualifier","<code>++</code> unary operator","<code>#include</code> preprocessor directive","Type alias for <code>Node&lt;InitDeclaratorListData&gt;</code>.","List of declarators and initializers","Init declarator list.","Type alias for <code>Node&lt;InitializerData&gt;</code>.","Initializer.","<code>int</code> type specifier","Integral constant expression.","Interpolation qualifier","Type alias for <code>Node&lt;InterpolationQualifierData&gt;</code>.","Interpolation qualifier.","<code>invariant</code> qualifier","Invariant declaration","Iteration statement","Type alias for <code>Node&lt;IterationStatementData&gt;</code>.","Iteration statement.","Jump statement","Type alias for <code>Node&lt;JumpStatementData&gt;</code>.","Jump statement.","<code>&lt;&lt;</code> binary operator","<code>&lt;&lt;=</code> assignment operator","Layout qualifier","Type alias for <code>Node&lt;LayoutQualifierData&gt;</code>.","Layout qualifier.","Type alias for <code>Node&lt;LayoutQualifierSpecData&gt;</code>.","Layout qualifier spec.","<code>#line</code> preprocessor directive","Multiple initializer","<code>low</code> precision qualifier","<code>&lt;</code> binary operator","<code>&lt;=</code> binary operator","<code>mat2</code> type specifier","<code>mat2x2</code> type specifier","<code>mat2x3</code> type specifier","<code>mat2x4</code> type specifier","<code>mat3</code> type specifier","<code>mat3x2</code> type specifier","<code>mat3x3</code> type specifier","<code>mat3x4</code> type specifier","<code>mat4</code> type specifier","<code>mat4x2</code> type specifier","<code>mat4x3</code> type specifier","<code>mat4x4</code> type specifier","<code>medium</code> precision qualifier","<code>-</code> unary operator","<code>%</code> binary operator","<code>%=</code> assignment operator","<code>*</code> binary operator","<code>*</code> assignment operator","Multi-line comment","Named parameter","<code>noperspective</code> interpolation qualifier","A syntax node with span information","Trait for AST node contents.","Derives an implementation of <code>NodeContentDisplay</code> for the …","Trait for displaying a syntax node","Span information for a node, constructed from a pair of …","<code>!=</code> binary operator","<code>!</code> unary operator","A preprocessor definition","<code>||</code> binary operator","<code>|=</code> assignment operator","<code>out</code> storage qualifier","<code>patch</code> storage qualifier","Type alias for <code>Node&lt;PathData&gt;</code>.","A path literal.","Post-decrementation of an expression.","Post-incrementation of an expression.","<code>#pragma</code> preprocessor directive","<code>precise</code> qualifier","Precision qualifier","Precision declaration","Type alias for <code>Node&lt;PrecisionQualifierData&gt;</code>.","Precision qualifier.","Type alias for <code>Node&lt;PreprocessorData&gt;</code>.","Preprocessor directive","Some basic preprocessor directives.","Type alias for <code>Node&lt;PreprocessorDefineData&gt;</code>.","A #define preprocessor directive.","Type alias for <code>Node&lt;PreprocessorElseIfData&gt;</code>.","An #else preprocessor directive.","Type alias for <code>Node&lt;PreprocessorErrorData&gt;</code>.","An #error preprocessor directive.","Type alias for <code>Node&lt;PreprocessorExtensionData&gt;</code>.","Type alias for <code>Node&lt;PreprocessorExtensionBehaviorData&gt;</code>.","An #extension behavior annotation.","An #extension preprocessor directive.","Type alias for <code>Node&lt;PreprocessorExtensionNameData&gt;</code>.","An #extension name annotation.","Type alias for <code>Node&lt;PreprocessorIfData&gt;</code>.","An #if preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIfDefData&gt;</code>.","An #ifdef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIfNDefData&gt;</code>.","A #ifndef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIncludeData&gt;</code>.","An #include name annotation.","Type alias for <code>Node&lt;PreprocessorLineData&gt;</code>.","A #line preprocessor directive.","Type alias for <code>Node&lt;PreprocessorPragmaData&gt;</code>.","A #pragma preprocessor directive. Holds compiler-specific …","Type alias for <code>Node&lt;PreprocessorUndefData&gt;</code>.","A #undef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorVersionData&gt;</code>.","A #version preprocessor directive.","Type alias for <code>Node&lt;PreprocessorVersionProfileData&gt;</code>.","A #version profile annotation.","<code>&gt;&gt;</code> binary operator","<code>&gt;&gt;=</code> assignment operator","<code>readonly</code> storage qualifier","Specified with double quotes.","<code>require</code> preprocessor extension behavior","<code>restrict</code> storage qualifier","<code>return</code> jump statement","<code>sample</code> storage qualifier","<code>sampler</code> type specifier","<code>sampler1D</code> type specifier","<code>sampler1DArray</code> type specifier","<code>sampler1DArrayShadow</code> type specifier","<code>sampler1DShadow</code> type specifier","<code>sampler2D</code> type specifier","<code>sampler2DArray</code> type specifier","<code>sampler2DArrayShadow</code> type specifier","<code>sampler2DMS</code> type specifier","<code>sampler2DMSArray</code> type specifier","<code>sampler2DRect</code> type specifier","<code>sampler2DRectShadow</code> type specifier","<code>sampler2DShadow</code> type specifier","<code>sampler3D</code> type specifier","<code>samplerBuffer</code> type specifier","<code>samplerCube</code> type specifier","<code>samplerCubeArray</code> type specifier","<code>samplerCubeArrayShadow</code> type specifier","<code>samplerCubeShadow</code> type specifier","<code>samplerShadow</code> type specifier","<code>if/...</code> statement","Type alias for <code>Node&lt;SelectionRestStatementData&gt;</code>.","Selection rest statement.","Type alias for <code>Node&lt;SelectionStatementData&gt;</code>.","Selection statement.","<code>shared</code> storage qualifier","<code>shared</code> layout qualifier","Simple initializer","Single-line comment","Type alias for <code>Node&lt;SingleDeclarationData&gt;</code>.","Single declaration.","Type alias for <code>Node&lt;SingleDeclarationNoTypeData&gt;</code>.","A single declaration with implicit, already-defined type.","A <code>SmolStr</code> is a string type that has the following …","<code>smooth</code> interpolation qualifier","A specific extension.","Type alias for <code>Node&lt;StatementData&gt;</code>.","Body of the if.","Statement.","Storage qualifier","Type alias for <code>Node&lt;StorageQualifierData&gt;</code>.","Storage qualifier.","<code>struct</code> type specifier","Type alias for <code>Node&lt;StructFieldSpecifierData&gt;</code>.","Struct field specifier. Used to add fields to struct …","Type alias for <code>Node&lt;StructSpecifierData&gt;</code>.","Struct specifier. Used to create new, user-defined types.","<code>-</code> binary operator","<code>-=</code> assignment operator","<code>subpassInput</code> type specifier","<code>subpassInputMs</code> type specifier","<code>subroutine</code> storage qualifier","<code>switch</code> statement","Type alias for <code>Node&lt;SwitchStatementData&gt;</code>.","Switch statement.","A ternary conditional expression, gathering three …","A range in text, represented as a pair of <code>TextSize</code>.","A measure of text length. Also, equivalently, an index …","<code>texture1D</code> type specifier","<code>texture1DArray</code> type specifier","<code>texture2D</code> type specifier","<code>texture2DArray</code> type specifier","<code>texture2DMs</code> type specifier","<code>texture2DMsArray</code> type specifier","<code>texture2DRect</code> type specifier","<code>texture3D</code> type specifier","<code>textureBuffer</code> type specifier","<code>textureCube</code> type specifier","<code>textureCubeArray</code> type specifier","Starting rule.","Type alias for <code>Node&lt;TypeNameData&gt;</code>.","Raw type name","Any type name.","Type alias for <code>Node&lt;TypeQualifierData&gt;</code>.","Type qualifier.","Type alias for <code>Node&lt;TypeQualifierSpecData&gt;</code>.","Type qualifier spec.","Type alias for <code>Node&lt;TypeSpecifierData&gt;</code>.","Type name used for the function name (as a constructor)","Type specifier.","Type alias for <code>Node&lt;TypeSpecifierNonArrayData&gt;</code>.","Type specifier (non-array).","<code>uimage1D</code> type specifier","<code>uimage1DArray</code> type specifier","<code>uimage2D</code> type specifier","<code>uimage2DArray</code> type specifier","<code>uimage2DMS</code> type specifier","<code>uimage2DMSArray</code> type specifier","<code>uimage2DRect</code> type specifier","<code>uimage3D</code> type specifier","<code>uimageBuffer</code> type specifier","<code>uimageCube</code> type specifier","<code>uimageCubeArray</code> type specifier","<code>uint</code> type specifier","Unsigned integral constant expression.","<code>usampler1D</code> type specifier","<code>usampler1DArray</code> type specifier","<code>usampler2D</code> type specifier","<code>usampler2DArray</code> type specifier","<code>usampler2DMS</code> type specifier","<code>usampler2DMSArray</code> type specifier","<code>usampler2DRect</code> type specifier","<code>usampler3D</code> type specifier","<code>usamplerBuffer</code> type specifier","<code>usamplerCube</code> type specifier","<code>usamplerCubeArray</code> type specifier","<code>usubpassInput</code> type specifier","<code>usubpassInputMs</code> type specifier","<code>uvec2</code> type specifier","<code>uvec3</code> type specifier","<code>uvec4</code> type specifier","A unary expression, gathering a single expression and a …","Type alias for <code>Node&lt;UnaryOpData&gt;</code>.","All unary operators that exist in GLSL.","<code>#undef</code> preprocessor directive","<code>uniform</code> storage qualifier","Unnamed parameter","<code>[]</code> dimension","A variable expression, using an identifier.","<code>varying</code> storage qualifier","<code>vec2</code> type specifier","<code>vec3</code> type specifier","<code>vec4</code> type specifier","<code>#version</code> preprocessor directive","<code>void</code> type specifier","<code>volatile</code> storage qualifier","<code>warn</code> preprocessor extension behavior","<code>while</code> iteration statement","<code>writeonly</code> storage qualifier","<code>^^</code> binary operator","<code>^=</code> assignment operator","","","","","","","","","","Attached array specification","Array part of the specifier","Array specification","Try to parse this function identifier as a raw identifier","Try to parse this function identifier as a mutable raw …","","Parses this identifier as a glsl-lang-quote Rust identifier","Try to parse this function identifier as a <code>glsl-lang-quote</code> …","Try to parse this function identifier as a <code>glsl-lang-quote</code> …","Returns this identifier as a string slice","","Return this type name as a string slice","Create a new <code>TextRange</code> with the given <code>offset</code> and <code>len</code> (…","Behavior for the extension","Body of the switch statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new file identifier for a built-in string","Add an offset to this range.","Checked addition. Returns <code>None</code> if overflow occurred.","Subtract an offset from this range.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raw pragma text","Condition to evaluate","Loop condition","Condition expression","Condition expression","Check if this range contains an offset.","Check if this range contains an offset.","Check if this range completely contains another range.","Contents of this syntax node","Extends the range to cover <code>other</code> as well.","Extends the range to cover <code>other</code> offsets as well.","Declare a new variable.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of all the dimensions – possibly unsized or …","Obtain a display wrapper for the current node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display the node’s children","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display extra information for the node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a zero-length range at the specified offset (…","Ending position of the node","","The end point of this range.","","","","","","Return the end of this span as a LexerPositionield specifications","Declared fields","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Create a new node span from two lexer positions","","","","","","","","","","First declaration","Expression to evaluate and switch on","Create a function identifier from an identifier","Raw identifier","Parameter name","Declared identifier","Identifier to test","Identifier to test","Associated identifiers","List of declared identifiers for this field","List of layout qualifiers","Initializer expression","Initializer expression","The range covered by both ranges, if it exists. If the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the wrapped syntax node, discarding the span …","Convert the contents into a node","Check if this range is empty.","","Return true if this range is empty","","true if this comment is a multi-line comment","true if this comment is a single-line comment","The size of this range.","","Return the length of this span","Line index","Map this content of this node into a new node","Map this content of this node into a new node with the …","Error message","Name of the syntax node’s type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Structure name","Block name","Function name","Declared identifier","Identifier to undefine","Name of the target extension","Creates a new <code>TextRange</code> with the given <code>start</code> and <code>end</code> (…","","Creates a new instance of <code>TextSize</code> from a raw <code>u32</code>.","Create a new file identifier","Create a new syntax node with span information","Create a new node span","Create a new ArrayedIdentifier from a raw identifier and a …","Create a new FullySpecifiedType from a …","Return a 0-length span located at the end of the given …","Constructs inline variant of <code>SmolStr</code>.","","Return a 0-length span located at the start of the given …","Get the number behind this id, regardless of its type","The text size of some primitive text-like object.","Relative order of the two ranges (overlapping ranges are …","Function parameters","","","","","","","","","","","","","","","","","","Include path","Loop increment operation","","","","","Version profile","Function prototype","Type qualifiers for the field","Optional type qualifier","Block type qualifier","List of type qualifiers","Return the span range","","","Rest of the selection statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source id of the node","","","","","","","Return the source identifier for this node span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source index","Span in the input this node was parsed from","Add span information to a syntax node","Starting position of the node","","The start point of this range.","","","","","","Return the start of this span as a LexerPosition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Function body","List of statements","","","","","","","","","","Following declarations","Get the comment’s text, regardless of its type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type name portion of the specifier","Type of the field","Type specifier","Return type","Parameter type","Declaration type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a range up to the given end (<code>..end</code>).","Construct an <code>Expr::Variable(name)</code> from an identifier <code>name</code>","Version number","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of arguments for the function","Identifier for the definition","Identifier for the definition","Associated value","Associated value","Default lexer to use for parsing sources","GLSL parsing with the default lexer","Part of the syntax tree that can be extracted from a …","GLSL language parsing capability","Trait for creating parse builders from lexer inputs","AST node returned by this parser","GLSL language parser","Type of the lexer associated with this input","A parsable is something we can parse either directly, or …","GLSL language parsing functions","Builder structure for a parsing operation","Parsing context","Parsing context data","Errors returned by the parsing operation","Parsing options","Result of a parsing operation","Type of the parser to create","Add a new comment to the parsed comments list","Add a new comment to the parsed comments list","Register <code>name</code> as a new type name","Register <code>name</code> as a new type name","Allow Rust quoting identifiers (<code>#(ident)</code>) in the source","","","","","","","Parse operation builder definition","Create a builder for this lexer input","","","","Clone the parsing data and return the cloned context","","","","Get the list of comments stored in this parse context","","","Obtain a reference to the context’s data","","Obtain an exclusive reference to the context’s data","","","","Default GLSL version number to parse source as","","","","","Extract the subtree for Self from a parent tree R","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Return <code>true</code> if this parsing context supports comments","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume this ParseContext and return its data. Will fail …","Return <code>true</code> if the given name is a type name","Return <code>true</code> if the given name is a type name","","","Instantiate the parser","Create new parsing options using default values","Create a new parsing context from this options object","Create a new ParseContextData object","Update the context data with a new identifier in a given …","Update the context data with a new identifier in a given …","Create a new parsing context from this options object, …","Create a new parsing context from this options object, …","Create a new parsing context from this options object and …","Create a new parsing context from this options object, …","","","Parse the input","Parse the input source","Parse the input source","Parse the input source with the given context","Parse the input source with the given context","Parse the input source with the given context","Parse the input source with the given options","Parse the input source with the given options","Parse the input source with the given options","","","Leave the current nesting level","Leave the current nesting level","Enter a new nesting level for declarations","Enter a new nesting level for declarations","","Unique source identifier for token positions","<code>true</code> if the GLSL target should be Vulkan instead of OpenGL","","","","","","","","","","","","","Create a new ParseContextData object with comments parsing …","Create a new ParseContextData object with comments parsing …","Create a new parse context cloning the given one’s data, …","Create a new ParseContextData object with the given type …","Wrap the given source which parses as Self into something …","Trait for creating parse builders from lexer inputs","Type of the lexer associated with this input","Builder structure for a parsing operation","","","Create a builder for this lexer input","Set the parse options for this parse","","Create a new parse builder from the given input string","Execute the parsing operation, and extract the wanted node","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create a new parse builder from the given input string","Set the parse options for this parse","","Execute the parsing operation","Execute the parsing operation","Set the parser instance to use for this parse","","","","","","Part of the syntax tree that can be extracted from a …","A parsable is something we can parse either directly, or …","Extract the subtree for Self from a parent tree R","","Parse the input source","Parse the input source","Parse the input source with the given context","Parse the input source with the given options","Wrap the given source which parses as Self into something …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","A GLSL450/GLSL460 transpiler that takes a syntax tree and …","","Formatting settings for the GLSL transpiler","Formatting state of the GLSL transpiler","Precedence information for transpiling parentheses properly","Indentation style of the output","A newline","No indentation is generated","No whitespace","A space","Items are indented with spaces.","Items are indented with tabs. In case spaces are needed …","Formatter whitespace","","","","","","","","","What to insert after the case label ending colon","","","","","","","","","Whether to collapse compound statements that contain a …","Consume the current function definition statement","Consume the pending newlines","What to insert after a declaration","","","","Exit the current list initializer","Enter a new block, and update the indentation level","Common logic for entering a new block, and updating the …","Enter a case label","Enter a collapsed compound statement","Enter a new compound statement block, and update the …","Enters a new external declaration, flushing pending …","Enter a new function definition statement","Enter a list initializer","","","","","","","","","Exit the current block, and update the indentation level","Exit the current collapsed compound statement","Exits the current external declaration","Flush pending newlines to the output, if any","Flush pending newlines as spaces to the output, if any","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","What to insert after a function definition","","Indentation style of the output","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Minifying (e.g, source code size reducing) formatting …","Makes sure that the next text to be written to the output …","Append a pending new line to the output","","Insert newline after block close brace","Insert newline after a compound statement collapsed to a …","Insert newlines after block open braces","Insert newlines before block close braces","Insert newline after a compound statement collapsed to a …","Return the precedence level of the expression","Formatting settings","Transpile an array_spec to GLSL","Transpile an arrayed_identifier to GLSL","Transpile an assignment_op to GLSL","Transpile a binary_op to GLSL","Transpile a block(f: &amp;mut F, b: &amp;ast::Block, state: &amp;mut …","Transpile a case_label to GLSL","Transpile a compound_statement to GLSL","Transpile a condition to GLSL","Transpile a declaration to GLSL","Transpile a double(f: &amp;mut F, x: f64, _: &amp;mut …","Transpile an expr to GLSL","Transpile an expression_statement to GLSL","Transpile an external_declaration to GLSL","Transpile a float(f: &amp;mut F, x: f32, _: &amp;mut …","Transpile a for_init_statement to GLSL","Transpile a for_rest_statement to GLSL","Transpile a fully_specified_type to GLSL","Transpile a function_definition to GLSL","Transpile a function_identifier to GLSL","Transpile a function_parameter_declaration to GLSL","Transpile a function_parameter_declarator to GLSL","Transpile a function_prototype to GLSL","Transpile an identifier to GLSL","Transpile an init_declarator_list to GLSL","Transpile an initializer to GLSL","Transpile an interpolation_qualifier to GLSL","Transpile an iteration_statement to GLSL","Transpile a jump_statement to GLSL","Transpile a layout_qualifier to GLSL","Transpile a layout_qualifier_spec to GLSL","Transpile a path(f: &amp;mut F, path: &amp;ast::Path, _: &amp;mut …","Transpile a precision_qualifier to GLSL","Transpile a preprocessor to GLSL","Transpile a preprocessor_define to GLSL","Transpile a preprocessor_else(f: &amp;mut F, _: &amp;mut …","Transpile a preprocessor_elseif to GLSL","Transpile a preprocessor_endif(f: &amp;mut F, _: &amp;mut …","Transpile a preprocessor_error to GLSL","Transpile a preprocessor_extension to GLSL","Transpile a preprocessor_if to GLSL","Transpile a preprocessor_ifdef to GLSL","Transpile a preprocessor_ifndef to GLSL","Transpile a preprocessor_include to GLSL","Transpile a preprocessor_line to GLSL","Transpile a preprocessor_pragma to GLSL","Transpile a preprocessor_undef to GLSL","Transpile a preprocessor_version to GLSL","Transpile a selection_rest_statement to GLSL","Transpile a selection_statement to GLSL","Transpile a single_declaration to GLSL","Transpile a single_declaration_no_type to GLSL","Transpile a statement to GLSL","Transpile a storage_qualifier to GLSL","Transpile a struct to GLSL","Transpile a struct_field to GLSL","Transpile a struct_non_declaration to GLSL","Transpile a subroutine to GLSL","Transpile a switch_statement to GLSL","Transpile a translation_unit to GLSL","Transpile a type_name to GLSL","Transpile a type_qualifier to GLSL","Transpile a type_qualifier_spec to GLSL","Transpile a type_specifier to GLSL","Transpile a type_specifier_non_array to GLSL","Transpile an unary_op to GLSL","Insert a space after a for statement separator token …","Insert a space after a list separator token (i.e., comma)","Insert a space before the else keyword in an if statement","Insert a space before block open braces","Insert spaces around binary ops","Insert a space after the { and before the } delimiting a …","Insert a space before the ( and after the ) that are part …","What to insert after a statement","What to insert after a struct declaration","What to insert between fields of a struct","","","","","","","","","","","","","","","","","Write the current indenting level and style to the output","Write this whitespace to the output","Write a binary operator","Write a declaration terminator","Write a else keyword, part of an if statement","Write a for statement separator","Write a function definition terminator","","","Write a list separator","Write a closing parenthesis for a statement","Write an opening parenthesis for a statement","Write a statement terminator","Write a struct declaration terminator","Write a struct field separator","Number of tab characters used per indent level","Number of space characters used per indent level","Size of the tabs in characters","The visitor will go deeper in the AST by visiting all the …","Part of the AST that can be visited.","Part of the AST that can be visited.","The visitor won’t visit children nor siblings and will …","Visit strategy after having visited an AST node.","Visitor object, visiting AST nodes.","Visitor object, visiting AST nodes.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Visit an AST node.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visit an AST node.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,16,43,44,45,75,44,45,0,0,0,0,0,0,11,53,0,0,18,26,18,18,18,11,0,0,44,44,44,0,34,0,18,11,11,60,26,56,0,50,0,26,26,11,0,0,73,43,50,0,0,0,0,26,60,73,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,43,0,47,50,58,0,56,61,76,60,44,45,57,11,18,11,54,61,61,76,61,44,45,61,73,33,0,4,53,0,0,0,50,58,61,0,0,0,30,18,11,57,0,0,0,0,0,0,11,0,0,0,47,0,62,0,0,0,0,0,34,0,44,44,29,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,28,0,61,61,61,18,18,18,18,18,18,18,18,18,18,18,26,26,43,61,0,34,0,0,0,18,11,25,0,0,25,34,50,0,0,50,0,0,44,45,25,0,0,0,0,61,42,29,44,44,18,18,18,18,18,18,18,18,18,18,18,18,29,43,44,45,44,45,77,37,30,0,0,0,0,0,44,43,62,44,45,26,26,0,0,11,11,61,25,25,34,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,26,16,76,26,60,26,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,50,0,0,0,0,26,28,42,77,0,0,0,0,0,30,75,0,54,0,25,0,0,18,0,0,0,0,44,45,18,18,26,50,0,0,11,0,0,18,18,18,18,18,18,18,18,18,18,18,0,0,18,0,0,0,0,0,0,4,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,0,0,61,26,37,33,11,26,18,18,18,61,18,26,76,57,26,44,45,1,1,1,2,2,2,1,2,2,23,20,40,4,4,6,5,4,11,5,12,13,1,74,55,5,1,12,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,5,1,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,15,1,2,1,2,5,1,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,5,1,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,12,2,15,6,19,70,52,59,63,65,1,1,1,6,1,1,50,1,12,2,15,12,6,6,5,1,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,32,220,5,12,13,16,6,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,220,5,5,12,12,13,13,16,16,6,18,18,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,4,4,36,36,37,37,38,38,39,39,40,40,41,41,42,42,11,11,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,220,5,5,12,12,13,13,16,16,6,18,18,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,4,4,36,36,37,37,38,38,39,39,40,40,41,41,42,42,11,11,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,1,220,5,1,12,13,16,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,1,1,5,1,12,12,12,12,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,5,1,12,13,2,16,15,6,19,29,30,43,44,45,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,46,112,113,114,115,116,117,118,119,120,121,21,35,5,5,1,12,12,13,13,2,16,15,15,6,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,5,5,5,1,1,12,12,12,12,13,13,13,13,2,2,2,16,16,15,15,15,15,6,6,6,18,18,18,19,20,20,20,20,21,21,22,22,23,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,31,32,32,33,33,34,34,35,35,4,4,36,36,37,37,38,38,39,39,40,40,41,41,42,42,42,42,11,11,11,11,11,11,11,43,43,44,44,45,45,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,12,12,12,12,49,19,12,5,1,12,13,2,15,6,19,39,55,4,23,38,41,66,67,35,22,27,40,41,1,5,1,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,6,8,1,12,19,12,77,77,1,12,19,69,6,6,64,220,5,5,12,12,13,13,16,16,6,18,18,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,4,4,36,36,37,37,38,38,39,39,40,40,41,41,42,42,11,11,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,21,35,36,40,71,74,1,12,2,15,6,19,23,31,19,12,12,19,15,2,1,36,46,46,6,46,46,46,6,46,46,46,5,12,13,2,15,6,19,68,59,11,43,44,111,72,48,22,31,35,24,19,19,2,52,5,1,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,220,5,12,13,16,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,19,69,6,8,220,5,1,12,13,16,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,1,1,48,49,1,1,1,2,2,2,1,2,2,39,77,5,1,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,5,12,12,13,15,6,5,1,12,13,2,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,5,1,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,20,22,31,36,38,40,5,1,12,13,2,16,15,6,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,4,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,1,11,72,148,150,94,95,96,97,98,99,151,100,101,152,102,103,104,105,106,107,153,108,154,155,156,157,158,159,160,109,110,161,111,46,162,112,113,114,115,116,163,164,117,118,119,165,166,120,121,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,148,150,94,95,96,97,98,99,151,100,101,152,102,103,104,105,106,107,153,108,154,155,156,157,158,159,160,109,110,161,111,46,162,112,113,114,115,116,163,164,117,118,119,165,166,120,121,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,46,112,113,114,115,116,117,118,119,120,121,221,222,221,222,221,0,0,0,0,0,223,0,224,0,0,0,0,0,0,0,0,185,140,184,140,184,141,141,140,184,141,140,184,0,224,141,140,184,140,141,140,184,184,184,186,140,140,140,141,140,184,141,141,140,184,141,200,141,140,184,141,140,140,184,140,0,141,140,184,140,140,184,186,184,223,141,140,184,140,184,140,140,140,140,186,0,223,225,226,227,225,226,227,225,226,186,184,140,184,140,184,186,141,141,141,140,184,141,140,184,141,140,184,141,140,184,184,184,140,184,200,0,224,0,186,186,224,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,0,0,200,0,227,227,227,227,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,0,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,0,0,0,0,0,0,0,0,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,204,206,204,208,206,204,208,204,204,204,204,204,204,206,204,208,204,206,204,208,208,208,208,208,204,204,204,204,204,204,206,204,208,206,204,208,206,204,208,204,0,0,0,0,0,0,212,211,212,212,211,211,0,211,212,213,214,211,212,213,214,213,211,212,213,214,211,212,213,214,213,214,214,213,211,213,214,214,214,214,214,214,214,214,214,214,211,212,213,214,211,212,213,214,214,214,214,214,214,211,212,213,214,211,212,213,214,214,213,214,213,214,211,212,213,214,214,214,213,214,214,214,213,213,213,213,213,229,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,213,213,213,213,213,213,213,213,213,211,212,213,214,211,212,213,214,211,212,213,214,211,212,213,214,211,212,214,214,214,214,214,214,214,214,214,214,214,214,214,230,231,230,219,0,0,219,0,0,0,219,219,219,219,219,219,219,219,219,219,0,0,219,219,219,219,232,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,233,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182,149,182],"fc":[1885],"p":[[3,"TextRange"],[3,"TextSize"],[4,"Delta"],[4,"FunIdentifierData"],[3,"IdentifierData"],[3,"Node"],[4,"Option"],[8,"NodeContent"],[8,"AsRef"],[15,"str"],[4,"ExprData"],[3,"SmolStr"],[3,"TypeNameData"],[15,"u32"],[3,"FileId"],[4,"PathData"],[8,"Clone"],[4,"TypeSpecifierNonArrayData"],[3,"NodeSpan"],[3,"TypeSpecifierData"],[3,"StructSpecifierData"],[3,"StructFieldSpecifierData"],[3,"ArrayedIdentifierData"],[3,"TypeQualifierData"],[4,"TypeQualifierSpecData"],[4,"StorageQualifierData"],[3,"LayoutQualifierData"],[4,"LayoutQualifierSpecData"],[4,"PrecisionQualifierData"],[4,"InterpolationQualifierData"],[3,"FullySpecifiedTypeData"],[3,"ArraySpecifierData"],[4,"ArraySpecifierDimensionData"],[4,"DeclarationData"],[3,"BlockData"],[3,"FunctionPrototypeData"],[4,"FunctionParameterDeclarationData"],[3,"FunctionParameterDeclaratorData"],[3,"InitDeclaratorListData"],[3,"SingleDeclarationData"],[3,"SingleDeclarationNoTypeData"],[4,"InitializerData"],[4,"UnaryOpData"],[4,"BinaryOpData"],[4,"AssignmentOpData"],[3,"TranslationUnit"],[4,"ExternalDeclarationData"],[3,"FunctionDefinitionData"],[3,"CompoundStatementData"],[4,"StatementData"],[3,"ExprStatementData"],[3,"SelectionStatementData"],[4,"ConditionData"],[4,"SelectionRestStatementData"],[3,"SwitchStatementData"],[4,"CaseLabelData"],[4,"IterationStatementData"],[4,"ForInitStatementData"],[3,"ForRestStatementData"],[4,"JumpStatementData"],[4,"PreprocessorData"],[4,"PreprocessorDefineData"],[3,"PreprocessorElseIfData"],[3,"PreprocessorErrorData"],[3,"PreprocessorIfData"],[3,"PreprocessorIfDefData"],[3,"PreprocessorIfNDefData"],[3,"PreprocessorIncludeData"],[3,"PreprocessorLineData"],[3,"PreprocessorPragmaData"],[3,"PreprocessorUndefData"],[3,"PreprocessorVersionData"],[4,"PreprocessorVersionProfileData"],[3,"PreprocessorExtensionData"],[4,"PreprocessorExtensionNameData"],[4,"PreprocessorExtensionBehaviorData"],[4,"CommentData"],[4,"Ordering"],[8,"Ord"],[15,"bool"],[8,"Into"],[8,"Deserializer"],[4,"Result"],[8,"Deserialize"],[3,"NodeDisplayWrapper"],[8,"NodeContentDisplay"],[15,"usize"],[3,"Formatter"],[3,"Error"],[3,"LexerPosition"],[4,"Bound"],[3,"String"],[8,"PartialEq"],[6,"TypeSpecifierNonArray"],[6,"TypeSpecifier"],[6,"StructSpecifier"],[6,"StructFieldSpecifier"],[6,"ArrayedIdentifier"],[6,"TypeQualifier"],[6,"StorageQualifier"],[6,"LayoutQualifier"],[6,"PrecisionQualifier"],[6,"InterpolationQualifier"],[6,"FullySpecifiedType"],[6,"ArraySpecifier"],[6,"ArraySpecifierDimension"],[6,"Declaration"],[6,"FunIdentifier"],[6,"Expr"],[6,"UnaryOp"],[6,"AssignmentOp"],[6,"FunctionDefinition"],[6,"CompoundStatement"],[6,"Statement"],[6,"ExprStatement"],[6,"SelectionStatement"],[6,"SwitchStatement"],[6,"CaseLabel"],[6,"IterationStatement"],[6,"JumpStatement"],[6,"Preprocessor"],[8,"Display"],[8,"Debug"],[3,"TokenText"],[3,"Unescaped"],[15,"never"],[15,"f64"],[15,"i32"],[15,"f32"],[8,"IntoIterator"],[8,"Hasher"],[8,"Hash"],[8,"From"],[8,"FnOnce"],[15,"u8"],[15,"slice"],[8,"TextLen"],[4,"ParseErrorKind"],[3,"Located"],[3,"ParseContext"],[3,"ParseOptions"],[8,"PartialOrd"],[8,"Serializer"],[8,"Serialize"],[8,"Iterator"],[3,"TryFromIntError"],[3,"TypeId"],[6,"Identifier"],[8,"Visitor"],[6,"TypeName"],[6,"TypeQualifierSpec"],[6,"LayoutQualifierSpec"],[6,"Block"],[6,"FunctionPrototype"],[6,"FunctionParameterDeclaration"],[6,"FunctionParameterDeclarator"],[6,"InitDeclaratorList"],[6,"SingleDeclaration"],[6,"SingleDeclarationNoType"],[6,"Initializer"],[6,"BinaryOp"],[6,"ExternalDeclaration"],[6,"Condition"],[6,"SelectionRestStatement"],[6,"ForInitStatement"],[6,"ForRestStatement"],[6,"PreprocessorDefine"],[6,"PreprocessorElseIf"],[6,"PreprocessorError"],[6,"PreprocessorIf"],[6,"PreprocessorIfDef"],[6,"PreprocessorIfNDef"],[6,"PreprocessorInclude"],[6,"PreprocessorLine"],[6,"PreprocessorPragma"],[6,"PreprocessorUndef"],[6,"PreprocessorVersion"],[6,"PreprocessorVersionProfile"],[6,"PreprocessorExtension"],[6,"PreprocessorExtensionName"],[6,"PreprocessorExtensionBehavior"],[8,"VisitorMut"],[4,"Cow"],[3,"ParseContextData"],[8,"HasParser"],[3,"ParseBuilder"],[3,"Global"],[3,"BTreeMap"],[3,"Ref"],[3,"RefMut"],[4,"IdentifierContext"],[8,"TypeTablePolicy"],[8,"HasLexerError"],[4,"Token"],[4,"ParseError"],[6,"ParseError"],[6,"ParseResult"],[8,"LangLexer"],[6,"DefaultLexer"],[8,"Extractable"],[3,"Vec"],[15,"i16"],[3,"PhantomData"],[3,"__StateMachine"],[4,"SimulatedReduce"],[4,"__Symbol"],[6,"ErrorRecovery"],[3,"TranslationUnitParser"],[6,"SymbolTriple"],[6,"ParseResult"],[4,"IndentStyle"],[4,"Whitespace"],[3,"FormattingSettings"],[3,"FormattingState"],[8,"Write"],[8,"Sized"],[6,"Result"],[6,"Path"],[4,"Visit"],[8,"NodeDisplay"],[13,"FunctionLike"],[13,"ObjectLike"],[8,"LangParser"],[8,"IntoParseBuilderExt"],[8,"Parse"],[8,"DefaultParse"],[8,"Parsable"],[8,"__ToTriple"],[8,"HasPrecedence"],[13,"Tabs"],[13,"Spaces"],[8,"Host"],[8,"HostMut"]]},\
"glsl_lang_cli":{"doc":"<code>glsl-lang</code> debugging CLI.","t":"DDMLLLLLLLLMLLLMLLLFFFFFMLMLLMLLLLLLL","n":["Opts","ParseError","bad_bit","borrow","borrow","borrow_mut","borrow_mut","code","fmt","fmt","fmt","format","from","from","from_args","inner","into","into","labels","main","output_glsl","output_json","output_text","parse_tu","path","redact_arg_values","snip","source","source_code","src","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"glsl_lang_cli"]],"d":["glsl-lang command-line interface","","","","","","","","","","","output format (text, json or glsl)","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","CLI entry point","","","","","input file path","","","","","","","","","","","",""],"i":[0,0,2,6,2,6,2,2,6,2,2,6,6,2,6,2,6,2,2,0,0,0,0,0,6,6,2,2,2,2,2,6,2,6,2,6,2],"f":[0,0,0,[[]],[[]],[[]],[[]],[[[2,[1]]],[[5,[[4,[3]]]]]],[[6,7],8],[[[2,[1]],7],8],[[[2,[[0,[9,1]]]],7],8],0,[[]],[[]],[[[11,[10]],[11,[10]]],[[13,[6,12]]]],0,[[]],[[]],[[[2,[1]]],[[5,[[4,[14]]]]]],[[],[[16,[15]]]],[[17,18],19],[[17,18],19],[[17,18],19],[[10,10],[[16,[18]]]],0,[[[11,[10]],[11,[10]]],[[13,[[21,[20]],12]]]],0,[[[2,[1]]],[[5,[1]]]],[[[2,[1]]],[[5,[22]]]],0,[[],20],[[],13],[[],13],[[],13],[[],13],[[],23],[[],23]],"c":[],"p":[[8,"Error"],[3,"ParseError"],[8,"Display"],[3,"Box"],[4,"Option"],[3,"Opts"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"str"],[15,"slice"],[3,"EarlyExit"],[4,"Result"],[8,"Iterator"],[3,"Error"],[6,"Result"],[8,"Write"],[3,"TranslationUnit"],[6,"Result"],[3,"String"],[3,"Vec"],[8,"SourceCode"],[3,"TypeId"]]},\
"glsl_lang_lexer":{"doc":"","t":"NNNNNNNNNNNNNNNNNNNNGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNDINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNQNNNQIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDDDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMAMMMKMKKKMMAAAGNDEDDDILLLLMLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLKLLLMMLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHLLLLLLLLLLLOLLLLLLLLLLFDNENNLLAAMLLLLLALLALLLLMMEGNDNNLLLLMLMMLLLLLLLLLLMLLLLLLLLLLDLLLLLLMLLLLLLLLLLQDIDDILLLLLLKMMMKLLLMMMMMLLLLLLLLKKMKMLLMLLLLLLLLLLLLDDLLLLMLLMMMMLLLLLLLMLLMLLLLLLL","n":["AddAssign","Ampersand","AndAssign","AndOp","AtomicUInt","Attribute","BVec2","BVec3","BVec4","Bang","Bool","BoolConstant","Break","Buffer","Caret","Case","Centroid","Coherent","Colon","Comma","CommentList","Const","Continue","DMat2","DMat2x2","DMat2x3","DMat2x4","DMat3","DMat3x2","DMat3x3","DMat3x4","DMat4","DMat4x2","DMat4x3","DMat4x4","DVec2","DVec3","DVec4","Dash","DecOp","Default","Discard","DivAssign","Do","Dot","Double","DoubleConstant","Else","EqOp","Equal","Error","Error","Flat","Float","FloatConstant","For","FunctionPrototype","GeOp","GlslTypeTablePolicy","HasLexerError","HighPrecision","IImage1D","IImage1DArray","IImage2D","IImage2DArray","IImage2DMs","IImage2DMsArray","IImage2DRect","IImage3D","IImageBuffer","IImageCube","IImageCubeArray","ISampler1D","ISampler1DArray","ISampler2D","ISampler2DArray","ISampler2DMs","ISampler2DMsArray","ISampler2DRect","ISampler3D","ISamplerBuffer","ISamplerCube","ISamplerCubeArray","ISubpassInput","ISubpassInputMs","ITexture1D","ITexture1DArray","ITexture2D","ITexture2DArray","ITexture2DMs","ITexture2DMsArray","ITexture2DRect","ITexture3D","ITextureBuffer","ITextureCube","ITextureCubeArray","IVec2","IVec3","IVec4","Identifier","IdentifierContext","If","Image1D","Image1DArray","Image2D","Image2DArray","Image2DMs","Image2DMsArray","Image2DRect","Image3D","ImageBuffer","ImageCube","ImageCubeArray","In","InOut","IncOp","Input","Int","IntConstant","Invariant","Iter","LangLexer","LangLexerIterator","Layout","LeOp","LeftAngle","LeftAssign","LeftBrace","LeftBracket","LeftOp","LeftParen","LowPrecision","Mat2","Mat2x2","Mat2x3","Mat2x4","Mat3","Mat3x2","Mat3x3","Mat3x4","Mat4","Mat4x2","Mat4x3","Mat4x4","MediumPrecision","ModAssign","MulAssign","MultiLineComment","NeOp","NoPerspective","OrAssign","OrOp","Out","ParseContext","ParseContextData","ParseOptions","Patch","Percent","Plus","PpCompatibility","PpCore","PpDefine","PpElif","PpElse","PpEndIf","PpError","PpEs","PpExtDisable","PpExtEnable","PpExtRequire","PpExtWarn","PpExtension","PpIf","PpIfDef","PpIfNDef","PpInclude","PpLine","PpPathAbsolute","PpPathRelative","PpPragma","PpRest","PpUndef","PpVersion","Precise","Precision","Question","ReadOnly","Restrict","Return","RightAngle","RightAssign","RightBrace","RightBracket","RightOp","RightParen","Sample","Sampler","Sampler1D","Sampler1DArray","Sampler1DArrayShadow","Sampler1DShadow","Sampler2D","Sampler2DArray","Sampler2DArrayShadow","Sampler2DMs","Sampler2DMsArray","Sampler2DRect","Sampler2DRectShadow","Sampler2DShadow","Sampler3D","SamplerBuffer","SamplerCube","SamplerCubeArray","SamplerCubeArrayShadow","SamplerCubeShadow","SamplerShadow","Semicolon","Shared","SingleLineComment","Slash","Smooth","Star","Struct","SubAssign","SubpassInput","SubpassInputMs","Subroutine","Switch","Texture1D","Texture1DArray","Texture2D","Texture2DArray","Texture2DMs","Texture2DMsArray","Texture2DRect","Texture3D","TextureBuffer","TextureCube","TextureCubeArray","Tilde","Token","TypeName","TypeTablePolicy","UImage1D","UImage1DArray","UImage2D","UImage2DArray","UImage2DMs","UImage2DMsArray","UImage2DRect","UImage3D","UImageBuffer","UImageCube","UImageCubeArray","UInt","UIntConstant","USampler1D","USampler1DArray","USampler2D","USampler2DArray","USampler2DMs","USampler2DMsArray","USampler2DRect","USampler3D","USamplerBuffer","USamplerCube","USamplerCubeArray","USubpassInput","USubpassInputMs","UTexture1D","UTexture1DArray","UTexture2D","UTexture2DArray","UTexture2DMs","UTexture2DMsArray","UTexture2DRect","UTexture3D","UTextureBuffer","UTextureCube","UTextureCubeArray","UVec2","UVec3","UVec4","Uniform","Varying","Vec2","Vec3","Vec4","VerticalBar","Void","Volatile","While","Whitespace","WriteOnly","XorAssign","XorOp","allow_rs_ident","comments","context","data","default_version","names","new","policy","promote_to_type_name","resolve_err","run","source_id","target_vulkan","token","v2","v2_full","CommentList","FunctionPrototype","GlslTypeTablePolicy","IdentifierContext","ParseContext","ParseContextData","ParseOptions","TypeTablePolicy","add_comment","add_comment","add_type_name","add_type_name","allow_rs_ident","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_inner","clone_into","clone_into","clone_into","clone_into","clone_into","comments","comments","data","data","data_mut","default","default","default","default_version","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","has_comments","into","into","into","into","into","into_data","is_type_name","is_type_name","names","new","new","new","new_identifier","new_identifier","new_with_comments","new_with_comments_and_policy","new_with_context","new_with_policy","policy","pop_scope","pop_scope","promote_to_type_name","promote_to_type_name","push_scope","push_scope","source_id","target_vulkan","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_comments","with_comments_and_policy","with_policy","with_policy","AddAssign","Ampersand","AndAssign","AndOp","AtomicUInt","Attribute","BVec2","BVec3","BVec4","Bang","Bool","BoolConstant","Break","Buffer","Caret","Case","Centroid","Coherent","Colon","Comma","Const","Continue","DMat2","DMat2x2","DMat2x3","DMat2x4","DMat3","DMat3x2","DMat3x3","DMat3x4","DMat4","DMat4x2","DMat4x3","DMat4x4","DVec2","DVec3","DVec4","Dash","DecOp","Default","Discard","DivAssign","Do","Dot","Double","DoubleConstant","Else","EqOp","Equal","Error","Flat","Float","FloatConstant","For","GeOp","HighPrecision","IImage1D","IImage1DArray","IImage2D","IImage2DArray","IImage2DMs","IImage2DMsArray","IImage2DRect","IImage3D","IImageBuffer","IImageCube","IImageCubeArray","ISampler1D","ISampler1DArray","ISampler2D","ISampler2DArray","ISampler2DMs","ISampler2DMsArray","ISampler2DRect","ISampler3D","ISamplerBuffer","ISamplerCube","ISamplerCubeArray","ISubpassInput","ISubpassInputMs","ITexture1D","ITexture1DArray","ITexture2D","ITexture2DArray","ITexture2DMs","ITexture2DMsArray","ITexture2DRect","ITexture3D","ITextureBuffer","ITextureCube","ITextureCubeArray","IVec2","IVec3","IVec4","Identifier","If","Image1D","Image1DArray","Image2D","Image2DArray","Image2DMs","Image2DMsArray","Image2DRect","Image3D","ImageBuffer","ImageCube","ImageCubeArray","In","InOut","IncOp","Int","IntConstant","Invariant","Layout","LeOp","LeftAngle","LeftAssign","LeftBrace","LeftBracket","LeftOp","LeftParen","LowPrecision","Mat2","Mat2x2","Mat2x3","Mat2x4","Mat3","Mat3x2","Mat3x3","Mat3x4","Mat4","Mat4x2","Mat4x3","Mat4x4","MediumPrecision","ModAssign","MulAssign","MultiLineComment","NeOp","NoPerspective","OrAssign","OrOp","Out","Patch","Percent","Plus","PpCompatibility","PpCore","PpDefine","PpElif","PpElse","PpEndIf","PpError","PpEs","PpExtDisable","PpExtEnable","PpExtRequire","PpExtWarn","PpExtension","PpIf","PpIfDef","PpIfNDef","PpInclude","PpLine","PpPathAbsolute","PpPathRelative","PpPragma","PpRest","PpUndef","PpVersion","Precise","Precision","Question","ReadOnly","Restrict","Return","RightAngle","RightAssign","RightBrace","RightBracket","RightOp","RightParen","Sample","Sampler","Sampler1D","Sampler1DArray","Sampler1DArrayShadow","Sampler1DShadow","Sampler2D","Sampler2DArray","Sampler2DArrayShadow","Sampler2DMs","Sampler2DMsArray","Sampler2DRect","Sampler2DRectShadow","Sampler2DShadow","Sampler3D","SamplerBuffer","SamplerCube","SamplerCubeArray","SamplerCubeArrayShadow","SamplerCubeShadow","SamplerShadow","Semicolon","Shared","SingleLineComment","Slash","Smooth","Star","Struct","SubAssign","SubpassInput","SubpassInputMs","Subroutine","Switch","Texture1D","Texture1DArray","Texture2D","Texture2DArray","Texture2DMs","Texture2DMsArray","Texture2DRect","Texture3D","TextureBuffer","TextureCube","TextureCubeArray","Tilde","Token","TypeName","UImage1D","UImage1DArray","UImage2D","UImage2DArray","UImage2DMs","UImage2DMsArray","UImage2DRect","UImage3D","UImageBuffer","UImageCube","UImageCubeArray","UInt","UIntConstant","USampler1D","USampler1DArray","USampler2D","USampler2DArray","USampler2DMs","USampler2DMsArray","USampler2DRect","USampler3D","USamplerBuffer","USamplerCube","USamplerCubeArray","USubpassInput","USubpassInputMs","UTexture1D","UTexture1DArray","UTexture2D","UTexture2DArray","UTexture2DMs","UTexture2DMsArray","UTexture2DRect","UTexture3D","UTextureBuffer","UTextureCube","UTextureCubeArray","UVec2","UVec3","UVec4","Uniform","Varying","Vec2","Vec3","Vec4","VerticalBar","Void","Volatile","While","Whitespace","WriteOnly","XorAssign","XorOp","__TOKEN_TOKENS","all_tokens","as_str","borrow","borrow_mut","clone","clone_into","description","eq","fmt","fmt","from","impl_from","into","is_pp","kinds","parser_token","to_owned","to_string","try_from","try_into","type_id","variant_name","lang_token","Directives","Io","LexicalError","Processor","Token","borrow","borrow_mut","core","directives","directives","eq","fmt","fmt","from","from","fs","into","location","str","to_string","try_from","try_into","type_id","kind","pos","HandleTokenResult","Item","Item","LexerCore","None","Pending","borrow","borrow","borrow_mut","borrow_mut","ctx","default","directives","file_id","from","from","handle_directive","handle_file_id","handle_token","into","into","into_directives","lang_token","new","opts","pop_event","pop_item","push_errors","push_item","try_from","try_from","try_into","try_into","type_id","type_id","Directives","borrow","borrow_mut","clone","clone_into","default","directives","directives","fmt","from","from","get_declaration","inject","into","to_owned","try_from","try_into","type_id","Error","File","FileSystem","Lexer","LexerIterator","PreprocessorExt","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","canonicalize","core","current_file","current_file","exists","from","from","from","handle_token","handle_token","inner","inner","inner","into","into","into","into_directives","into_iter","new","new","next","open","open_source","opts","read","registry","resolve_err","run","state","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_context","with_registry","with_state","Lexer","LexerIterator","borrow","borrow","borrow_mut","borrow_mut","core","from","from","handle_token","handle_token","inner","inner","into","into","into_directives","into_iter","new","new_with_state","next","opts","resolve_err","run","source_id","try_from","try_from","try_into","try_into","type_id","type_id","with_context"],"q":[[0,"glsl_lang_lexer"],[312,"glsl_lang_lexer::context"],[424,"glsl_lang_lexer::token"],[729,"glsl_lang_lexer::v2"],[730,"glsl_lang_lexer::v2_full"],[753,"glsl_lang_lexer::v2_full::LexicalError"],[755,"glsl_lang_lexer::v2_full::core"],[790,"glsl_lang_lexer::v2_full::directives"],[808,"glsl_lang_lexer::v2_full::fs"],[861,"glsl_lang_lexer::v2_full::str"]],"d":["","","","","","","","","","","","","","","","","","","","","A list of comments indexed by their position","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type of lexical analysis error","","","","","The identifier is a function declaration name","","Default GLSL type table policy: only struct declarations …","Language lexer error definition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Context in which an identifier is seen for the first time","","","","","","","","","","","","","","","","Type of the input for this lexer","","","","Type of the iterator returned by this lexer","GLSL language lexer","GLSL language lexer iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parsing context","Parsing context data","Parsing options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A policy to dictate which identifiers should be seen as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allow Rust quoting identifiers (<code>#(ident)</code>) in the source","List of parsed comments (or <code>None</code> to disable comment …","","Parsing data","Default GLSL version number to parse source as","List of known type names","Instantiate the lexer","","Return <code>true</code> if the given identifier (in its context) …","","Run the lexer","Unique source identifier for token positions","<code>true</code> if the GLSL target should be Vulkan instead of OpenGL","","","glsl-lang-pp/full based lexer","A list of comments indexed by their position","The identifier is a function declaration name","Default GLSL type table policy: only struct declarations …","Context in which an identifier is seen for the first time","Parsing context","Parsing context data","Parsing options","A policy to dictate which identifiers should be seen as …","Add a new comment to the parsed comments list","Add a new comment to the parsed comments list","Register <code>name</code> as a new type name","Register <code>name</code> as a new type name","Allow Rust quoting identifiers (<code>#(ident)</code>) in the source","","","","","","","","","","","","","","","","Clone the parsing data and return the cloned context","","","","","","Get the list of comments stored in this parse context","List of parsed comments (or <code>None</code> to disable comment …","Obtain a reference to the context’s data","Parsing data","Obtain an exclusive reference to the context’s data","","","","Default GLSL version number to parse source as","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return <code>true</code> if this parsing context supports comments","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume this ParseContext and return its data. Will fail …","Return <code>true</code> if the given name is a type name","Return <code>true</code> if the given name is a type name","List of known type names","Create new parsing options using default values","Create a new parsing context from this options object","Create a new ParseContextData object","Update the context data with a new identifier in a given …","Update the context data with a new identifier in a given …","Create a new parsing context from this options object, …","Create a new parsing context from this options object, …","Create a new parsing context from this options object and …","Create a new parsing context from this options object, …","","Leave the current nesting level","Leave the current nesting level","Return <code>true</code> if the given identifier (in its context) …","","Enter a new nesting level for declarations","Enter a new nesting level for declarations","Unique source identifier for token positions","<code>true</code> if the GLSL target should be Vulkan instead of OpenGL","","","","","","","","","","","","","","","","","","","","","Create a new ParseContextData object with comments parsing …","Create a new ParseContextData object with comments parsing …","Create a new parse context cloning the given one’s data, …","Create a new ParseContextData object with the given type …eturn this token’s inner text as a string slice","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Return <code>true</code> if this token is a preprocessor token","","","","","","","","","","","i/o error","Lexical analysis error","Preprocessor error","Invalid token in lexical analysis","","","","","","","","","","Returns the argument unchanged.","Filesystem based glsl-lang-pp preprocessing lexer","Calls <code>U::from(self)</code>.","","Memory based glsl-lang-pp preprocessing lexer","","","","","Type of invalid token error","Location of the error","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","A preprocessor parsed file ready for lexing","","glsl-lang-pp filesystem lexer","glsl-lang-pp filesystem lexer iterator","glsl-lang-pp preprocessor extensions","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Open the given file for lexing","Open the given source block for lexing","","","","","","","","","","","","","","","","","Set the extension registry to use for this file","Set the default processor state for processing this file","glsl-lang-pp memory lexer","glsl-lang-pp memory lexer iterator","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,64,6,6,6,6,3,6,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,65,6,6,6,65,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,11,0,9,1,11,65,11,21,66,65,1,1,0,0,0,0,3,0,0,0,0,0,0,9,11,9,11,1,1,9,11,3,13,1,9,11,3,13,1,9,11,3,13,9,1,9,11,3,13,11,11,9,9,9,1,9,11,1,1,9,11,3,1,3,1,9,11,3,13,1,9,9,11,3,13,9,1,9,11,3,13,9,9,11,11,1,9,11,9,11,9,9,9,9,11,9,11,21,13,9,11,1,1,1,9,11,3,13,1,9,11,3,13,1,9,11,3,13,1,9,11,3,13,11,11,9,11,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,0,0,31,0,31,31,31,31,0,0,44,31,31,31,31,31,0,31,31,0,31,31,31,31,67,67,0,0,34,0,34,34,35,34,35,34,35,34,35,35,35,34,35,35,35,35,34,35,35,35,35,34,34,34,34,35,34,35,34,35,34,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,52,0,0,0,0,0,54,53,58,54,53,58,52,53,54,53,52,54,53,58,54,53,54,53,58,54,53,58,53,53,54,54,53,68,68,54,52,58,53,54,58,54,53,58,54,53,58,54,53,58,54,58,58,0,0,63,62,63,62,62,63,62,63,62,63,62,63,62,62,62,63,63,62,63,62,63,62,63,62,63,62,63,62,63],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],0,[[2,3],4],[[[7,[5,6]]],8],[9],0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,10]],[[11,10]],[[9,2],12],[[11,2],12],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[9,9],[11,11],[3,3],[13,13],[9,9],[[]],[[]],[[]],[[]],[[]],[11,[[15,[14]]]],0,[9,[[16,[11]]]],0,[9,[[17,[11]]]],[[],1],[[],9],[[],11],0,[[1,1],4],[[9,9],4],[[11,11],4],[[3,3],4],[[],4],[[],4],[[1,18],19],[[9,18],19],[[11,18],19],[[3,18],19],[[13,18],19],[[]],[[]],[11,9],[[]],[[]],[[]],[9,4],[[]],[[]],[[]],[[]],[[]],[9,[[15,[11]]]],[[9,20],4],[[11,20],4],0,[[],1],[[],9],[[],11],[[9,2,3]],[[11,2,3]],[[],9],[21,9],[11,9],[21,9],0,[9],[11],[[2,3],4],[[13,2,3],4],[9],[11],0,0,[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],11],[21,11],[[9,21],9],[21,11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[25,[24]]]],[6,20],[[]],[[]],[6,6],[[]],[[],26],[[6,6],4],[[6,18],19],[[6,18],19],[[]],0,[[]],[6,4],[6,[[25,[20]]]],[6,20],[[]],[[],27],[[],22],[[],22],[[],23],[6,20],[[9,20,28,29],22],0,0,0,0,0,[[]],[[]],0,0,0,[[[31,[30]],[31,[30]]],4],[[[31,[[0,[32,30]]]],18],19],[[[31,[30]],18],19],[33,[[31,[30]]]],[[]],0,[[]],[[[31,[30]]]],0,[[],27],[[],22],[[],22],[[],23],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[],[[34,[30]]]],0,0,[[]],[[]],[[35,36,4],[[22,[[37,[33]]]]]],[[35,38]],[[35,39,29,40,[43,[[0,[41,42]]]],[34,[30]]]],[[]],[[]],[35,44],[[35,39,29],22],[[1,9],35],0,[[[34,[30]]],[[15,[[22,[45,[46,[30]]]]]]]],[[[34,[30]]],[[15,[[22,[[31,[30]]]]]]]],[[[34,[30]],47]],[[[34,[30]],[22,[[31,[30]]]]]],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],0,[[]],[[]],[44,44],[[]],[[],44],[44,[[25,[36]]]],0,[[44,18],19],[[]],[[[37,[36]]],44],[[36,15],[[15,[48]]]],[[44,49],44],[[]],[[]],[[],22],[[],22],[[],23],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[50,[[22,[51]]]],0,0,0,[50,4],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[[53,[52]]],44],[[]],[1,[[54,[52]]]],[[[55,[52]],56,1],[[54,[52]]]],[[[53,[52]]],15],[[[57,[50]]],[[22,[58]]]],[[20,[57,[50]]],58],0,[50,[[22,[[59,[20]]]]]],0,[[[53,[52]],[7,[5,6]]],8],[[[54,[52]],9]],0,[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[[54,[52]],9],[[53,[52]]]],[[[58,[52]],[60,[56]]],[[58,[52]]]],[[[58,[52]],[60,[61]]],[[58,[52]]]],0,0,[[]],[[]],[[]],[[]],0,[[]],[[]],0,0,0,0,[[]],[[]],[62,44],[[]],[1,63],[[20,56,1,61],63],[62,15],0,[[62,[7,[5,6]]],8],[[63,9]],0,[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[63,9],62]],"c":[],"p":[[3,"ParseOptions"],[6,"Identifier"],[4,"IdentifierContext"],[15,"bool"],[3,"LexerPosition"],[4,"Token"],[4,"ParseError"],[6,"ParseError"],[3,"ParseContext"],[6,"Comment"],[3,"ParseContextData"],[6,"TypeName"],[3,"GlslTypeTablePolicy"],[6,"CommentList"],[4,"Option"],[3,"Ref"],[3,"RefMut"],[3,"Formatter"],[6,"Result"],[15,"str"],[8,"TypeTablePolicy"],[4,"Result"],[3,"TypeId"],[3,"TokenDescriptor"],[15,"slice"],[3,"TokenDescription"],[3,"String"],[3,"NodeSpan"],[4,"Token"],[8,"Error"],[4,"LexicalError"],[8,"Debug"],[6,"Error"],[4,"HandleTokenResult"],[3,"LexerCore"],[3,"EventDirective"],[3,"Vec"],[3,"FileId"],[3,"OutputToken"],[4,"TokenState"],[8,"Iterator"],[8,"LocatedIterator"],[3,"Tokenizer"],[3,"Directives"],[4,"Event"],[3,"Located"],[8,"IntoIterator"],[6,"ExternalDeclaration"],[3,"TranslationUnit"],[3,"Path"],[3,"PathBuf"],[8,"FileSystem"],[3,"LexerIterator"],[3,"Lexer"],[3,"ExpandStack"],[3,"Registry"],[8,"AsRef"],[3,"File"],[4,"Cow"],[8,"Into"],[3,"ProcessorState"],[3,"LexerIterator"],[3,"Lexer"],[8,"HasLexerError"],[8,"LangLexer"],[8,"LangLexerIterator"],[13,"Token"],[8,"PreprocessorExt"]]},\
"glsl_lang_pp":{"doc":"","t":"OAOAAAAOAAHHDDLLLLLLMLLLLLLMALLLLLLLLLMRRRRGDLLLLLLLLLLLLLNNNNEININEDDNLKLLLLLLLLLLLLMLLLMLLLLLLLMLLLLLLKLLLLLMLLMLLMLALLLLLLLLLLLLLLMMLMMMMMMMMMMFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDNNNNNNNNNNNNNNNNNNNNNNGENNNMAMAADGCLLMLLLLLMLLLLLLLLLLLALLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNLLLLLLLLLLLLLLLNNNDGENNLLLLMLLLLLMLLLLLLLLLLLMLLLLLLLLLLNNNNNNNDNNNEGCNLLLLLLLLLLMLLLLLMLLLLLLLLLMMLMMMLLALLLLLLMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENLLLLLLLLLLLLLLLNENDDGGGNALLLLLLLMLLLLLAMLLLLLLLMLLLALLLLLLLMLLLLMMLLAALLMLLLLLLLLLDLLLLMLLLMLLMLLLLLNGENNNNLLLLLLLLLLLLLLLMMMMMDLLLLLLLLLLLLLLLLLLLGFFFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNLLLLLLLLLLLLLLLLLLLLLNNENDDLLLLLLLLLLLLLLLMLMLMLLLALLMMLLLLLMAAALLMLLLLLLLALMLLLLALMALLLLLLLLLLLLMLMMENNNEDNNNLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLMFLLLLLLLLLNNNNNNNNNNNNNNENNNNNNNNNNGNNNNEEDNNNNNNNNNNNNNNDNNNGENEDNNINNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMMLLLMMMAMMKLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNEDNLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMMMMMMMMMMNNNNNNNEDDENENNENNNNLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLAMLLLLLLLLMLMLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMNNNNEDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMNEDNLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLQDIDNEDNDGLLLLLLLLLLLLMKLLLLLLLLLLKLLMLMMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMMKLLLLLMMLMLLLLLLLLLLLLLLLLLLLNNNNDEDEDDIGNDEDEDNDEDENNNNDEEENNNNDDEEEDDENDNNNNNNNNDNNNENNNNNNNNNNNNNNNNNNNNEEDENNNNDNNRDEENLMLMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMLMLMMLLLLLMMLLLLMLLMMLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMMMMMMMMMMMMMMMMMDNELLLLLLMLLLLMLLLLLLFFLLLLLLLLCCAAAARRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRGDLLLLLLLLLLLLLNDENLLLLLLLLLLLLLLLLLLLMLLLLLLLMLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNNGDENLLLLLLLLLLLLLLLLLLLLLLLLLAAADLLLLLLLLLLMLLLLLLDLLLLLLLLLLLMLLLMLLLLNNDEDDNLMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLL","n":["ext_name","exts","keyword","last","lexer","parser","processor","type_name","types","util","DEFAULT_REGISTRY","EMPTY_REGISTRY","ExtensionSpec","Registry","all","borrow","borrow","borrow_mut","borrow_mut","default","extensions","from","from","get","into","into","name","name","names","new","new","try_from","try_from","try_into","try_into","type_id","type_id","type_names","type_names","ATOM_EXTNAMEATOM_","ATOM_EXTNAMEATOM__47_4C_5F_41_52_42_5F_73_68_61_64_69_6E_67_5F_6C_61_6E_67_75_61_67_65_5F_69_6E_63_6C_75_64_65","ATOM_EXTNAMEATOM__47_4C_5F_47_4F_4F_47_4C_45_5F_63_70_70_5F_73_74_79_6C_65_5F_6C_69_6E_65_5F_64_69_72_65_63_74_69_76_65","ATOM_EXTNAMEATOM__47_4C_5F_47_4F_4F_47_4C_45_5F_69_6E_63_6C_75_64_65_5F_64_69_72_65_63_74_69_76_65","ExtNameAtom","ExtNameAtomStaticSet","borrow","borrow_mut","cmp","empty_string_index","eq","equivalent","from","get","into","partial_cmp","try_from","try_into","type_id","Active","Directive","EnterFile","Error","Event","LocatedIterator","Masked","MaybeToken","Token","TokenState","Tokenizer","TypeTable","Warn","active","as_token","as_token","as_token_kind","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current_version","eq","eq","equivalent","extensions","fmt","fmt","from","from","from","from","handle_extension","inner","into","into","into","into","into_iter","is_type_name","location","location","new","new","new","next","pending_error","promote_type_name","promote_type_name","registry","resolve","set_extension_behavior","target_vulkan","to_owned","token","tokenize_single","tokenize_single","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_names","type_table","warn","canonical_path","directive","error","file_id","masked","masked","path","source_token","state","token_kind","token_from_syntax_kind","ADD_ASSIGN","AMPERSAND","AND_ASSIGN","AND_OP","ANGLE_STRING","ASTERISK","BACKSLASH","BANG","BAR","CARET","COLON","COMMA","COMMENT","DASH","DEC_OP","DEFINED","DIGITS","DIV_ASSIGN","EQUAL","EQ_OP","ERROR","GE_OP","HASH","IDENT_KW","INC_OP","LANGLE","LBRACE","LBRACKET","LEFT_ASSIGN","LEFT_OP","LE_OP","LINECONT","LPAREN","Lexer","MOD_ASSIGN","MUL_ASSIGN","NEWLINE","NE_OP","OR_ASSIGN","OR_OP","PERCENT","PERIOD","PLUS","PP_CONCAT","QUESTION","QUOTE_STRING","RANGLE","RBRACE","RBRACKET","RIGHT_ASSIGN","RIGHT_OP","RPAREN","SEMICOLON","SLASH","SUB_ASSIGN","TILDE","TextToken","Token","WS","XOR_ASSIGN","XOR_OP","buffer","glue","input","newline","pre","Lexer","TextToken","Token","borrow","borrow_mut","buffer","clone","clone_into","fmt","from","input","input","into","into_iter","into_line_map","line_map","maybe_concat","maybe_concat2","new","next","next","set_expect_angle_string","to_owned","token","try_from","try_into","type_id","ADD_ASSIGN","AMPERSAND","AND_ASSIGN","AND_OP","ANGLE_STRING","ASTERISK","BACKSLASH","BANG","BAR","CARET","COLON","COMMA","COMMENT","DASH","DEC_OP","DEFINED","DIGITS","DIV_ASSIGN","EQUAL","EQ_OP","ERROR","GE_OP","HASH","IDENT_KW","INC_OP","LANGLE","LBRACE","LBRACKET","LEFT_ASSIGN","LEFT_OP","LE_OP","LINECONT","LPAREN","MOD_ASSIGN","MUL_ASSIGN","NEWLINE","NE_OP","OR_ASSIGN","OR_OP","PERCENT","PERIOD","PLUS","PP_CONCAT","QUESTION","QUOTE_STRING","RANGLE","RBRACE","RBRACKET","RIGHT_ASSIGN","RIGHT_OP","RPAREN","SEMICOLON","SLASH","SUB_ASSIGN","TILDE","Token","WS","XOR_ASSIGN","XOR_OP","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","from","into","is_trivia","to_owned","try_from","try_into","type_id","DIGIT","LETTER","NEWLINE","NewlineSplitter","NewlineToken","NewlineTokenKind","PUNCT","WS","borrow","borrow","borrow_mut","borrow_mut","chars","clone","clone","clone_into","clone_into","current_pos","end","eq","equivalent","fmt","fmt","from","from","into","into","into_iter","into_line_map","line_map","line_map","new","next","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AngleString","Backslash","Digits","Ident","Init","MultiComment","MultiCommentStar","PreLexer","QuoteString","SingleComment","Slash","State","TextToken","Token","Whitespace","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","expect_angle_string","fmt","fmt","from","from","input","input","into","into","into_iter","into_line_map","line_map","new","next","next_token","peek_token","peeked","return_to","set_expect_angle_string","source","start","state","to_owned","to_owned","token","try_from","try_from","try_into","try_into","type_id","type_id","seen_e","AMPERSAND","ANGLE_STRING","ASTERISK","BACKSLASH","BANG","BAR","CARET","COLON","COMMA","COMMENT","DASH","DEFINED","DIGITS","EQUAL","ERROR","HASH","IDENT_KW","LANGLE","LBRACE","LBRACKET","LINECONT","LPAREN","NEWLINE","PERCENT","PERIOD","PLUS","QUESTION","QUOTE_STRING","RANGLE","RBRACE","RBRACKET","RPAREN","SEMICOLON","SLASH","TILDE","Token","WS","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","from_punct","into","is_trivia","to_owned","try_from","try_into","type_id","EndOfInput","ExpectAny","Found","Parser","ParserRun","SyntaxBitset","SyntaxNode","SyntaxToken","Unexpected","ast","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer_trivia","builder","bump","checkpoint","clone","clone_into","eat_trivia","error","errors","expect_any","expect_one","finish_node","fmt","from","from","from","input","into","into","into","lang","new","new","parse","parse_ast","parse_define_body","parse_one","peek","peeked","push_error","raw","skip","skip_trivia","source","source","start_node","start_node_at","syntax","syntax_kind","text","to_owned","trivia_buffer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Ast","borrow","borrow_mut","clone","clone_into","errors","fmt","from","green_node","green_node","into","into_inner","line_map","new","to_owned","try_from","try_into","type_id","EndOfInput","Error","ErrorKind","ExtraTokensInPreprocessorDirective","Unexpected","UnexpectedTokensInDefineArgs","UnknownPreprocessorDirective","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id","actual","expected","expected","name","name","PreprocessorLang","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","from","hash","into","kind_from_raw","kind_to_raw","partial_cmp","to_owned","try_from","try_into","type_id","InputToken","define_body","digits","file","ident","if_section_or_control_line","pp_concat","pp_define","pp_error","pp_extension","pp_if_expr","pp_if_ident","pp_include","pp_line","pp_pragma","pp_tokens","pp_version","ADD_ASSIGN","AMPERSAND","AND_ASSIGN","AND_OP","ANGLE_STRING","ASTERISK","BACKSLASH","BANG","BAR","CARET","COLON","COMMA","COMMENT","DASH","DEC_OP","DEFINED","DIGITS","DIV_ASSIGN","EQUAL","EQ_OP","ERROR","GE_OP","HASH","IDENT_KW","INC_OP","LANGLE","LBRACE","LBRACKET","LEFT_ASSIGN","LEFT_OP","LE_OP","LPAREN","MOD_ASSIGN","MUL_ASSIGN","NEWLINE","NE_OP","OR_ASSIGN","OR_OP","PERCENT","PERIOD","PLUS","PP_CONCAT","PP_CONCAT_OP","PP_DEFINE","PP_DEFINE_ARG","PP_DEFINE_ARGS","PP_DEFINE_BODY","PP_ELIF","PP_ELSE","PP_EMPTY","PP_ENDIF","PP_ERROR","PP_ERROR_BODY","PP_EXTENSION","PP_IDENT","PP_IF","PP_IFDEF","PP_IFNDEF","PP_IF_EXPR","PP_INCLUDE","PP_INCLUDE_PATH","PP_LINE","PP_LINE_BODY","PP_PRAGMA","PP_PRAGMA_BODY","PP_UNDEF","PP_VERSION","PP_VERSION_NUMBER","PP_VERSION_PROFILE","QUESTION","QUOTE_STRING","RANGLE","RBRACE","RBRACKET","RIGHT_ASSIGN","RIGHT_OP","ROOT","RPAREN","SEMICOLON","SLASH","SUB_ASSIGN","SyntaxKind","TILDE","WS","XOR_ASSIGN","XOR_OP","_LAST","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","from","from","hash","into","is_newline","is_trivia","is_whitespace","partial_cmp","paste","to_owned","try_from","try_into","type_id","ArbInclude","GoogleInclude","IncludeMode","None","ProcessorState","ProcessorStateBuilder","add_extension","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone_into","clone_into","clone_into","compatibility_profile","compatibility_profile","core_profile","core_profile","cpp_style_line","cpp_style_line","default","default","default","definition","definition","definition","definitions","definitions","eq","eq","equivalent","equivalent","es_profile","es_profile","event","expand","expr","extension","extension","extensions","finish","fmt","fmt","from","from","from","from","fs","get_definition","include_mode","into","into","into","new","nodes","registry","registry","str","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","warn","warn","warn","Definition","File","Function","Line","MacroCall","MacroInvocation","Object","Regular","Version","arg_count","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","concat_node_to_tokens","definition","eq","equivalent","file_id","fmt","from","from","from","into","into","into","name","object_like","parse_nested","parse_raw","protected","range","subs_tokens","substitute","substitute_define_function","substitute_define_object","substitute_function","substitute_inner","substitute_object","substitute_string","substitute_vec","substitute_vec_inner","to_owned","tokens","trim_ws","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","CppStyleLineNotSupported","Define","Directive","Directive","DirectiveDefine","DirectiveElif","DirectiveElse","DirectiveEndIf","DirectiveError","DirectiveExtension","DirectiveIf","DirectiveIfDef","DirectiveIfNDef","DirectiveInclude","DirectiveKind","DirectiveLine","DirectivePragma","DirectiveUndef","DirectiveVersion","Elif","Else","Empty","EndIf","EnterFile","EnterFile","Error","Error","Error","Error","ErrorDirective","ErrorKind","Event","EventDirective","Extension","ExtraElif","ExtraElse","ExtraEndIf","If","IfDef","IfNDef","Include","IncludeNotFound","IncludeNotSupported","Invalid","InvalidTokenPaste","Line","MismatchedArguments","OutputToken","Parse","Pragma","Processing","ProcessingError","ProcessingErrorKind","ProtectedDefine","SendEvent","SendNode","Token","Token","TokenLike","Undef","UnexpectedDirective","UnsupportedExt","UnterminatedMacroInvocation","Version","WarnExtUse","as_token","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","directive","directive_error","directive_errors","enter_file","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","errors","errors","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_token","into","into","into","into","into","into","into_errors","into_token","is_token","kind","kind","kind","kind","kind","kind","map_error","new","new_error","node","range","root","send","source_id","source_range","text","text","text","text","text_range","text_range","text_range","text_range","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","token","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unsupported_ext","warn_ext_use","extension","extension","name","pos","pos","raw_line","raw_line","canonical_path","directive","error","file_id","masked","masked","masked","path","token","actual","expected","ident","ident","ident","ident","is_undef","message","node","path","token","canonical_path","error","errors","file_id","masked","masked","masked","node","path","token","Directive","EnterFile","Error","SendEvent","SendNode","Token","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","into","into","range","root","text","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","canonical_path","error","errors","file_id","masked","masked","masked","node","path","token","Complete","Completed","EnterFile","EnterFile","EnterNewFile","Event","Event","ExpandEvent","ExpandLocation","ExpandOne","ExpandState","ExpandedTokens","HandleNodeResult","Init","Iterate","LocationString","Number","PendingEvents","PendingOne","String","add_override","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current_file","current_file","current_file","eq","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","handle_node","handle_node_or_token","handle_token","if_stack","if_stack","into","into","into","into","into","into","into_iter","is_number","line_map","line_override","line_override","line_to_line_number","location","location","new","new","next","offset_to_line_and_col","offset_to_raw_line_and_col","resolve","set_state","state","state","string","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ast","current_state","current_state","current_state","current_state","current_state","current_state","errors","errors","errors","errors","errors","events","events","iterator","iterator","iterator","iterator","iterator","node","node_or_token","path","Active","ExtraElif","ExtraElse","ExtraEndIf","IfError","IfStack","IfState","None","One","activate","active","active","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deactivate","else_seen","eq","equivalent","fmt","fmt","from","from","from","if_group_active","into","into","into","new","on_elif","on_else","on_endif","on_if_like","stack","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_else_seen","else_seen","else_seen","Constant","EvalResult","ExprEvaluator","Token","additive","and","binary_op","borrow","borrow","borrow_mut","borrow_mut","bump","clone","clone","clone_into","clone_into","eq","equality","equivalent","expr","fmt","fmt","from","from","input","into","into","into_iter","logical_and","logical_or","multiplicative","new","next","next_result","or","peek","peek_kind","primary","relational","shift","state","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unary","xor","Error","ExpandStack","FileSystem","ParsedFile","Path","PathOrSource","Processor","Source","Std","StdProcessor","as_path","ast","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonical_paths","canonicalize","canonicalize","clone","clone","clone_into","clone_into","cmp","default","default","eq","equivalent","exists","exists","expand_one","file_cache","file_id","file_id","file_ids","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","fs","get_paths","hash","into","into","into","into","into","into_iter","into_iter","into_state","location","new","new_with_fs","next","parse","parse_source","partial_cmp","process","processor","processor","read","read","resolve","resolve","resolve_relative_to_id","resolve_relative_to_path","stack","state","system_paths","system_paths","system_paths_mut","to_owned","to_owned","tokenize","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","All","Compatibility","Core","Debug","Define","DefineError","DefineFunction","DefineKind","DefineObject","Directive","DirectiveExt","DirectiveResult","Disable","Elif","ElifError","Else","ElseError","Empty","Enable","EndIf","EndIfError","Error","ErrorError","Es","EsProfileRequired","Eval","Eval","Extension","ExtensionBehavior","ExtensionError","ExtensionName","ExtraTokens","ExtraTokens","ExtraTokens","Function","If","IfDef","IfDefError","IfError","IfEvalError","IfNDef","Include","IncludeError","IncorrectSyntax","Invalid","InvalidAllBehavior","InvalidExpr","InvalidExtensionBehavior","InvalidLineNumber","InvalidPath","InvalidPathLiteral","InvalidVersionNumber","InvalidVersionProfile","Line","Line","LineAndFileNumber","LineAndPath","LineError","MalformedExpr","MalformedLine","MalformedPath","MissingBody","MissingBody","MissingBody","MissingBody","MissingBody","MissingBody","MissingExpr","MissingExtensionBehavior","MissingExtensionName","MissingIdentifier","MissingLineNumber","MissingName","MissingPath","MissingVersionNumber","None","Object","Optimize","ParsedLine","ParsedPragma","Pragma","PragmaError","ProfileUnsupported","Require","Specific","StdGl","Undef","Unknown","UnsupportedVersionNumber","VALID_VERSION_NUMBERS","Version","VersionError","VersionProfile","Warn","arg_names","args","as_feature_set_size_index","behavior","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","deref","disable","enable","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval","eval_if","eval_inner","file_id","file_id","file_id","file_id","file_id","file_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","function","ident","ident","ident","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_node","into_node","is_active","kind","kind","line_number","message","name","name","name","new","new","new","new","node","node","number","object","one","parse","parse_function_pragma","parsed_profile","partial_cmp","path","path","profile","protected","protected","raw","raw","require","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","warn","name","behavior","name","name","token","tokens","tokens","token","tokens","tokens","token","token","tokens","tokens","name","version_number","version_number","version_number","version_number","ExpandStr","IncludeRequested","ProcessStrError","borrow","borrow","borrow_mut","borrow_mut","eq","equivalent","final_state","fmt","fmt","from","from","inner","into","into","into_iter","into_state","location","next","parse","process","to_string","tokenize","try_from","try_from","try_into","try_into","type_id","type_id","Token","TypeName","keywords","path","token","type_names","ATOM_KEYWORDATOM_","ATOM_KEYWORDATOM__61_63_74_69_76_65","ATOM_KEYWORDATOM__61_73_6D","ATOM_KEYWORDATOM__61_74_74_72_69_62_75_74_65","ATOM_KEYWORDATOM__62_72_65_61_6B","ATOM_KEYWORDATOM__62_75_66_66_65_72","ATOM_KEYWORDATOM__63_61_73_65","ATOM_KEYWORDATOM__63_61_73_74","ATOM_KEYWORDATOM__63_65_6E_74_72_6F_69_64","ATOM_KEYWORDATOM__63_6C_61_73_73","ATOM_KEYWORDATOM__63_6F_68_65_72_65_6E_74","ATOM_KEYWORDATOM__63_6F_6D_6D_6F_6E","ATOM_KEYWORDATOM__63_6F_6E_73_74","ATOM_KEYWORDATOM__63_6F_6E_74_69_6E_75_65","ATOM_KEYWORDATOM__64_65_66_61_75_6C_74","ATOM_KEYWORDATOM__64_69_73_63_61_72_64","ATOM_KEYWORDATOM__64_6F","ATOM_KEYWORDATOM__65_6C_73_65","ATOM_KEYWORDATOM__65_6E_75_6D","ATOM_KEYWORDATOM__65_78_74_65_72_6E","ATOM_KEYWORDATOM__65_78_74_65_72_6E_61_6C","ATOM_KEYWORDATOM__66_61_6C_73_65","ATOM_KEYWORDATOM__66_69_6C_74_65_72","ATOM_KEYWORDATOM__66_69_78_65_64","ATOM_KEYWORDATOM__66_6C_61_74","ATOM_KEYWORDATOM__66_6F_72","ATOM_KEYWORDATOM__67_6F_74_6F","ATOM_KEYWORDATOM__68_61_6C_66","ATOM_KEYWORDATOM__68_69_67_68_70","ATOM_KEYWORDATOM__69_66","ATOM_KEYWORDATOM__69_6E","ATOM_KEYWORDATOM__69_6E_6C_69_6E_65","ATOM_KEYWORDATOM__69_6E_6F_75_74","ATOM_KEYWORDATOM__69_6E_70_75_74","ATOM_KEYWORDATOM__69_6E_74_65_72_66_61_63_65","ATOM_KEYWORDATOM__69_6E_76_61_72_69_61_6E_74","ATOM_KEYWORDATOM__6C_61_79_6F_75_74","ATOM_KEYWORDATOM__6C_6F_6E_67","ATOM_KEYWORDATOM__6C_6F_77_70","ATOM_KEYWORDATOM__6D_65_64_69_75_6D_70","ATOM_KEYWORDATOM__6E_61_6D_65_73_70_61_63_65","ATOM_KEYWORDATOM__6E_6F_69_6E_6C_69_6E_65","ATOM_KEYWORDATOM__6E_6F_70_65_72_73_70_65_63_74_69_76_65","ATOM_KEYWORDATOM__6F_75_74","ATOM_KEYWORDATOM__6F_75_74_70_75_74","ATOM_KEYWORDATOM__70_61_72_74_69_74_69_6F_6E","ATOM_KEYWORDATOM__70_61_74_63_68","ATOM_KEYWORDATOM__70_72_65_63_69_73_65","ATOM_KEYWORDATOM__70_72_65_63_69_73_69_6F_6E","ATOM_KEYWORDATOM__70_75_62_6C_69_63","ATOM_KEYWORDATOM__72_65_61_64_6F_6E_6C_79","ATOM_KEYWORDATOM__72_65_73_6F_75_72_63_65","ATOM_KEYWORDATOM__72_65_73_74_72_69_63_74","ATOM_KEYWORDATOM__72_65_74_75_72_6E","ATOM_KEYWORDATOM__73_61_6D_70_6C_65","ATOM_KEYWORDATOM__73_68_61_72_65_64","ATOM_KEYWORDATOM__73_68_6F_72_74","ATOM_KEYWORDATOM__73_69_7A_65_6F_66","ATOM_KEYWORDATOM__73_6D_6F_6F_74_68","ATOM_KEYWORDATOM__73_74_61_74_69_63","ATOM_KEYWORDATOM__73_74_72_75_63_74","ATOM_KEYWORDATOM__73_75_62_72_6F_75_74_69_6E_65","ATOM_KEYWORDATOM__73_75_70_65_72_70","ATOM_KEYWORDATOM__73_77_69_74_63_68","ATOM_KEYWORDATOM__74_65_6D_70_6C_61_74_65","ATOM_KEYWORDATOM__74_68_69_73","ATOM_KEYWORDATOM__74_72_75_65","ATOM_KEYWORDATOM__74_79_70_65_64_65_66","ATOM_KEYWORDATOM__75_6E_69_66_6F_72_6D","ATOM_KEYWORDATOM__75_6E_69_6F_6E","ATOM_KEYWORDATOM__75_6E_73_69_67_6E_65_64","ATOM_KEYWORDATOM__75_73_69_6E_67","ATOM_KEYWORDATOM__76_61_72_79_69_6E_67","ATOM_KEYWORDATOM__76_6F_6C_61_74_69_6C_65","ATOM_KEYWORDATOM__77_68_69_6C_65","ATOM_KEYWORDATOM__77_72_69_74_65_6F_6E_6C_79","KeywordAtom","KeywordAtomStaticSet","borrow","borrow_mut","cmp","empty_string_index","eq","equivalent","from","get","into","partial_cmp","try_from","try_into","type_id","Angle","ParsedPath","PathType","Quote","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","into","into","path","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","ACTIVE","ADD_ASSIGN","AMPERSAND","AND_ASSIGN","AND_OP","ASM","ASTERISK","ATOMIC_UINT","ATTRIBUTE","BANG","BAR","BOOL","BOOL_CONST","BREAK","BUFFER","BVEC2","BVEC3","BVEC4","CARET","CASE","CAST","CENTROID","CLASS","COHERENT","COLON","COMMA","COMMENT","COMMON","CONST","CONTINUE","DASH","DEC_OP","DEFAULT","DISCARD","DIV_ASSIGN","DMAT2","DMAT2X2","DMAT2X3","DMAT2X4","DMAT3","DMAT3X2","DMAT3X3","DMAT3X4","DMAT4","DMAT4X2","DMAT4X3","DMAT4X4","DO","DOUBLE","DOUBLE_CONST","DVEC2","DVEC3","DVEC4","ELSE","ENUM","EQUAL","EQ_OP","ERROR","EXTERN","EXTERNAL","ErrorKind","FILTER","FIXED","FLAT","FLOAT","FLOAT_CONST","FOR","GE_OP","GOTO","HALF","HASH","HIGHP","IDENT","IF","IIMAGE1D","IIMAGE1DARRAY","IIMAGE2D","IIMAGE2DARRAY","IIMAGE2DMS","IIMAGE2DMSARRAY","IIMAGE2DRECT","IIMAGE3D","IIMAGEBUFFER","IIMAGECUBE","IIMAGECUBEARRAY","IMAGE1D","IMAGE1DARRAY","IMAGE2D","IMAGE2DARRAY","IMAGE2DMS","IMAGE2DMSARRAY","IMAGE2DRECT","IMAGE3D","IMAGEBUFFER","IMAGECUBE","IMAGECUBEARRAY","IN","INC_OP","INLINE","INOUT","INPUT","INT","INTERFACE","INT_CONST","INVARIANT","ISAMPLER1D","ISAMPLER1DARRAY","ISAMPLER2D","ISAMPLER2DARRAY","ISAMPLER2DMS","ISAMPLER2DMSARRAY","ISAMPLER2DRECT","ISAMPLER3D","ISAMPLERBUFFER","ISAMPLERCUBE","ISAMPLERCUBEARRAY","ISUBPASSINPUT","ISUBPASSINPUTMS","ITEXTURE1D","ITEXTURE1DARRAY","ITEXTURE2D","ITEXTURE2DARRAY","ITEXTURE2DMS","ITEXTURE2DMSARRAY","ITEXTURE2DRECT","ITEXTURE3D","ITEXTUREBUFFER","ITEXTURECUBE","ITEXTURECUBEARRAY","IVEC2","IVEC3","IVEC4","InvalidDoubleLiteral","InvalidFloatLiteral","InvalidIntLiteral","InvalidToken","InvalidUIntLiteral","LANGLE","LAYOUT","LBRACE","LBRACKET","LEFT_ASSIGN","LEFT_OP","LE_OP","LONG","LOWP","LPAREN","MAT2","MAT2X2","MAT2X3","MAT2X4","MAT3","MAT3X2","MAT3X3","MAT3X4","MAT4","MAT4X2","MAT4X3","MAT4X4","MEDIUMP","MOD_ASSIGN","MUL_ASSIGN","NAMESPACE","NE_OP","NOINLINE","NOPERSPECTIVE","OR_ASSIGN","OR_OP","OTHER","OUT","OUTPUT","PARTITION","PATCH","PERCENT","PERIOD","PLUS","PRECISE","PRECISION","PUBLIC","QUESTION","RANGLE","RBRACE","RBRACKET","READONLY","RESERVED","RESOURCE","RESTRICT","RETURN","RIGHT_ASSIGN","RIGHT_OP","RPAREN","SAMPLE","SAMPLER","SAMPLER1D","SAMPLER1DARRAY","SAMPLER1DARRAYSHADOW","SAMPLER1DSHADOW","SAMPLER2D","SAMPLER2DARRAY","SAMPLER2DARRAYSHADOW","SAMPLER2DMS","SAMPLER2DMSARRAY","SAMPLER2DRECT","SAMPLER2DRECTSHADOW","SAMPLER2DSHADOW","SAMPLER3D","SAMPLERBUFFER","SAMPLERCUBE","SAMPLERCUBEARRAY","SAMPLERCUBEARRAYSHADOW","SAMPLERCUBESHADOW","SAMPLERSHADOW","SEMICOLON","SHARED","SHORT","SIZEOF","SLASH","SMOOTH","STATIC","STRUCT","SUBPASSINPUT","SUBPASSINPUTMS","SUBROUTINE","SUB_ASSIGN","SUPERP","SWITCH","TEMPLATE","TEXTURE1D","TEXTURE1DARRAY","TEXTURE2D","TEXTURE2DARRAY","TEXTURE2DMS","TEXTURE2DMSARRAY","TEXTURE2DRECT","TEXTURE3D","TEXTUREBUFFER","TEXTURECUBE","TEXTURECUBEARRAY","THIS","TILDE","TYPEDEF","TYPE_NAME","Token","TypeName","UIMAGE1D","UIMAGE1DARRAY","UIMAGE2D","UIMAGE2DARRAY","UIMAGE2DMS","UIMAGE2DMSARRAY","UIMAGE2DRECT","UIMAGE3D","UIMAGEBUFFER","UIMAGECUBE","UIMAGECUBEARRAY","UINT","UINT_CONST","UNIFORM","UNION","UNSIGNED","USAMPLER1D","USAMPLER1DARRAY","USAMPLER2D","USAMPLER2DARRAY","USAMPLER2DMS","USAMPLER2DMSARRAY","USAMPLER2DRECT","USAMPLER3D","USAMPLERBUFFER","USAMPLERCUBE","USAMPLERCUBEARRAY","USING","USUBPASSINPUT","USUBPASSINPUTMS","UTEXTURE1D","UTEXTURE1DARRAY","UTEXTURE2D","UTEXTURE2DARRAY","UTEXTURE2DMS","UTEXTURE2DMSARRAY","UTEXTURE2DRECT","UTEXTURE3D","UTEXTUREBUFFER","UTEXTURECUBE","UTEXTURECUBEARRAY","UVEC2","UVEC3","UVEC4","VARYING","VEC2","VEC3","VEC4","VOID","VOLATILE","WHILE","WRITEONLY","WS","XOR_ASSIGN","XOR_OP","__TOKEN_TOKENS","all_tokens","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","description","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_token","gate","hash","hash","into","into","into","kinds","parse","parse_digits","parse_int","parse_kw","parser_token","partial_cmp","partial_cmp","partial_cmp","strip_suffix","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","variant_name","ATOM_TYPENAMEATOM_","ATOM_TYPENAMEATOM__61_74_6F_6D_69_63_5F_75_69_6E_74","ATOM_TYPENAMEATOM__62_6F_6F_6C","ATOM_TYPENAMEATOM__62_76_65_63_32","ATOM_TYPENAMEATOM__62_76_65_63_33","ATOM_TYPENAMEATOM__62_76_65_63_34","ATOM_TYPENAMEATOM__64_6D_61_74_32","ATOM_TYPENAMEATOM__64_6D_61_74_32_78_32","ATOM_TYPENAMEATOM__64_6D_61_74_32_78_33","ATOM_TYPENAMEATOM__64_6D_61_74_32_78_34","ATOM_TYPENAMEATOM__64_6D_61_74_33","ATOM_TYPENAMEATOM__64_6D_61_74_33_78_32","ATOM_TYPENAMEATOM__64_6D_61_74_33_78_33","ATOM_TYPENAMEATOM__64_6D_61_74_33_78_34","ATOM_TYPENAMEATOM__64_6D_61_74_34","ATOM_TYPENAMEATOM__64_6D_61_74_34_78_32","ATOM_TYPENAMEATOM__64_6D_61_74_34_78_33","ATOM_TYPENAMEATOM__64_6D_61_74_34_78_34","ATOM_TYPENAMEATOM__64_6F_75_62_6C_65","ATOM_TYPENAMEATOM__64_76_65_63_32","ATOM_TYPENAMEATOM__64_76_65_63_33","ATOM_TYPENAMEATOM__64_76_65_63_34","ATOM_TYPENAMEATOM__66_6C_6F_61_74","ATOM_TYPENAMEATOM__66_76_65_63_32","ATOM_TYPENAMEATOM__66_76_65_63_33","ATOM_TYPENAMEATOM__66_76_65_63_34","ATOM_TYPENAMEATOM__68_76_65_63_32","ATOM_TYPENAMEATOM__68_76_65_63_33","ATOM_TYPENAMEATOM__68_76_65_63_34","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_31_44","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_32_44","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_32_44_4D_53","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_33_44","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_43_75_62_65","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__69_6D_61_67_65_31_44","ATOM_TYPENAMEATOM__69_6D_61_67_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_6D_61_67_65_32_44","ATOM_TYPENAMEATOM__69_6D_61_67_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_6D_61_67_65_32_44_4D_53","ATOM_TYPENAMEATOM__69_6D_61_67_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__69_6D_61_67_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__69_6D_61_67_65_33_44","ATOM_TYPENAMEATOM__69_6D_61_67_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__69_6D_61_67_65_43_75_62_65","ATOM_TYPENAMEATOM__69_6D_61_67_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__69_6E_74","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_31_44","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_32_44","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_32_44_4D_53","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_32_44_52_65_63_74","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_33_44","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_42_75_66_66_65_72","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_43_75_62_65","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__69_73_75_62_70_61_73_73_49_6E_70_75_74","ATOM_TYPENAMEATOM__69_73_75_62_70_61_73_73_49_6E_70_75_74_4D_53","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_31_44","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_32_44","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_32_44_4D_53","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_33_44","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_43_75_62_65","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__69_76_65_63_32","ATOM_TYPENAMEATOM__69_76_65_63_33","ATOM_TYPENAMEATOM__69_76_65_63_34","ATOM_TYPENAMEATOM__6D_61_74_32","ATOM_TYPENAMEATOM__6D_61_74_32_78_32","ATOM_TYPENAMEATOM__6D_61_74_32_78_33","ATOM_TYPENAMEATOM__6D_61_74_32_78_34","ATOM_TYPENAMEATOM__6D_61_74_33","ATOM_TYPENAMEATOM__6D_61_74_33_78_32","ATOM_TYPENAMEATOM__6D_61_74_33_78_33","ATOM_TYPENAMEATOM__6D_61_74_33_78_34","ATOM_TYPENAMEATOM__6D_61_74_34","ATOM_TYPENAMEATOM__6D_61_74_34_78_32","ATOM_TYPENAMEATOM__6D_61_74_34_78_33","ATOM_TYPENAMEATOM__6D_61_74_34_78_34","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_31_44","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_31_44_41_72_72_61_79_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_31_44_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_41_72_72_61_79_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_4D_53","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_52_65_63_74","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_52_65_63_74_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_33_44","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_33_44_52_65_63_74","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_42_75_66_66_65_72","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_43_75_62_65","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_43_75_62_65_41_72_72_61_79_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_43_75_62_65_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_75_62_70_61_73_73_49_6E_70_75_74","ATOM_TYPENAMEATOM__73_75_62_70_61_73_73_49_6E_70_75_74_4D_53","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_31_44","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_32_44","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_32_44_4D_53","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_33_44","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_43_75_62_65","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_31_44","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_32_44","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_32_44_4D_53","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_33_44","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_43_75_62_65","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__75_69_6E_74","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_31_44","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_32_44","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_32_44_4D_53","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_32_44_52_65_63_74","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_33_44","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_42_75_66_66_65_72","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_43_75_62_65","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__75_73_75_62_70_61_73_73_49_6E_70_75_74","ATOM_TYPENAMEATOM__75_73_75_62_70_61_73_73_49_6E_70_75_74_4D_53","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_31_44","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_32_44","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_32_44_4D_53","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_33_44","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_43_75_62_65","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__75_76_65_63_32","ATOM_TYPENAMEATOM__75_76_65_63_33","ATOM_TYPENAMEATOM__75_76_65_63_34","ATOM_TYPENAMEATOM__76_65_63_32","ATOM_TYPENAMEATOM__76_65_63_33","ATOM_TYPENAMEATOM__76_65_63_34","ATOM_TYPENAMEATOM__76_6F_69_64","Ident","Type","TypeNameAtom","TypeNameAtomStaticSet","TypeNameState","WarnType","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","empty_string_index","eq","equivalent","fmt","from","from","get","into","into","is_type_name","partial_cmp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","line_map","text_token","unescaped","LineMap","add_line","borrow","borrow_mut","clone","clone_into","default","fmt","from","get_line_and_col","into","map","new","resolve","to_owned","try_from","try_into","type_id","TextToken","borrow","borrow_mut","clone","clone_into","deref","deref_mut","fmt","from","into","map","new","range","raw","text","to_owned","token","transmute","try_from","try_into","type_id","JustUnescaped","Raw","TokenText","TokenTextRepr","UnescapeIter","Unescaped","Unescaped","backslashes","backslashes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chars","chars","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into_iter","into_unescaped","new","next","push_str","raw","src","to_owned","to_owned","to_owned","to_owned","to_owned_string","to_string","to_string","to_string","to_string","try_as_str","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unescaped"],"q":[[0,"glsl_lang_pp"],[10,"glsl_lang_pp::exts"],[39,"glsl_lang_pp::exts::names"],[58,"glsl_lang_pp::last"],[136,"glsl_lang_pp::last::Event"],[146,"glsl_lang_pp::last::token"],[147,"glsl_lang_pp::lexer"],[213,"glsl_lang_pp::lexer::glue"],[240,"glsl_lang_pp::lexer::glue::token"],[314,"glsl_lang_pp::lexer::newline"],[355,"glsl_lang_pp::lexer::pre"],[411,"glsl_lang_pp::lexer::pre::State"],[412,"glsl_lang_pp::lexer::pre::token"],[464,"glsl_lang_pp::parser"],[531,"glsl_lang_pp::parser::ast"],[549,"glsl_lang_pp::parser::error"],[571,"glsl_lang_pp::parser::error::ErrorKind"],[576,"glsl_lang_pp::parser::lang"],[596,"glsl_lang_pp::parser::syntax"],[613,"glsl_lang_pp::parser::syntax_kind"],[721,"glsl_lang_pp::processor"],[799,"glsl_lang_pp::processor::IncludeMode"],[801,"glsl_lang_pp::processor::definition"],[859,"glsl_lang_pp::processor::event"],[1090,"glsl_lang_pp::processor::event::ErrorKind"],[1097,"glsl_lang_pp::processor::event::Event"],[1106,"glsl_lang_pp::processor::event::ProcessingErrorKind"],[1117,"glsl_lang_pp::processor::event::SendEvent"],[1127,"glsl_lang_pp::processor::event::send"],[1164,"glsl_lang_pp::processor::event::send::SendEvent"],[1174,"glsl_lang_pp::processor::expand"],[1274,"glsl_lang_pp::processor::expand::ExpandState"],[1296,"glsl_lang_pp::processor::expand::if_stack"],[1347,"glsl_lang_pp::processor::expand::if_stack::IfState"],[1349,"glsl_lang_pp::processor::expr"],[1400,"glsl_lang_pp::processor::fs"],[1502,"glsl_lang_pp::processor::nodes"],[2207,"glsl_lang_pp::processor::nodes::DefineError"],[2208,"glsl_lang_pp::processor::nodes::ExtensionError"],[2211,"glsl_lang_pp::processor::nodes::IfEvalError"],[2214,"glsl_lang_pp::processor::nodes::IncludeError"],[2217,"glsl_lang_pp::processor::nodes::LineError"],[2221,"glsl_lang_pp::processor::nodes::PragmaError"],[2222,"glsl_lang_pp::processor::nodes::VersionError"],[2226,"glsl_lang_pp::processor::str"],[2257,"glsl_lang_pp::types"],[2263,"glsl_lang_pp::types::keywords"],[2354,"glsl_lang_pp::types::path"],[2388,"glsl_lang_pp::types::token"],[2751,"glsl_lang_pp::types::type_names"],[2950,"glsl_lang_pp::util"],[2953,"glsl_lang_pp::util::line_map"],[2971,"glsl_lang_pp::util::text_token"],[2992,"glsl_lang_pp::util::unescaped"]],"d":["","","","Last preprocessing stage definitions","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","+=","&amp;","&amp;=","&amp;&amp;","","","\\\\\","!","|","^",":",",","Comment (single-line or multi-line)","","–","defined preprocessor keyword","Digit sequence","/=","=","==","Invalid token","=","","Identifier or keyword","++","&lt;","{","[","&lt;&lt;=","&lt;&lt;","&lt;=","Line continuation (required for tracking exact offsets)","(","Final stage lexer.","%=","*=","Newline","!=","|=","||","%",".","","","?","“string”","","}","]","=","",")",";","/","-=","~","","","Whitespace","^=","^^","Unglued token buffer. Since we’re pasting at most 3 …","Last stage lexer declaration","","First stage lexer declaration","Second stage lexer declaration","Final stage lexer.","","","","","Unglued token buffer. Since we’re pasting at most 3 …","","","","Returns the argument unchanged.","Get a reference to the input slice","","Calls <code>U::from(self)</code>.","","Consume this lexer and return the line map","Get a reference to the line map","","","","","","Notify the lexer we are parsing an #include directive, and …","","","","","","+=","&amp;","&amp;=","&amp;&amp;","","","\\\\\","!","|","^",":",",","Comment (single-line or multi-line)","","–","defined preprocessor keyword","Digit sequence","/=","=","==","Invalid token","=","","Identifier or keyword","++","&lt;","{","[","&lt;&lt;=","&lt;&lt;","&lt;=","Line continuation (required for tracking exact offsets)","(","%=","*=","Newline","!=","|=","||","%",".","","","?","“string”","","}","]","=","",")",";","/","-=","~","","Whitespace","^=","^^","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Basic lexer to split input lines according to the GLSL spec","First stage token with location","Type of token for line splitting","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Insite an angle string","Line continuation character seen","Building a digit sequence","Building an identifier","Initial state of the preprocessor","Multi-line comment","Multi-line comment, saw a *","A lexer for early lexical analysis stages.","Inside a quote string","Single-line comment","Possibly a start of comment","","","","Any kind of horizontal whitespace","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","&amp;","","","\\\\\","!","|","^",":",",","Comment (single-line or multi-line)","","defined preprocessor keyword","Digit sequence","=","Invalid token","","Identifier or keyword","&lt;","{","[","Line continuation (required for tracking exact offsets)","(","Newline","%",".","","?","“string”","","}","]",")",";","/","~","","Whitespace","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Parse a control line","","","","","","","","","","","","+=","&amp;","&amp;=","&amp;&amp;","","","\\\\\","!","|","^",":",",","Comment (single-line or multi-line)","","–","defined preprocessor keyword","Digit sequence","/=","=","==","Invalid token","=","","Identifier or keyword","++","&lt;","{","[","&lt;&lt;=","&lt;&lt;","&lt;=","(","%=","*=","Newline","!=","|=","||","%",".","","Concatenation expression","","#define","","","","#elif","#else","","#endif","#error","#error body","#extension","","#if","#ifdef","#ifndef","","#include","#include path","#line","#line body","#pragma","#pragma body","#undef","#version","","","?","“string”","","}","]","=","","AST root",")",";","/","-=","","~","Whitespace","^=","^^","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","GL_ARB_shading_language_include runtime includes","GL_GOOGLE_include_directive compile-time includes","Operating mode for #include directives","No #include directives are allowed","Current state of the preprocessor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current #if group of this level is included","","","","","","","No #if group of this level was included","One past #if group of this level was included, but not the …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Preprocessor based on a filesystem","","","","","","","","","","","","","","","","Mapping from #include/input paths to canonical paths","","","","","","","","","","","","","","","Cache of parsed files (preprocessor token sequences)","","","Mapping from canonical paths to FileIds","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Filesystem abstraction","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Parse a given source block as if it belonged in a specific …","","","","","","","","","","","","","","List of include paths in resolution order","","","","","","","","","","","","","","","","","","","","All extensions","","","","A preprocessor definition","","","","","","","","","","","","","","","","","","","","","","","","Extension behavior","","Extension name","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specific extension","","","","","","","","","","","","Returns an integer representing the relative size of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Type of this definition","","","","","Name of this definition","","","","","","","","","","","","","","","","","","true if this definition can’t be #undef-inedeturns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","“active”","+=","&amp;","&amp;=","&amp;&amp;","“asm”","","“atomic_uint”","“attribute”","!","|","“bool”","Bool constant","“break”","“buffer”","“bvec2”","“bvec3”","“bvec4”","^","“case”","“cast”","“centroid”","“class”","“coherent”",":",",","Comment (single-line or multi-line)","“common”","“const”","“continue”","","–","“default”","“discard”","/=","“dmat2”","“dmat2x2”","“dmat2x3”","“dmat2x4”","“dmat3”","“dmat3x2”","“dmat3x3”","“dmat3x4”","“dmat4”","“dmat4x2”","“dmat4x3”","“dmat4x4”","“do”","“double”","Double constant","“dvec2”","“dvec3”","“dvec4”","“else”","“enum”","=","==","Marker for invalid tokens","“extern”","“external”","","“filter”","“fixed”","“flat”","“float”","Float constant","“for”","=","“goto”","“half”","","“highp”","Identifier","“if”","“iimage1D”","“iimage1DArray”","“iimage2D”","“iimage2DArray”","“iimage2DMS”","“iimage2DMSArray”","“iimage2DRect”","“iimage3D”","“iimageBuffer”","“iimageCube”","“iimageCubeArray”","“image1D”","“image1DArray”","“image2D”","“image2DArray”","“image2DMS”","“image2DMSArray”","“image2DRect”","“image3D”","“imageBuffer”","“imageCube”","“imageCubeArray”","“in”","++","“inline”","“inout”","“input”","“int”","“interface”","Int constant","“invariant”","“isampler1D”","“isampler1DArray”","“isampler2D”","“isampler2DArray”","“isampler2DMS”","“isampler2DMSArray”","“isampler2DRect”","“isampler3D”","“isamplerBuffer”","“isamplerCube”","“isamplerCubeArray”","“isubpassInput”","“isubpassInputMS”","“itexture1D”","“itexture1DArray”","“itexture2D”","“itexture2DArray”","“itexture2DMS”","“itexture2DMSArray”","“itexture2DRect”","“itexture3D”","“itextureBuffer”","“itextureCube”","“itextureCubeArray”","“ivec2”","“ivec3”","“ivec4”","","","","","","&lt;","“layout”","{","[","&lt;&lt;=","&lt;&lt;","&lt;=","“long”","“lowp”","(","“mat2”","“mat2x2”","“mat2x3”","“mat2x4”","“mat3”","“mat3x2”","“mat3x3”","“mat3x4”","“mat4”","“mat4x2”","“mat4x3”","“mat4x4”","“mediump”","%=","*=","“namespace”","!=","“noinline”","“noperspective”","|=","||","Generic type name","“out”","“output”","“partition”","“patch”","%",".","","“precise”","“precision”","“public”","?","","}","]","“readonly”","Reserved for future use","“resource”","“restrict”","“return”","=","",")","“sample”","“sampler”","“sampler1D”","“sampler1DArray”","“sampler1DArrayShadow”","“sampler1DShadow”","“sampler2D”","“sampler2DArray”","“sampler2DArrayShadow”","“sampler2DMS”","“sampler2DMSArray”","“sampler2DRect”","“sampler2DRectShadow”","“sampler2DShadow”","“sampler3D”","“samplerBuffer”","“samplerCube”","“samplerCubeArray”","“samplerCubeArrayShadow”","“samplerCubeShadow”","“samplerShadow”",";","“shared”","“short”","“sizeof”","/","“smooth”","“static”","“struct”","“subpassInput”","“subpassInputMS”","“subroutine”","-=","“superp”","“switch”","“template”","“texture1D”","“texture1DArray”","“texture2D”","“texture2DArray”","“texture2DMS”","“texture2DMSArray”","“texture2DRect”","“texture3D”","“textureBuffer”","“textureCube”","“textureCubeArray”","“this”","~","“typedef”","Type name","","","“uimage1D”","“uimage1DArray”","“uimage2D”","“uimage2DArray”","“uimage2DMS”","“uimage2DMSArray”","“uimage2DRect”","“uimage3D”","“uimageBuffer”","“uimageCube”","“uimageCubeArray”","“uint”","Unsigned int constant","“uniform”","“union”","“unsigned”","“usampler1D”","“usampler1DArray”","“usampler2D”","“usampler2DArray”","“usampler2DMS”","“usampler2DMSArray”","“usampler2DRect”","“usampler3D”","“usamplerBuffer”","“usamplerCube”","“usamplerCubeArray”","“using”","“usubpassInput”","“usubpassInputMS”","“utexture1D”","“utexture1DArray”","“utexture2D”","“utexture2DArray”","“utexture2DMS”","“utexture2DMSArray”","“utexture2DRect”","“utexture3D”","“utextureBuffer”","“utextureCube”","“utextureCubeArray”","“uvec2”","“uvec3”","“uvec4”","“varying”","“vec2”","“vec3”","“vec4”","“void”","“volatile”","“while”","“writeonly”","Whitespaace","^=","^^","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Add a new line boundary","","","","","","","Returns the argument unchanged.","Split an offset into line and column information","Calls <code>U::from(self)</code>.","","Construct a new, empty LineMap","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,1,4,1,1,1,4,1,1,4,1,4,4,0,4,1,4,1,4,1,4,1,4,4,0,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,16,17,17,17,0,0,16,0,17,0,0,0,16,16,166,17,166,21,26,17,16,21,26,17,16,16,16,21,17,16,16,21,17,16,21,26,17,16,21,26,21,26,17,16,26,21,25,26,21,26,16,26,26,21,26,21,26,21,21,16,0,21,26,21,26,17,16,21,26,17,16,21,26,17,16,21,26,16,167,168,169,167,169,168,167,170,170,170,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,42,42,42,35,0,35,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,35,35,35,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,0,0,0,43,43,43,44,43,44,44,43,44,43,44,44,44,43,43,43,44,43,44,43,44,44,44,44,44,44,44,43,44,43,44,43,44,43,44,47,47,47,47,47,47,47,0,47,47,47,0,0,0,47,47,48,47,48,47,48,47,48,47,47,48,47,48,47,48,48,48,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,47,48,0,47,48,47,48,47,48,171,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,51,0,51,0,0,0,0,0,51,0,52,49,51,52,49,51,49,49,49,49,51,51,49,0,49,49,49,49,51,52,49,51,49,52,49,51,0,52,49,52,49,52,49,49,49,49,49,49,49,52,49,49,49,0,0,49,51,49,52,49,51,52,49,51,52,49,51,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,56,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,172,172,173,174,175,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,67,67,0,67,0,0,64,67,64,66,67,64,66,64,67,64,66,67,64,66,66,66,66,66,64,64,67,64,66,0,64,66,64,66,67,64,67,64,66,66,0,0,0,64,66,66,66,67,64,67,64,64,66,0,64,64,67,64,66,66,0,66,66,0,67,64,66,67,64,66,67,64,66,67,64,66,64,67,176,177,0,70,178,70,0,0,178,70,70,70,76,178,70,76,178,70,70,70,70,76,70,70,70,70,76,178,70,76,178,70,70,70,76,76,70,76,70,76,70,70,70,76,70,70,76,76,70,76,0,76,178,70,76,178,70,76,178,70,82,84,118,75,82,82,82,82,82,82,82,82,82,82,0,82,82,82,82,84,84,84,84,118,75,0,118,84,75,82,0,0,0,84,82,82,82,84,84,84,84,82,82,84,82,84,82,0,83,84,83,0,0,82,0,0,118,75,0,84,82,83,82,84,83,75,82,83,84,81,85,75,82,83,84,81,85,75,82,83,84,81,85,82,83,84,81,85,75,75,75,75,82,83,84,81,85,75,82,83,84,81,85,75,75,85,85,82,82,83,83,84,81,85,85,75,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,81,81,81,85,75,75,75,75,75,75,81,82,83,84,81,85,75,85,75,75,33,81,81,85,81,85,75,81,81,85,117,117,0,85,81,33,81,81,81,33,81,81,85,82,83,84,81,85,82,83,85,75,82,83,84,81,85,75,82,83,84,81,85,75,82,83,84,81,85,75,83,83,179,180,179,179,180,179,180,181,182,183,181,183,184,182,181,184,185,185,186,187,188,185,186,189,188,190,191,192,193,194,192,193,195,194,194,192,195,118,118,118,0,0,118,117,118,117,118,117,118,117,118,117,118,117,118,117,118,117,117,118,118,117,118,117,117,117,117,118,117,118,117,118,117,118,192,193,194,192,193,195,194,194,192,195,196,122,122,123,196,122,123,0,0,0,0,196,0,196,196,0,121,196,196,121,24,24,124,196,122,121,123,24,124,196,122,121,123,121,121,24,24,24,121,121,121,121,24,124,196,122,122,121,123,123,123,124,124,124,0,124,24,124,196,122,121,123,124,121,24,24,24,24,124,124,24,124,124,24,24,24,124,124,124,24,121,121,24,124,196,122,121,123,24,124,196,122,121,123,24,124,196,122,121,123,197,197,198,199,200,201,202,198,199,200,201,202,201,202,198,199,200,201,202,199,200,199,127,90,90,90,0,0,0,127,127,127,128,127,128,127,90,128,127,90,127,127,127,127,127,127,90,90,128,127,90,128,128,127,90,128,128,128,128,128,128,127,90,128,127,90,128,127,90,128,127,90,127,203,204,132,0,0,132,129,129,129,129,132,129,132,129,129,132,129,132,132,129,132,129,129,132,129,132,129,129,132,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,132,129,132,129,132,129,132,129,129,136,0,0,0,134,0,0,134,0,0,134,137,141,138,137,134,140,141,138,137,134,140,140,136,138,138,134,138,134,134,138,140,134,134,136,138,137,140,137,137,140,138,137,134,140,141,138,137,134,134,134,140,140,140,134,141,138,137,134,140,141,137,141,141,140,140,141,140,140,134,137,141,137,136,138,141,140,140,140,141,141,140,140,140,138,134,141,141,138,137,134,140,141,138,137,134,140,141,138,137,134,140,65,144,144,147,0,0,0,0,0,0,0,0,32,0,0,0,0,0,32,0,0,0,0,144,96,100,95,0,0,0,0,92,101,146,145,0,0,0,0,0,0,0,0,98,0,94,146,94,101,101,92,96,96,0,120,120,120,0,146,101,92,88,93,101,100,95,98,146,94,94,89,101,88,92,96,144,145,147,0,0,0,0,96,32,65,147,0,147,96,0,0,0,0,32,77,77,144,22,78,77,106,105,103,86,104,102,114,96,144,32,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,105,103,95,113,97,112,91,109,147,98,86,104,102,114,96,144,32,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,105,103,95,113,97,112,91,109,147,98,86,104,102,114,96,144,32,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,105,103,95,113,97,112,91,109,147,98,86,104,102,114,96,144,32,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,105,103,95,113,97,112,91,109,147,98,144,114,86,22,22,104,102,114,96,144,32,65,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,105,103,95,113,97,112,91,109,147,98,104,102,114,96,144,32,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,105,103,95,113,97,112,91,109,147,98,105,103,0,0,86,86,108,106,105,103,86,104,102,114,96,96,144,32,65,65,22,94,94,78,77,145,68,88,88,111,89,89,107,110,115,93,93,108,92,92,106,120,101,101,146,146,100,100,105,103,95,95,113,97,97,112,91,91,109,147,98,98,86,104,102,114,96,144,32,65,65,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,100,105,103,95,95,113,97,112,91,109,147,98,144,32,78,68,111,107,110,86,86,104,102,114,96,144,32,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,105,103,95,113,97,112,91,109,147,98,86,205,149,32,68,68,120,115,68,22,68,86,65,78,77,86,86,114,68,78,106,109,114,144,108,108,114,68,68,109,109,22,100,95,86,104,102,114,96,144,32,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,105,103,95,113,97,112,91,109,147,98,96,65,94,88,89,93,92,101,146,100,95,97,91,98,78,77,86,86,104,102,114,114,96,144,32,65,22,22,94,78,77,145,68,68,88,111,111,89,107,107,110,110,115,115,93,108,108,92,106,106,120,101,146,100,105,105,103,103,95,113,113,97,112,112,91,109,109,147,98,86,104,102,114,96,144,32,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,105,103,95,113,97,112,91,109,147,98,86,104,102,114,96,144,32,65,22,94,78,77,145,68,88,111,89,107,110,115,93,108,92,106,120,101,146,100,105,103,95,113,97,112,91,109,147,98,109,109,22,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,0,151,0,152,151,152,151,151,151,152,151,151,152,151,152,152,151,152,152,152,152,0,0,151,152,152,151,152,151,152,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,153,153,153,153,153,153,153,153,153,153,153,153,154,0,0,154,99,154,99,154,99,154,99,154,99,154,99,154,99,99,154,99,154,99,154,99,99,154,99,99,154,99,154,99,99,154,18,18,18,18,18,18,18,156,18,18,18,156,18,18,18,156,156,156,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,156,156,156,156,156,156,156,156,156,156,156,156,18,156,18,156,156,156,18,18,18,18,18,18,18,0,18,18,18,156,18,18,18,18,18,18,18,18,18,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,18,18,18,18,18,156,18,18,18,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,157,157,157,157,157,18,18,18,18,18,18,18,18,18,18,156,156,156,156,156,156,156,156,156,156,156,156,18,18,18,18,18,18,18,18,18,156,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,156,18,18,18,18,18,18,18,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,18,18,18,18,18,18,18,18,156,156,18,18,18,18,18,156,156,156,156,156,156,156,156,156,156,156,18,18,18,18,0,0,156,156,156,156,156,156,156,156,156,156,156,156,18,18,18,18,156,156,156,156,156,156,156,156,156,156,156,18,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,18,156,156,156,156,18,18,18,18,18,18,0,18,156,18,157,156,18,157,156,18,157,156,18,157,156,157,18,156,18,157,156,157,156,156,18,18,157,157,156,18,157,18,156,156,157,156,18,157,18,156,18,18,18,18,156,18,157,18,156,18,157,156,18,157,156,18,157,156,18,157,156,18,157,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,23,0,0,0,23,160,23,160,23,23,23,160,160,160,160,23,160,23,160,160,23,23,160,23,160,23,160,23,160,23,0,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,165,165,0,0,0,0,165,58,164,164,58,116,165,164,58,116,165,58,164,58,116,165,58,116,165,58,116,165,116,165,58,58,116,116,165,164,58,58,116,165,164,58,116,165,164,116,58,164,116,116,58,58,116,116,165,116,58,58,116,116,116,164,58,116,165,164,58,116,165,164,58,116,165,116],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[],1],0,[[]],[[]],[[1,3],[[5,[4]]]],[[]],[[]],[4,3],0,0,[[3,[7,[6]]],4],[[],1],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[4,[[10,[6]]]],0,0,0,0,0,0,0,[[]],[[]],[[11,11],12],[[],13],[[11,11],14],[[],14],[[]],[[],15],[[]],[[11,11],[[5,[12]]]],[[],8],[[],8],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,[16,14],[[],5],[17,5],[[],[[5,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[[]],0,[[17,17],14],[[16,16],14],[[],14],0,[[17,19],20],[[16,19],20],[[]],[[]],[[]],[[]],[[21,22],14],0,[[]],[[]],[[]],[[]],[[]],[[21,6],23],[[],24],[[[26,[25]]],24],[[1,27,14],21],[[28,27,14,1],[[26,[25]]]],[[[5,[23]],14],16],[[[26,[[0,[2,25]]]]],5],0,[[21,6],14],[[[26,[25]],6],14],0,[[[26,[29]],30],[[5,[31]]]],[[21,4,32]],0,[[]],0,[[21,33,24]],[[[26,[25]],33]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],0,0,[16,14],0,0,0,0,0,0,0,0,0,0,[[33,27,14,34]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[35,35],[[]],[[35,19],20],[[]],[35,36],0,[[]],[[]],[35,37],[35,37],[[35,[39,[38]],40],[[5,[41]]]],[[35,[39,[38]],40,40],[[5,[41]]]],[36,35],[35,[[5,[[39,[38]]]]]],[35,5],[[35,14]],[[]],0,[[],8],[[],8],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[42,42],[[]],[[42,42],14],[[],14],[[42,19],20],[38,42],[[]],[[]],[42,14],[[]],[[],8],[[],8],[[],9],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[43,43],[44,44],[[]],[[]],[[44,45],46],0,[[43,43],14],[[],14],[[43,19],20],[[44,19],20],[[]],[[]],[[]],[[]],[[]],[44,37],[44,37],0,[36,44],[44,5],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[47,47],[48,48],[[]],[[]],[[],47],[[47,47],14],0,[[47,19],20],[[48,19],20],[[]],[[]],[48,36],0,[[]],[[]],[[]],[48,37],[48,37],[36,48],[48,5],[48,[[5,[[39,[43]]]]]],[48,5],0,0,[[48,14]],0,0,0,[[]],[[]],0,[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[38,38],[[]],[[38,38],14],[[],14],[[38,19],20],[[]],[36,38],[[]],[38,14],[[]],[[],8],[[],8],[[],9],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[49],0,[49],[49,50],[51,51],[[]],[49],0,0,[[49,[10,[42]],[10,[42]]],51],[[49,42],51],[49],[[51,19],20],[[]],[[]],[[]],0,[[]],[[]],[[]],0,[36,52],[36,49],[52,53],[49,53],[52,[[5,[[55,[54]]]]]],[[49,40],[[5,[[55,[54]]]]]],[49,[[5,[41]]]],0,[[49,56,46]],[[49,41],36],[[49,34]],[49],0,0,[[49,57]],[[49,50,57]],0,0,[[49,41],58],[[]],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],0,[[]],[[]],[53,53],[[]],0,[[53,19],20],[[]],[53,59],0,[[]],[53],0,[[59,[7,[[60,[56]]]],37],53],[[]],[[],8],[[],8],[[],9],0,0,0,0,0,0,0,[[]],[[]],[56,56],[[]],[[56,56],14],[[],14],[[56,19],20],[[56,19],20],[[]],[[]],[[]],[[],61],[[],8],[[],8],[[],9],0,0,0,0,0,0,[[]],[[]],[54,54],[[]],[[54,54],12],[[],54],[[54,54],14],[[],14],[[54,19],20],[[]],[[54,62]],[[]],[63],[[],63],[[54,54],[[5,[12]]]],[[]],[[],8],[[],8],[[],9],0,[49],[49],[49],[49],[49],[[49,50]],[49],[49],[49],[49],[49],[49],[49],[49],[49],[49],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[57,57],[[]],[[57,57],12],[[57,57],14],[[],14],[[57,19],20],[[]],[42,57],[[57,62]],[[]],[57,14],[57,14],[57,14],[[57,57],[[5,[12]]]],[[57,57],57],[[]],[[],8],[[],8],[[],9],0,0,0,0,0,0,[[64,65,32]],[[]],[[]],[[]],[[]],[[]],[[]],[[],66],[67,67],[64,64],[66,66],[[]],[[]],[[]],[[66,14],66],0,[[66,14],66],0,[64,14],0,[[],67],[[],64],[[],66],0,[[64,68,30],14],[[66,[69,[68]]],66],0,0,[[67,67],14],[[64,64],14],[[],14],[[],14],[[66,14],66],0,0,0,0,[[64,22]],[[66,[69,[65]],[69,[32]]],66],0,[66,64],[[67,19],20],[[64,19],20],[[]],[[]],[66,64],[[]],0,[[64,36],[[5,[70]]]],0,[[]],[[]],[[]],[1,66],0,[[66,1],66],0,0,[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],0,[67,14],0,0,0,0,0,0,0,0,0,0,0,[70,45],[[]],[[]],[[]],[[]],[[]],[[]],[70,70],[[]],[[30,[55,[54]],[5,[[71,[36,[10,[33]]]]]],72],28],0,[[70,70],14],[[],14],[70,30],[[70,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[70,36],[70,14],[[70,2,24,[5,[72]],34],[[8,[5,73]]]],[[70,[74,[54]],2,24],[[8,[5,73]]]],[70,14],0,[[28,72,24],[[7,[75]]]],[[76,64,24],[[7,[75]]]],[[30,77,[10,[[7,[33]]]],72,24],[[7,[75]]]],[[30,78,72,24],[[7,[75]]]],[[70,[10,[[7,[33]]]],72,24],[[7,[75]]]],[[76,64,24,[80,[79]]],[[7,[75]]]],[[70,72,64,24],[[7,[75]]]],[[36,57,72],28],[[64,[7,[33]],24],[[7,[75]]]],[[64,[7,[33]],24,[80,[79]],[5,[72]]],[[7,[75]]]],[[]],0,[[[10,[33]]],[[10,[33]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[75,[[5,[81]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[82,82],[83,83],[84,84],[81,81],[85,85],[[]],[[]],[[]],[[]],[[]],[[[86,[[69,[84]]]],14],75],[[24,14],75],[[[86,[[69,[84]]]],14,28,24],75],[30,75],[[82,82],14],[[83,83],14],[[84,84],14],[[81,81],14],[[85,85],14],[[75,75],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[[69,[83]],[69,[46]],24,14],75],[85,[[10,[87]]]],0,[[82,19],20],[[82,19],20],[[83,19],20],[[83,19],20],[[84,19],20],[[81,19],20],[[85,19],20],[[85,19],20],[[75,19],20],[88,82],[89,82],[90,82],[[],82],[91,82],[92,82],[93,82],[[[5,[79]]],82],[[]],[[],82],[94,82],[[],82],[95,82],[96,82],[61,82],[97,82],[98,82],[99,82],[100,82],[101,82],[79,82],[[]],[[],83],[82,83],[[],83],[56,83],[102,84],[103,84],[104,84],[105,84],[106,84],[22,84],[68,84],[107,84],[[]],[108,84],[109,84],[110,84],[111,84],[112,84],[113,84],[114,84],[115,84],[[]],[[],81],[[],81],[[]],[[],75],[[]],[[],75],[[],75],[[],75],[81,75],[33,81],[[]],[[]],[[]],[[]],[[]],[[]],[85,[[7,[87]]]],[75,[[5,[81]]]],[75,14],[[],57],[81,57],[81,57],[85,84],0,0,[[[60,[[69,[83]]]],14],75],[[57,116,72],81],[72,81],0,0,0,0,0,0,[[],116],[81,36],[81,116],0,[[],72],[81,72],[81,72],[85,72],[[]],[[]],[[]],[[]],[[]],[[],61],[[],61],[[],61],[[33,14],75],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[65,72,24],83],[[3,[5,[6]],72,24],83],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[117,117],[118,118],[[]],[[]],[[117,117],14],[[118,118],14],[[],14],[[],14],[[117,19],20],[[118,19],20],[[[55,[54]]],117],[[]],[75,118],[[]],[[]],[[]],0,0,[117,61],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[24,119,120]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[121,121],[[]],[24,30],[24,30],0,[[121,121],14],[[],14],[[121,19],20],[[121,19],20],[[]],[[]],[[]],[75,122],[[]],[[]],[[],123],[75,123],[[]],[[124,64,[55,[54]]],123],[[124,64,[125,[54]],[7,[[60,[56]]]],[126,[[55,[54]],[74,[54]]]]],[[5,[75]]]],[[124,64,[74,[54]],[125,[54]],[7,[[60,[56]]]]],[[5,[75]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[121,14],0,[24,5],0,[[24,13],13],[124,24],0,[30,24],[[69,64],124],[124,5],[[24,119]],[[24,119]],[[24,119]],[[124,64]],[124,[[5,[64]]]],0,[24,121],[[]],[[],61],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[127,127],[128,14],[127,14],[[]],[[]],[[]],[[]],[[]],[[]],[127,127],[[]],[127,127],[127,14],[[127,127],14],[[],14],[[90,19],20],[[90,19],20],[[]],[[]],[[]],[128,14],[[]],[[]],[[]],[[],128],[[128,14],[[8,[90]]]],[128,[[8,[90]]]],[128,[[8,[90]]]],[[128,14]],0,[[]],[[],61],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[127,14],127],0,0,0,0,0,0,[[[129,[2]]],[[5,[[8,[130]]]]]],[[[129,[2]]],[[5,[[8,[130]]]]]],[[[5,[[8,[130]]]],[5,[[8,[130]]]],40],[[5,[[8,[130]]]]]],[[]],[[]],[[]],[[]],[[[129,[2]]],[[5,[81]]]],[[[129,[[0,[131,2]]]]],[[129,[[0,[131,2]]]]]],[132,132],[[]],[[]],[[132,132],14],[[[129,[2]]],[[5,[[8,[130]]]]]],[[],14],[[[129,[2]]],[[5,[[8,[130]]]]]],[[[129,[[0,[133,2]]]],19],20],[[132,19],20],[[]],[[]],0,[[]],[[]],[[]],[[[129,[2]]],[[5,[[8,[130]]]]]],[[[129,[2]]],[[5,[[8,[130]]]]]],[[[129,[2]]],[[5,[[8,[130]]]]]],[[2,64],[[129,[2]]]],[[[129,[2]]],5],[[[129,[2]]],[[5,[132]]]],[[[129,[2]]],[[5,[[8,[130]]]]]],[[[129,[2]]],[[5,[81]]]],[[[129,[2]]],[[5,[57]]]],[[[129,[2]]],[[5,[[8,[130]]]]]],[[[129,[2]]],[[5,[[8,[130]]]]]],[[[129,[2]]],[[5,[[8,[130]]]]]],0,[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[[129,[2]]],[[5,[[8,[130]]]]]],[[[129,[2]]],[[5,[[8,[130]]]]]],0,0,0,0,0,0,0,0,0,0,[134,[[5,[135]]]],[[[137,[136]]],53],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[31,[[8,[135]]]],[[138,31],[[8,[135]]]],[138,138],[134,134],[[]],[[]],[[134,134],12],[[],138],[[],[[140,[[0,[136,139]]]]]],[[134,134],14],[[],14],[31,14],[[138,31],14],[[[137,[136]],64],124],0,[[[137,[136]]],30],0,0,[[138,19],20],[[[137,[[0,[133,136]]]],19],20],[[134,19],20],[[[140,[[0,[133,136]]]],19],20],[[]],[[]],[[]],[135,134],[[],134],[[]],[[]],0,[[[140,[136]],30],5],[[134,62]],[[]],[[]],[[]],[[]],[[]],[[]],[[[137,[136]]]],[[[141,[136]]],[[5,[64]]]],[[[141,[136]]],24],[[],[[140,[[0,[136,139]]]]]],[136,[[140,[136]]]],[[[141,[136]]],5],[[[140,[136]],31],[[8,[[137,[136]]]]]],[[[140,[136]],36,31],[[137,[136]]]],[[134,134],[[5,[12]]]],[[[137,[136]],64],[[141,[136]]]],0,0,[31,[[8,[[142,[36]]]]]],[[138,31],[[8,[[142,[36]]]]]],[[[141,[136]],30],[[5,[31]]]],[[[140,[136]],30],[[5,[31]]]],[[[140,[136]],30,99],[[5,[135]]]],[[[140,[136]],[143,[31]],99],[[5,[135]]]],0,0,[[[140,[136]]],[[7,[135]]]],0,[[[140,[136]]],[[7,[135]]]],[[]],[[]],[[[141,[136]],27,14,1],[[26,[[141,[136]]]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[77,[[10,[79]]]],0,[144,45],0,[78,[[55,[54]]]],[77,[[55,[54]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[86,[131]]],[[86,[131]]]],[104,104],[102,102],[114,114],[96,96],[144,144],[32,32],[65,65],[22,22],[94,94],[78,78],[77,77],[145,145],[68,68],[88,88],[111,111],[89,89],[107,107],[110,110],[115,115],[93,93],[108,108],[92,92],[106,106],[120,120],[101,101],[146,146],[100,100],[105,105],[103,103],[95,95],[113,113],[97,97],[112,112],[91,91],[109,109],[147,147],[98,98],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[144,144],12],[[],114],[86],[65,22],[65,22],[[104,104],14],[[102,102],14],[[114,114],14],[[96,96],14],[[144,144],14],[[32,32],14],[[65,3],14],[[65,65],14],[[22,22],14],[[94,94],14],[[78,78],14],[[77,77],14],[[145,145],14],[[68,68],14],[[88,88],14],[[111,111],14],[[89,89],14],[[107,107],14],[[110,110],14],[[115,115],14],[[93,93],14],[[108,108],14],[[92,92],14],[[106,106],14],[[120,120],14],[[101,101],14],[[146,146],14],[[100,100],14],[[105,105],14],[[103,103],14],[[95,95],14],[[113,113],14],[[97,97],14],[[112,112],14],[[91,91],14],[[109,109],14],[[147,147],14],[[98,98],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[105,64,24]],[[103,64,24]],[[30,[55,[54]],64,24]],[[30,[55,[54]],64,24]],[86,30],0,0,0,0,0,[[[86,[133]],19],20],[[104,19],20],[[102,19],20],[[114,19],20],[[96,19],20],[[96,19],20],[[144,19],20],[[32,19],20],[[65,19],20],[[65,19],20],[[22,19],20],[[94,19],20],[[94,19],20],[[78,19],20],[[77,19],20],[[145,19],20],[[68,19],20],[[88,19],20],[[88,19],20],[[111,19],20],[[89,19],20],[[89,19],20],[[107,19],20],[[110,19],20],[[115,19],20],[[93,19],20],[[93,19],20],[[108,19],20],[[92,19],20],[[92,19],20],[[106,19],20],[[120,19],20],[[101,19],20],[[101,19],20],[[146,19],20],[[146,19],20],[[100,19],20],[[100,19],20],[[105,19],20],[[103,19],20],[[95,19],20],[[95,19],20],[[113,19],20],[[97,19],20],[[97,19],20],[[112,19],20],[[91,19],20],[[91,19],20],[[109,19],20],[[147,19],20],[[98,19],20],[[98,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,65],[36,65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[146,100],[[]],[[]],[[]],[[]],[146,95],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36,[[8,[144]]]],[36,[[8,[32]]]],[36,[[8,[78]]]],[[79,77,14],68],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[86],[[],[[55,[54]]]],[[[149,[[0,[148,133,131]]]]],[[55,[54]]]],[32,14],[68,145],0,[120,13],0,[68,36],0,0,[[30,[55,[54]]],86],[[[142,[36]]],65],[[[55,[54]]],78],[[[7,[79]],[55,[54]]],77],[86,[[55,[54]]]],0,0,[[79,78,14],68],[[],78],[[106,64,24],[[8,[120,101]]]],[[[10,[[74,[54]]]]],[[5,[14]]]],0,[[144,144],[[5,[12]]]],[[108,64,24],[[8,[99,92]]]],0,0,[68,14],0,[109,36],0,[65,22],[100,[[5,[150]]]],[95,[[5,[150]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],[[],61],0,0,[[],8],[[],[[8,[[86,[[0,[148,133,131]]]]]]]],[[],8],[[],8],[[],[[8,[114]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],[[8,[22]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],[[8,[68]]]],[[],8],[[],8],[[],[[8,[111]]]],[[],8],[[],8],[[],[[8,[107]]]],[[],8],[[],[[8,[110]]]],[[],[[8,[115]]]],[[],8],[[],8],[[],[[8,[108]]]],[[],8],[[],8],[[],8],[[],[[8,[106]]]],[[],8],[[],8],[[],8],[[],8],[[],[[8,[105]]]],[[],8],[[],[[8,[103]]]],[[],8],[[],8],[[],[[8,[113]]]],[[],8],[[],8],[[],[[8,[112]]]],[[],8],[[],8],[[],8],[[],[[8,[109]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[109,147],0,[65,22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[151,151],14],[[],14],0,[[151,19],20],[[151,19],20],[[]],[[]],0,[[]],[[]],[[]],[152,[[5,[64]]]],[152,24],[152,5],[36,53],[[36,64],152],[[],61],[[152,27,14,1],[[26,[152]]]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[153,153],12],[[],13],[[153,153],14],[[],14],[[]],[[],15],[[]],[[153,153],[[5,[12]]]],[[],8],[[],8],[[],9],0,0,0,0,[[]],[[]],[[]],[[]],[99,99],[154,154],[[]],[[]],[[99,99],14],[[154,154],14],[[],14],[[],14],[[99,19],20],[[99,19],20],[[154,19],20],[[]],[[]],[[]],[[]],0,[[]],[[]],[[],61],[[],8],[[],8],[[],8],[[],8],0,[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[10,[155]]]],[[]],[[]],[[]],[[]],[[]],[[]],[156,156],[18,18],[157,157],[[]],[[]],[[]],[[156,156],12],[[157,157],12],[[],158],[[156,156],14],[[18,18],14],[[157,157],14],[[],14],[[],14],[[156,19],20],[[156,19],20],[[18,19],20],[[18,19],20],[[157,19],20],[[157,19],20],[[]],[[]],[[]],[[41,36,27,14,34]],[[156,14,14,6,34],5],[[156,62]],[[157,62]],[[]],[[]],[[]],[18,[[10,[36]]]],[[36,27,14,34],5],[36,18],[[36,13],[[8,[18,157]]]],[159,[[5,[18]]]],[18,36],[[156,156],[[5,[12]]]],[[18,18],[[5,[12]]]],[[157,157],[[5,[12]]]],[36],[[]],[[]],[[]],[[],61],[[],61],[[],61],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[18,36],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[23,23],[[]],[[160,160],12],[[],13],[[160,160],14],[[],14],[[23,19],20],[[]],[[]],[[],15],[[]],[[]],[23,14],[[160,160],[[5,[12]]]],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,[[37,13]],[[]],[[]],[37,37],[[]],[[],37],[[37,19],20],[[]],[[37,13]],[[]],0,[[],37],[[37,119]],[[]],[[],8],[[],8],[[],9],0,[[]],[[]],[[[39,[131]]],[[39,[131]]]],[[]],[39],[39],[[[39,[133]],19],20],[[]],[[]],[[39,40],39],[46,39],0,[[39,36],36],[[39,36],116],[[]],0,[39,[[39,[161]]]],[[],8],[[],8],[[],9],0,0,0,0,0,0,0,[58,[[163,[162]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[58,164],0,[58,58],[116,116],[165,165],[[]],[[]],[[]],[[58,36],14],[[116,116],14],[[165,165],14],[[],14],[[],14],[[58,19],20],[[58,19],20],[[116,19],20],[[116,19],20],[[165,19],20],[[]],[36,58],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[116,116],[36,58],[164,5],[[116,116]],[36,116],0,[[]],[[]],[116,116],[[]],[116,61],[58,[[142,[36]]]],[[],61],[[],61],[116,[[142,[36]]]],[116,[[5,[36]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[36,116]],"c":[],"p":[[3,"Registry"],[8,"Iterator"],[6,"ExtNameAtom"],[3,"ExtensionSpec"],[4,"Option"],[6,"TypeNameAtom"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[15,"slice"],[3,"ExtNameAtomStaticSet"],[4,"Ordering"],[15,"u32"],[15,"bool"],[3,"PhfStrSet"],[4,"TokenState"],[4,"Event"],[4,"Token"],[3,"Formatter"],[6,"Result"],[3,"TypeTable"],[3,"Extension"],[4,"TypeNameState"],[3,"ExpandLocation"],[8,"LocatedIterator"],[3,"Tokenizer"],[15,"u16"],[8,"IntoIterator"],[8,"FileIdResolver"],[3,"FileId"],[3,"Path"],[4,"ExtensionBehavior"],[8,"TokenLike"],[8,"Fn"],[3,"Lexer"],[15,"str"],[3,"LineMap"],[4,"Token"],[3,"TextToken"],[8,"FnOnce"],[6,"TextToken"],[4,"Token"],[4,"NewlineTokenKind"],[3,"NewlineSplitter"],[15,"usize"],[3,"TextRange"],[4,"State"],[3,"PreLexer"],[3,"ParserRun"],[3,"Checkpoint"],[4,"ExpectAny"],[3,"Parser"],[3,"Ast"],[3,"PreprocessorLang"],[3,"SyntaxNode"],[4,"ErrorKind"],[4,"SyntaxKind"],[3,"Unescaped"],[3,"GreenNode"],[3,"Located"],[3,"String"],[8,"Hasher"],[3,"SyntaxKind"],[3,"ProcessorState"],[4,"ExtensionName"],[3,"ProcessorStateBuilder"],[4,"IncludeMode"],[3,"Define"],[8,"Into"],[4,"Definition"],[3,"HashMap"],[3,"NodeSpan"],[6,"ProcessingError"],[3,"SyntaxToken"],[4,"Event"],[3,"MacroInvocation"],[3,"DefineFunction"],[3,"DefineObject"],[3,"SmolStr"],[3,"HashSet"],[3,"OutputToken"],[4,"ProcessingErrorKind"],[4,"ErrorKind"],[4,"DirectiveKind"],[3,"EventDirective"],[3,"Directive"],[6,"Error"],[4,"DefineError"],[4,"IfDefError"],[4,"IfError"],[4,"EndIfError"],[4,"IncludeError"],[4,"ErrorError"],[4,"ExtensionError"],[4,"ElifError"],[4,"VersionError"],[4,"ElseError"],[4,"PragmaError"],[3,"ParsedPath"],[4,"IfError"],[4,"LineError"],[3,"Empty"],[3,"Elif"],[3,"Invalid"],[3,"If"],[3,"Line"],[3,"IfNDef"],[3,"Include"],[3,"Pragma"],[3,"Undef"],[3,"IfDef"],[3,"EndIf"],[3,"Else"],[3,"Version"],[3,"Error"],[3,"TokenText"],[3,"SendNode"],[4,"SendEvent"],[3,"TextSize"],[4,"ParsedLine"],[4,"LocationString"],[4,"ExpandEvent"],[4,"HandleNodeResult"],[3,"ExpandOne"],[3,"SyntaxElementChildren"],[4,"NodeOrToken"],[4,"IfState"],[3,"IfStack"],[3,"ExprEvaluator"],[15,"i32"],[8,"Clone"],[4,"EvalResult"],[8,"Debug"],[4,"PathOrSource"],[3,"PathBuf"],[8,"FileSystem"],[3,"ParsedFile"],[3,"Std"],[8,"Default"],[3,"Processor"],[3,"ExpandStack"],[4,"Cow"],[8,"AsRef"],[4,"VersionProfile"],[4,"DefineKind"],[4,"IfEvalError"],[4,"ParsedPragma"],[8,"TryFrom"],[6,"DirectiveResult"],[8,"Error"],[4,"ProcessStrError"],[3,"ExpandStr"],[3,"KeywordAtomStaticSet"],[4,"PathType"],[3,"TokenDescriptor"],[4,"TypeName"],[4,"ErrorKind"],[3,"TokenDescription"],[6,"KeywordAtom"],[3,"TypeNameAtomStaticSet"],[8,"From"],[15,"char"],[3,"MatchIndices"],[3,"UnescapeIter"],[4,"TokenTextRepr"],[8,"MaybeToken"],[13,"EnterFile"],[13,"Directive"],[13,"Error"],[13,"Token"],[13,"Digits"],[13,"Unexpected"],[13,"EndOfInput"],[13,"UnknownPreprocessorDirective"],[13,"ExtraTokensInPreprocessorDirective"],[13,"ArbInclude"],[13,"GoogleInclude"],[4,"MacroCall"],[13,"WarnExtUse"],[13,"UnsupportedExt"],[13,"EnterFile"],[13,"Directive"],[13,"Error"],[13,"Token"],[13,"MismatchedArguments"],[13,"ProtectedDefine"],[13,"UnterminatedMacroInvocation"],[13,"UnexpectedDirective"],[13,"ErrorDirective"],[13,"IncludeNotFound"],[13,"InvalidTokenPaste"],[13,"EnterFile"],[13,"Error"],[13,"Directive"],[13,"Token"],[4,"ExpandState"],[13,"Init"],[13,"Iterate"],[13,"EnterNewFile"],[13,"PendingOne"],[13,"PendingEvents"],[13,"ExpandedTokens"],[13,"Active"],[13,"One"],[8,"DirectiveExt"],[13,"MissingBody"],[13,"InvalidAllBehavior"],[13,"MissingExtensionBehavior"],[13,"InvalidExtensionBehavior"],[13,"InvalidExpr"],[13,"MalformedExpr"],[13,"ExtraTokens"],[13,"InvalidPathLiteral"],[13,"MalformedPath"],[13,"ExtraTokens"],[13,"InvalidLineNumber"],[13,"InvalidPath"],[13,"MalformedLine"],[13,"ExtraTokens"],[13,"IncorrectSyntax"],[13,"InvalidVersionNumber"],[13,"InvalidVersionProfile"],[13,"ProfileUnsupported"],[13,"EsProfileRequired"]]},\
"glsl_lang_quote":{"doc":"<code>glsl-lang-quote</code> offers proc-macros to quote GLSL syntax in …","t":"OOFOAAIKIOKFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","n":["glsl","glsl_expr","glsl_internal","glsl_statement","quoted","tokenize","Quoted","quote","Tokenize","impl_tokenize","tokenize","tokenize_array_spec","tokenize_array_spec_dim","tokenize_arrayed_identifier","tokenize_assignment_op","tokenize_binary_op","tokenize_block","tokenize_case_label","tokenize_compound_statement","tokenize_condition","tokenize_declaration","tokenize_expr","tokenize_expr_statement","tokenize_external_declaration","tokenize_for_init_statement","tokenize_for_rest_statement","tokenize_fully_specified_type","tokenize_function_definition","tokenize_function_identifier","tokenize_function_parameter_declaration","tokenize_function_parameter_declarator","tokenize_function_prototype","tokenize_identifier","tokenize_init_declarator_list","tokenize_initializer","tokenize_interpolation_qualifier","tokenize_iteration_statement","tokenize_jump_statement","tokenize_layout_qualifier","tokenize_layout_qualifier_spec","tokenize_path","tokenize_precision_qualifier","tokenize_preprocessor","tokenize_preprocessor_define","tokenize_preprocessor_elseif","tokenize_preprocessor_error","tokenize_preprocessor_extension","tokenize_preprocessor_extension_behavior","tokenize_preprocessor_extension_name","tokenize_preprocessor_if","tokenize_preprocessor_ifdef","tokenize_preprocessor_ifndef","tokenize_preprocessor_include","tokenize_preprocessor_line","tokenize_preprocessor_pragma","tokenize_preprocessor_undef","tokenize_preprocessor_version","tokenize_preprocessor_version_profile","tokenize_rs_ident","tokenize_selection_rest_statement","tokenize_selection_statement","tokenize_single_declaration","tokenize_single_declaration_no_type","tokenize_span","tokenize_statement","tokenize_storage_qualifier","tokenize_struct_field","tokenize_struct_non_declaration","tokenize_switch_statement","tokenize_text_range","tokenize_text_size","tokenize_translation_unit","tokenize_type_name","tokenize_type_qualifier","tokenize_type_qualifier_spec","tokenize_type_specifier","tokenize_type_specifier_non_array","tokenize_unary_op"],"q":[[0,"glsl_lang_quote"],[6,"glsl_lang_quote::quoted"],[8,"glsl_lang_quote::tokenize"]],"d":["Parse a translation unit at compile time","Parse an expression at compile time","","Parse a statement at compile time","A set of small traits that enable tokenizing some common …","The <code>Tokenize</code> trait, turning glsl into <code>TokenStream</code>s.","","","Tokenize a value into a stream of tokens.","","Inject self into a <code>TokenStream</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,71,0,0,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[1,1],0,0,0,0,[[],2],0,0,[2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[10,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[19,2],[20,2],[21,2],[22,2],[23,2],[24,2],[25,2],[26,2],[27,2],[28,2],[29,2],[30,2],[31,2],[32,2],[33,2],[34,2],[35,2],[36,2],[37,2],[38,2],[39,2],[40,2],[41,2],[42,2],[43,2],[44,2],[45,2],[46,2],[47,2],[48,2],[49,2],[50,2],[51,2],[52,2],[53,2],[54,2],[[[56,[55]]],2],[57,2],[58,2],[59,2],[60,2],[61,2],[62,2],[63,2],[64,2],[65,2],[66,2],[67,2],[68,2],[69,2],[70,2]],"c":[],"p":[[3,"TokenStream"],[3,"TokenStream"],[6,"ArraySpecifier"],[6,"ArraySpecifierDimension"],[6,"ArrayedIdentifier"],[6,"AssignmentOp"],[6,"BinaryOp"],[6,"Block"],[6,"CaseLabel"],[6,"CompoundStatement"],[6,"Condition"],[6,"Declaration"],[6,"Expr"],[6,"ExprStatement"],[6,"ExternalDeclaration"],[6,"ForInitStatement"],[6,"ForRestStatement"],[6,"FullySpecifiedType"],[6,"FunctionDefinition"],[6,"FunIdentifier"],[6,"FunctionParameterDeclaration"],[6,"FunctionParameterDeclarator"],[6,"FunctionPrototype"],[6,"Identifier"],[6,"InitDeclaratorList"],[6,"Initializer"],[6,"InterpolationQualifier"],[6,"IterationStatement"],[6,"JumpStatement"],[6,"LayoutQualifier"],[6,"LayoutQualifierSpec"],[6,"Path"],[6,"PrecisionQualifier"],[6,"Preprocessor"],[6,"PreprocessorDefine"],[6,"PreprocessorElseIf"],[6,"PreprocessorError"],[6,"PreprocessorExtension"],[6,"PreprocessorExtensionBehavior"],[6,"PreprocessorExtensionName"],[6,"PreprocessorIf"],[6,"PreprocessorIfDef"],[6,"PreprocessorIfNDef"],[6,"PreprocessorInclude"],[6,"PreprocessorLine"],[6,"PreprocessorPragma"],[6,"PreprocessorUndef"],[6,"PreprocessorVersion"],[6,"PreprocessorVersionProfile"],[15,"str"],[6,"SelectionRestStatement"],[6,"SelectionStatement"],[6,"SingleDeclaration"],[6,"SingleDeclarationNoType"],[3,"NodeSpan"],[4,"Option"],[6,"Statement"],[6,"StorageQualifier"],[6,"StructFieldSpecifier"],[6,"StructSpecifier"],[6,"SwitchStatement"],[3,"TextRange"],[3,"TextSize"],[3,"TranslationUnit"],[6,"TypeName"],[6,"TypeQualifier"],[6,"TypeQualifierSpec"],[6,"TypeSpecifier"],[6,"TypeSpecifierNonArray"],[6,"UnaryOp"],[8,"Quoted"],[8,"Tokenize"]]},\
"glsl_lang_types":{"doc":"","t":"ANNNNNNNGDGEGDNNGENNNNNNGENNNGNDNNNNNNGNENNNGENNNGDGENNNNNNNNNNNNNNNNNNNGNNNENNNNNNNNNNNNNNNNNNNNGNNEGDNNNGEDNNNNGEGDGDNGEGNDNGEGDGNDNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGNDNNNNNNNNNNNNNNNNNNGNDGENNNGENNNGENGENNNGDGENNNNNNNNNNNNNNNNNNNNNNNNNNDIYIDNNNNNNNGENNNNNNGEGNEGEGDGDGGEDGEGDGDGDGDGDGDGDGDGENNNNNNNNNNNNNNNNNNNNNNNNNNNNNGEGDNNNNGDGDDNNGNENGENGDGDNNNNNNGDNDDNNNNNNNNNNNDGNDGDGEGNDGENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGENNNNNNNNNNNNNNNNNLLLLLLLLMMMLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMMMMMOMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLMLLLLLLLMMMMMMMMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMM","n":["ast","Absolute","Add","Add","Add","All","And","And","ArraySpecifier","ArraySpecifierData","ArraySpecifierDimension","ArraySpecifierDimensionData","ArrayedIdentifier","ArrayedIdentifierData","Assignment","Assignment","AssignmentOp","AssignmentOpData","AtomicUInt","Attribute","BVec2","BVec3","BVec4","Binary","BinaryOp","BinaryOpData","BitAnd","BitOr","BitXor","Block","Block","BlockData","Bool","BoolConst","Bracket","Break","Buffer","Case","CaseLabel","CaseLabel","CaseLabelData","Centroid","Coherent","Comma","Comment","CommentData","Compatibility","Complement","Compound","CompoundStatement","CompoundStatementData","Condition","ConditionData","Const","Continue","Core","DMat2","DMat22","DMat23","DMat24","DMat3","DMat32","DMat33","DMat34","DMat4","DMat42","DMat43","DMat44","DVec2","DVec3","DVec4","Dec","Declaration","Declaration","Declaration","Declaration","DeclarationData","Def","Define","Disable","Discard","Div","Div","DoWhile","Dot","Double","DoubleConst","Else","Else","ElseIf","Enable","EndIf","Equal","Equal","Error","Es","ExplicitlySized","Expr","Expr","Expr","ExprData","ExprStatement","ExprStatementData","Expression","Expression","Extension","ExternalDeclaration","ExternalDeclarationData","FileId","Flat","Float","FloatConst","For","ForInitStatement","ForInitStatementData","ForRestStatement","ForRestStatementData","FullySpecifiedType","FullySpecifiedTypeData","FunCall","FunIdentifier","FunIdentifierData","FunctionDefinition","FunctionDefinition","FunctionDefinitionData","FunctionLike","FunctionParameterDeclaration","FunctionParameterDeclarationData","FunctionParameterDeclarator","FunctionParameterDeclaratorData","FunctionPrototype","FunctionPrototype","FunctionPrototypeData","Gt","Gte","High","IImage1D","IImage1DArray","IImage2D","IImage2DArray","IImage2DMs","IImage2DMsArray","IImage2DRect","IImage3D","IImageBuffer","IImageCube","IImageCubeArray","ISampler1D","ISampler1DArray","ISampler2D","ISampler2DArray","ISampler2DMs","ISampler2DMsArray","ISampler2DRect","ISampler3D","ISamplerBuffer","ISamplerCube","ISamplerCubeArray","ISubpassInput","ISubpassInputMs","ITexture1D","ITexture1DArray","ITexture2D","ITexture2DArray","ITexture2DMs","ITexture2DMsArray","ITexture2DRect","ITexture3D","ITextureBuffer","ITextureCube","ITextureCubeArray","IVec2","IVec3","IVec4","Identifier","Identifier","IdentifierData","If","IfDef","IfNDef","Image1D","Image1DArray","Image2D","Image2DArray","Image2DMs","Image2DMsArray","Image2DRect","Image3D","ImageBuffer","ImageCube","ImageCubeArray","In","InOut","Inc","Include","InitDeclaratorList","InitDeclaratorList","InitDeclaratorListData","Initializer","InitializerData","Int","IntConst","Interpolation","InterpolationQualifier","InterpolationQualifierData","Invariant","Invariant","Iteration","IterationStatement","IterationStatementData","Jump","JumpStatement","JumpStatementData","LShift","LShift","Layout","LayoutQualifier","LayoutQualifierData","LayoutQualifierSpec","LayoutQualifierSpecData","Line","List","Low","Lt","Lte","Mat2","Mat22","Mat23","Mat24","Mat3","Mat32","Mat33","Mat34","Mat4","Mat42","Mat43","Mat44","Medium","Minus","Mod","Mod","Mult","Mult","Multi","Named","NoPerspective","Node","NodeContent","NodeContentDisplay","NodeDisplay","NodeSpan","NonEqual","Not","ObjectLike","Or","Or","Out","Patch","Path","PathData","PostDec","PostInc","Pragma","Precise","Precision","Precision","PrecisionQualifier","PrecisionQualifierData","Preprocessor","Preprocessor","PreprocessorData","PreprocessorDefine","PreprocessorDefineData","PreprocessorElseIf","PreprocessorElseIfData","PreprocessorError","PreprocessorErrorData","PreprocessorExtension","PreprocessorExtensionBehavior","PreprocessorExtensionBehaviorData","PreprocessorExtensionData","PreprocessorExtensionName","PreprocessorExtensionNameData","PreprocessorIf","PreprocessorIfData","PreprocessorIfDef","PreprocessorIfDefData","PreprocessorIfNDef","PreprocessorIfNDefData","PreprocessorInclude","PreprocessorIncludeData","PreprocessorLine","PreprocessorLineData","PreprocessorPragma","PreprocessorPragmaData","PreprocessorUndef","PreprocessorUndefData","PreprocessorVersion","PreprocessorVersionData","PreprocessorVersionProfile","PreprocessorVersionProfileData","RShift","RShift","ReadOnly","Relative","Require","Restrict","Return","Sample","Sampler","Sampler1D","Sampler1DArray","Sampler1DArrayShadow","Sampler1DShadow","Sampler2D","Sampler2DArray","Sampler2DArrayShadow","Sampler2DMs","Sampler2DMsArray","Sampler2DRect","Sampler2DRectShadow","Sampler2DShadow","Sampler3D","SamplerBuffer","SamplerCube","SamplerCubeArray","SamplerCubeArrayShadow","SamplerCubeShadow","SamplerShadow","Selection","SelectionRestStatement","SelectionRestStatementData","SelectionStatement","SelectionStatementData","Shared","Shared","Simple","Single","SingleDeclaration","SingleDeclarationData","SingleDeclarationNoType","SingleDeclarationNoTypeData","SmolStr","Smooth","Specific","Statement","Statement","StatementData","Storage","StorageQualifier","StorageQualifierData","Struct","StructFieldSpecifier","StructFieldSpecifierData","StructSpecifier","StructSpecifierData","Sub","Sub","SubpassInput","SubpassInputMs","Subroutine","Switch","SwitchStatement","SwitchStatementData","Ternary","TextRange","TextSize","Texture1D","Texture1DArray","Texture2D","Texture2DArray","Texture2DMs","Texture2DMsArray","Texture2DRect","Texture3D","TextureBuffer","TextureCube","TextureCubeArray","TranslationUnit","TypeName","TypeName","TypeNameData","TypeQualifier","TypeQualifierData","TypeQualifierSpec","TypeQualifierSpecData","TypeSpecifier","TypeSpecifier","TypeSpecifierData","TypeSpecifierNonArray","TypeSpecifierNonArrayData","UImage1D","UImage1DArray","UImage2D","UImage2DArray","UImage2DMs","UImage2DMsArray","UImage2DRect","UImage3D","UImageBuffer","UImageCube","UImageCubeArray","UInt","UIntConst","USampler1D","USampler1DArray","USampler2D","USampler2DArray","USampler2DMs","USampler2DMsArray","USampler2DRect","USampler3D","USamplerBuffer","USamplerCube","USamplerCubeArray","USubpassInput","USubpassInputMs","UVec2","UVec3","UVec4","Unary","UnaryOp","UnaryOpData","Undef","Uniform","Unnamed","Unsized","Variable","Varying","Vec2","Vec3","Vec4","Version","Void","Volatile","Warn","While","WriteOnly","Xor","Xor","add","add","add","add","add","add","add_assign","add_assign","array_spec","array_specifier","array_specifier","as_ident","as_ident_mut","as_ref","as_rs_ident","as_rs_ident","as_rs_ident","as_str","as_str","as_str","at","behavior","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builtin","checked_add","checked_add","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","command","cond","condition","condition","condition","contains","contains_inclusive","contains_range","content","cover","cover_offset","declare_var","default","default","default","default","deref","deref","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dimensions","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","empty","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_lexer","from_str","hash","hash","hash","hash","hash","hash","hash","hash","head","head","ident","ident","ident","ident","ident","ident","identifier","identifiers","ids","impl_node_content","initializer","initializer","intersect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_node","is_empty","is_empty","is_empty","is_heap_allocated","is_multi","is_single","len","len","len","line","map","map_spanned","message","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","new","new","new","new","new","new","new","new","new_end","new_inline","new_inline_from_ascii","new_start","number","of","ordering","parameters","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","post_expr","profile","prototype","qualifier","qualifier","qualifier","qualifiers","range","range","raw","rest","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_string_number","span","spanned","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start_bound","statement","statement_list","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sum","tail","text","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","up_to","variable","version","args","ident","ident","value","value"],"q":[[0,"glsl_lang_types"],[1,"glsl_lang_types::ast"],[2396,"glsl_lang_types::ast::PreprocessorDefineData"]],"d":["GLSL abstract syntax tree and grammar.","Specified with angle brackets.","<code>+</code> unary operator","<code>+</code> binary operator","<code>+=</code> assignment operator","All extensions you could ever imagine in your whole …","<code>&amp;&amp;</code> binary operator","<code>&amp;=</code> assignment operator","Type alias for <code>Node&lt;ArraySpecifierData&gt;</code>.","Dimensionality of an array.","Type alias for <code>Node&lt;ArraySpecifierDimensionData&gt;</code>.","One array specifier dimension.","Type alias for <code>Node&lt;ArrayedIdentifierData&gt;</code>.","An identifier with an optional array specifier.","An assignment is also an expression. Gathers an expression …","A variable declaration used as a condition","Type alias for <code>Node&lt;AssignmentOpData&gt;</code>.","All possible operators for assigning expressions.","<code>atomic_uint</code> type specifier","<code>attribute</code> storage qualifier","<code>bvec2</code> type specifier","<code>bvec3</code> type specifier","<code>bvec4</code> type specifier","A binary expression, gathering two expressions and a …","Type alias for <code>Node&lt;BinaryOpData&gt;</code>.","All binary operators that exist in GLSL.","<code>&amp;</code> binary operator","<code>|</code> binary operator","<code>^</code> binary operator","Type alias for <code>Node&lt;BlockData&gt;</code>.","Block declaration","A general purpose block, containing fields and possibly a …","<code>bool</code> type specifier","Boolean constant expression.","Add an array specifier to an expression.","<code>break</code> jump statement","<code>buffer</code> storage qualifier","<code>case:</code> case label","Type alias for <code>Node&lt;CaseLabelData&gt;</code>.","Switch statement case label","Case label statement.","<code>centroid</code> storage qualifier","<code>coherent</code> storage qualifier","An expression that contains several, separated with comma.","Type alias for <code>Node&lt;CommentData&gt;</code>.","A comment","<code>compatibility</code> version profile","<code>~</code> unary operator","Statement block","Type alias for <code>Node&lt;CompoundStatementData&gt;</code>.","Compound statement (with no new scope).","Type alias for <code>Node&lt;ConditionData&gt;</code>.","Condition.","<code>const</code> storage qualifier","<code>continue</code> jump statement","<code>core</code> version profile","<code>dmat2</code> type specifier","<code>dmat2x2</code> type specifier","<code>dmat2x3</code> type specifier","<code>dmat2x4</code> type specifier","<code>dmat3</code> type specifier","<code>dmat3x2</code> type specifier","<code>dmat3x3</code> type specifier","<code>dmat3x4</code> type specifier","<code>dmat4</code> type specifier","<code>dmat4x2</code> type specifier","<code>dmat4x3</code> type specifier","<code>dmat4x4</code> type specifier","<code>dvec2</code> type specifier","<code>dvec3</code> type specifier","<code>dvec4</code> type specifier","<code>--</code> unary operator","Type alias for <code>Node&lt;DeclarationData&gt;</code>.","Declaration","Declaration","Variable declaration","A declaration.","<code>default:</code> case label","<code>#define</code> preprocessor directive","<code>disable</code> preprocessor extension behavior","<code>discard</code> jump statement","<code>/</code> binary operator","<code>/=</code> assignment operator","<code>do</code> iteration statement","An expression associated with a field selection (struct).","<code>double</code> type specifier","Double precision floating expression.","The first argument is the body of the if, the rest is the …","<code>#else</code> preprocessor directive","<code>#elseif</code> preprocessor directive","<code>enable</code> preprocessor extension behavior","<code>#endif</code> preprocessor directive","<code>==</code> binary operator","<code>=</code> assignment operator","<code>#error</code> preprocessor directive","<code>es</code> version profile","<code>[expr]</code> dimension","Type alias for <code>Node&lt;ExprData&gt;</code>.","Expression used for the function name","An expression","The most general form of an expression.","Type alias for <code>Node&lt;ExprStatementData&gt;</code>.","Expression statement.","Expression statement","Expression","<code>#extension</code> preprocessor directive","Type alias for <code>Node&lt;ExternalDeclarationData&gt;</code>.","External declaration.","Unique file identifier","<code>flat</code> interpolation qualifier","<code>float</code> type specifier","Single precision floating expression.","<code>for</code> iteration statement","Type alias for <code>Node&lt;ForInitStatementData&gt;</code>.","For init statement.","Type alias for <code>Node&lt;ForRestStatementData&gt;</code>.","For init statement.","Type alias for <code>Node&lt;FullySpecifiedTypeData&gt;</code>.","Fully specified type.","A functional call. It has a function identifier and a list …","Type alias for <code>Node&lt;FunIdentifierData&gt;</code>.","Function identifier.","Type alias for <code>Node&lt;FunctionDefinitionData&gt;</code>.","Function definition","Function definition.","A preprocessor function definition","Type alias for <code>Node&lt;FunctionParameterDeclarationData&gt;</code>.","Function parameter declaration.","Type alias for <code>Node&lt;FunctionParameterDeclaratorData&gt;</code>.","Function parameter declarator.","Type alias for <code>Node&lt;FunctionPrototypeData&gt;</code>.","Function prototype declaration","Function prototype.","<code>&gt;</code> binary operator","<code>&gt;=</code> binary operator","<code>high</code> precision qualifier","<code>iimage1D</code> type specifier","<code>iimage1DArray</code> type specifier","<code>iimage2D</code> type specifier","<code>iimage2DArray</code> type specifier","<code>iimage2DMS</code> type specifier","<code>iimage2DMSArray</code> type specifier","<code>iimage2DRect</code> type specifier","<code>iimage3D</code> type specifier","<code>iimageBuffer</code> type specifier","<code>iimageCube</code> type specifier","<code>iimageCubeArray</code> type specifier","<code>isampler1D</code> type specifier","<code>isampler1DArray</code> type specifier","<code>isampler2D</code> type specifier","<code>isampler2DArray</code> type specifier","<code>isampler2DMS</code> type specifier","<code>isampler2DMSArray</code> type specifier","<code>isampler2DRect</code> type specifier","<code>isampler3D</code> type specifier","<code>isamplerBuffer</code> type specifier","<code>isamplerCube</code> type specifier","<code>isamplerCubeArray</code> type specifier","<code>isubpassInput</code> type specifier","<code>isubpassInputMs</code> type specifier","<code>itexture1D</code> type specifier","<code>itexture1DArray</code> type specifier","<code>itexture2D</code> type specifier","<code>itexture2DArray</code> type specifier","<code>itexture2DMs</code> type specifier","<code>itexture2DMsArray</code> type specifier","<code>itexture2DRect</code> type specifier","<code>itexture3D</code> type specifier","<code>itextureBuffer</code> type specifier","<code>itextureCube</code> type specifier","<code>itextureCubeArray</code> type specifier","<code>ivec2</code> type specifier","<code>ivec3</code> type specifier","<code>ivec4</code> type specifier","Type alias for <code>Node&lt;IdentifierData&gt;</code>.","An <code>ident = expr</code> layout qualifier","A generic identifier.","<code>#if</code> preprocessor directive","<code>#ifdef</code> preprocessor directive","<code>#ifndef</code> preprocessor directive","<code>image1D</code> type specifier","<code>image1DArray</code> type specifier","<code>image2D</code> type specifier","<code>image2DArray</code> type specifier","<code>image2DMS</code> type specifier","<code>image2DMSArray</code> type specifier","<code>image2DRect</code> type specifier","<code>image3D</code> type specifier","<code>imageBuffer</code> type specifier","<code>imageCube</code> type specifier","<code>imageCubeArray</code> type specifier","<code>in</code> storage qualifier","<code>inout</code> storage qualifier","<code>++</code> unary operator","<code>#include</code> preprocessor directive","Type alias for <code>Node&lt;InitDeclaratorListData&gt;</code>.","List of declarators and initializers","Init declarator list.","Type alias for <code>Node&lt;InitializerData&gt;</code>.","Initializer.","<code>int</code> type specifier","Integral constant expression.","Interpolation qualifier","Type alias for <code>Node&lt;InterpolationQualifierData&gt;</code>.","Interpolation qualifier.","<code>invariant</code> qualifier","Invariant declaration","Iteration statement","Type alias for <code>Node&lt;IterationStatementData&gt;</code>.","Iteration statement.","Jump statement","Type alias for <code>Node&lt;JumpStatementData&gt;</code>.","Jump statement.","<code>&lt;&lt;</code> binary operator","<code>&lt;&lt;=</code> assignment operator","Layout qualifier","Type alias for <code>Node&lt;LayoutQualifierData&gt;</code>.","Layout qualifier.","Type alias for <code>Node&lt;LayoutQualifierSpecData&gt;</code>.","Layout qualifier spec.","<code>#line</code> preprocessor directive","Multiple initializer","<code>low</code> precision qualifier","<code>&lt;</code> binary operator","<code>&lt;=</code> binary operator","<code>mat2</code> type specifier","<code>mat2x2</code> type specifier","<code>mat2x3</code> type specifier","<code>mat2x4</code> type specifier","<code>mat3</code> type specifier","<code>mat3x2</code> type specifier","<code>mat3x3</code> type specifier","<code>mat3x4</code> type specifier","<code>mat4</code> type specifier","<code>mat4x2</code> type specifier","<code>mat4x3</code> type specifier","<code>mat4x4</code> type specifier","<code>medium</code> precision qualifier","<code>-</code> unary operator","<code>%</code> binary operator","<code>%=</code> assignment operator","<code>*</code> binary operator","<code>*</code> assignment operator","Multi-line comment","Named parameter","<code>noperspective</code> interpolation qualifier","A syntax node with span information","Trait for AST node contents.","Derives an implementation of <code>NodeContentDisplay</code> for the …","Trait for displaying a syntax node","Span information for a node, constructed from a pair of …","<code>!=</code> binary operator","<code>!</code> unary operator","A preprocessor definition","<code>||</code> binary operator","<code>|=</code> assignment operator","<code>out</code> storage qualifier","<code>patch</code> storage qualifier","Type alias for <code>Node&lt;PathData&gt;</code>.","A path literal.","Post-decrementation of an expression.","Post-incrementation of an expression.","<code>#pragma</code> preprocessor directive","<code>precise</code> qualifier","Precision qualifier","Precision declaration","Type alias for <code>Node&lt;PrecisionQualifierData&gt;</code>.","Precision qualifier.","Type alias for <code>Node&lt;PreprocessorData&gt;</code>.","Preprocessor directive","Some basic preprocessor directives.","Type alias for <code>Node&lt;PreprocessorDefineData&gt;</code>.","A #define preprocessor directive.","Type alias for <code>Node&lt;PreprocessorElseIfData&gt;</code>.","An #else preprocessor directive.","Type alias for <code>Node&lt;PreprocessorErrorData&gt;</code>.","An #error preprocessor directive.","Type alias for <code>Node&lt;PreprocessorExtensionData&gt;</code>.","Type alias for <code>Node&lt;PreprocessorExtensionBehaviorData&gt;</code>.","An #extension behavior annotation.","An #extension preprocessor directive.","Type alias for <code>Node&lt;PreprocessorExtensionNameData&gt;</code>.","An #extension name annotation.","Type alias for <code>Node&lt;PreprocessorIfData&gt;</code>.","An #if preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIfDefData&gt;</code>.","An #ifdef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIfNDefData&gt;</code>.","A #ifndef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIncludeData&gt;</code>.","An #include name annotation.","Type alias for <code>Node&lt;PreprocessorLineData&gt;</code>.","A #line preprocessor directive.","Type alias for <code>Node&lt;PreprocessorPragmaData&gt;</code>.","A #pragma preprocessor directive. Holds compiler-specific …","Type alias for <code>Node&lt;PreprocessorUndefData&gt;</code>.","A #undef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorVersionData&gt;</code>.","A #version preprocessor directive.","Type alias for <code>Node&lt;PreprocessorVersionProfileData&gt;</code>.","A #version profile annotation.","<code>&gt;&gt;</code> binary operator","<code>&gt;&gt;=</code> assignment operator","<code>readonly</code> storage qualifier","Specified with double quotes.","<code>require</code> preprocessor extension behavior","<code>restrict</code> storage qualifier","<code>return</code> jump statement","<code>sample</code> storage qualifier","<code>sampler</code> type specifier","<code>sampler1D</code> type specifier","<code>sampler1DArray</code> type specifier","<code>sampler1DArrayShadow</code> type specifier","<code>sampler1DShadow</code> type specifier","<code>sampler2D</code> type specifier","<code>sampler2DArray</code> type specifier","<code>sampler2DArrayShadow</code> type specifier","<code>sampler2DMS</code> type specifier","<code>sampler2DMSArray</code> type specifier","<code>sampler2DRect</code> type specifier","<code>sampler2DRectShadow</code> type specifier","<code>sampler2DShadow</code> type specifier","<code>sampler3D</code> type specifier","<code>samplerBuffer</code> type specifier","<code>samplerCube</code> type specifier","<code>samplerCubeArray</code> type specifier","<code>samplerCubeArrayShadow</code> type specifier","<code>samplerCubeShadow</code> type specifier","<code>samplerShadow</code> type specifier","<code>if/...</code> statement","Type alias for <code>Node&lt;SelectionRestStatementData&gt;</code>.","Selection rest statement.","Type alias for <code>Node&lt;SelectionStatementData&gt;</code>.","Selection statement.","<code>shared</code> storage qualifier","<code>shared</code> layout qualifier","Simple initializer","Single-line comment","Type alias for <code>Node&lt;SingleDeclarationData&gt;</code>.","Single declaration.","Type alias for <code>Node&lt;SingleDeclarationNoTypeData&gt;</code>.","A single declaration with implicit, already-defined type.","A <code>SmolStr</code> is a string type that has the following …","<code>smooth</code> interpolation qualifier","A specific extension.","Type alias for <code>Node&lt;StatementData&gt;</code>.","Body of the if.","Statement.","Storage qualifier","Type alias for <code>Node&lt;StorageQualifierData&gt;</code>.","Storage qualifier.","<code>struct</code> type specifier","Type alias for <code>Node&lt;StructFieldSpecifierData&gt;</code>.","Struct field specifier. Used to add fields to struct …","Type alias for <code>Node&lt;StructSpecifierData&gt;</code>.","Struct specifier. Used to create new, user-defined types.","<code>-</code> binary operator","<code>-=</code> assignment operator","<code>subpassInput</code> type specifier","<code>subpassInputMs</code> type specifier","<code>subroutine</code> storage qualifier","<code>switch</code> statement","Type alias for <code>Node&lt;SwitchStatementData&gt;</code>.","Switch statement.","A ternary conditional expression, gathering three …","A range in text, represented as a pair of <code>TextSize</code>.","A measure of text length. Also, equivalently, an index …","<code>texture1D</code> type specifier","<code>texture1DArray</code> type specifier","<code>texture2D</code> type specifier","<code>texture2DArray</code> type specifier","<code>texture2DMs</code> type specifier","<code>texture2DMsArray</code> type specifier","<code>texture2DRect</code> type specifier","<code>texture3D</code> type specifier","<code>textureBuffer</code> type specifier","<code>textureCube</code> type specifier","<code>textureCubeArray</code> type specifier","Starting rule.","Type alias for <code>Node&lt;TypeNameData&gt;</code>.","Raw type name","Any type name.","Type alias for <code>Node&lt;TypeQualifierData&gt;</code>.","Type qualifier.","Type alias for <code>Node&lt;TypeQualifierSpecData&gt;</code>.","Type qualifier spec.","Type alias for <code>Node&lt;TypeSpecifierData&gt;</code>.","Type name used for the function name (as a constructor)","Type specifier.","Type alias for <code>Node&lt;TypeSpecifierNonArrayData&gt;</code>.","Type specifier (non-array).","<code>uimage1D</code> type specifier","<code>uimage1DArray</code> type specifier","<code>uimage2D</code> type specifier","<code>uimage2DArray</code> type specifier","<code>uimage2DMS</code> type specifier","<code>uimage2DMSArray</code> type specifier","<code>uimage2DRect</code> type specifier","<code>uimage3D</code> type specifier","<code>uimageBuffer</code> type specifier","<code>uimageCube</code> type specifier","<code>uimageCubeArray</code> type specifier","<code>uint</code> type specifier","Unsigned integral constant expression.","<code>usampler1D</code> type specifier","<code>usampler1DArray</code> type specifier","<code>usampler2D</code> type specifier","<code>usampler2DArray</code> type specifier","<code>usampler2DMS</code> type specifier","<code>usampler2DMSArray</code> type specifier","<code>usampler2DRect</code> type specifier","<code>usampler3D</code> type specifier","<code>usamplerBuffer</code> type specifier","<code>usamplerCube</code> type specifier","<code>usamplerCubeArray</code> type specifier","<code>usubpassInput</code> type specifier","<code>usubpassInputMs</code> type specifier","<code>uvec2</code> type specifier","<code>uvec3</code> type specifier","<code>uvec4</code> type specifier","A unary expression, gathering a single expression and a …","Type alias for <code>Node&lt;UnaryOpData&gt;</code>.","All unary operators that exist in GLSL.","<code>#undef</code> preprocessor directive","<code>uniform</code> storage qualifier","Unnamed parameter","<code>[]</code> dimension","A variable expression, using an identifier.","<code>varying</code> storage qualifier","<code>vec2</code> type specifier","<code>vec3</code> type specifier","<code>vec4</code> type specifier","<code>#version</code> preprocessor directive","<code>void</code> type specifier","<code>volatile</code> storage qualifier","<code>warn</code> preprocessor extension behavior","<code>while</code> iteration statement","<code>writeonly</code> storage qualifier","<code>^^</code> binary operator","<code>^=</code> assignment operator","","","","","","","","","Attached array specification","Array part of the specifier","Array specification","Try to parse this function identifier as a raw identifier","Try to parse this function identifier as a mutable raw …","","Parses this identifier as a glsl-lang-quote Rust identifier","Try to parse this function identifier as a <code>glsl-lang-quote</code> …","Try to parse this function identifier as a <code>glsl-lang-quote</code> …","Returns this identifier as a string slice","","Return this type name as a string slice","Create a new <code>TextRange</code> with the given <code>offset</code> and <code>len</code> (…","Behavior for the extension","Body of the switch statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new file identifier for a built-in string","Add an offset to this range.","Checked addition. Returns <code>None</code> if overflow occurred.","Subtract an offset from this range.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raw pragma text","Condition to evaluate","Loop condition","Condition expression","Condition expression","Check if this range contains an offset.","Check if this range contains an offset.","Check if this range completely contains another range.","Contents of this syntax node","Extends the range to cover <code>other</code> as well.","Extends the range to cover <code>other</code> offsets as well.","Declare a new variable.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of all the dimensions – possibly unsized or …","Obtain a display wrapper for the current node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display the node’s children","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display extra information for the node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a zero-length range at the specified offset (…","Ending position of the node","","The end point of this range.","","","","","","Return the end of this span as a LexerPositionield specifications","Declared fields","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Create a new node span from two lexer positions","","","","","","","","","","First declaration","Expression to evaluate and switch on","Create a function identifier from an identifier","Raw identifier","Parameter name","Declared identifier","Identifier to test","Identifier to test","Associated identifiers","List of declared identifiers for this field","List of layout qualifiers","","Initializer expression","Initializer expression","The range covered by both ranges, if it exists. If the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the wrapped syntax node, discarding the span …","Convert the contents into a node","Check if this range is empty.","","Return true if this range is empty","","true if this comment is a multi-line comment","true if this comment is a single-line comment","The size of this range.","","Return the length of this span","Line index","Map this content of this node into a new node","Map this content of this node into a new node with the …","Error message","Name of the syntax node’s type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Structure name","Block name","Function name","Declared identifier","Identifier to undefine","Name of the target extension","Creates a new <code>TextRange</code> with the given <code>start</code> and <code>end</code> (…","","Creates a new instance of <code>TextSize</code> from a raw <code>u32</code>.","Create a new file identifier","Create a new syntax node with span information","Create a new node span","Create a new ArrayedIdentifier from a raw identifier and a …","Create a new FullySpecifiedType from a …","Return a 0-length span located at the end of the given …","Constructs inline variant of <code>SmolStr</code>.","","Return a 0-length span located at the start of the given …","Get the number behind this id, regardless of its type","The text size of some primitive text-like object.","Relative order of the two ranges (overlapping ranges are …","Function parameters","","","","","","","","Include path","Loop increment operation","Version profile","Function prototype","Type qualifiers for the field","Optional type qualifier","Block type qualifier","List of type qualifiers","Return the span range","","","Rest of the selection statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source id of the node","","","","","","","Return the source identifier for this node span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source index","Span in the input this node was parsed from","Add span information to a syntax node","Starting position of the node","","The start point of this range.","","","","","","Return the start of this span as a LexerPosition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Function body","List of statements","","","","","","","","","","Following declarations","Get the comment’s text, regardless of its typeype name portion of the specifier","Type of the field","Type specifier","Return type","Parameter type","Declaration type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a range up to the given end (<code>..end</code>).","Construct an <code>Expr::Variable(name)</code> from an identifier <code>name</code>","Version number","List of arguments for the function","Identifier for the definition","Identifier for the definition","Associated value","Associated value"],"i":[0,16,43,44,45,75,44,45,0,0,0,0,0,0,11,53,0,0,18,26,18,18,18,11,0,0,44,44,44,0,34,0,18,11,11,60,26,56,0,50,0,26,26,11,0,0,73,43,50,0,0,0,0,26,60,73,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,43,0,47,50,58,0,56,61,76,60,44,45,57,11,18,11,54,61,61,76,61,44,45,61,73,33,0,3,53,0,0,0,50,58,61,0,0,0,30,18,11,57,0,0,0,0,0,0,11,0,0,0,47,0,62,0,0,0,0,0,34,0,44,44,29,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,28,0,61,61,61,18,18,18,18,18,18,18,18,18,18,18,26,26,43,61,0,34,0,0,0,18,11,25,0,0,25,34,50,0,0,50,0,0,44,45,25,0,0,0,0,61,42,29,44,44,18,18,18,18,18,18,18,18,18,18,18,18,29,43,44,45,44,45,77,37,30,0,0,0,0,0,44,43,62,44,45,26,26,0,0,11,11,61,25,25,34,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,26,16,76,26,60,26,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,50,0,0,0,0,26,28,42,77,0,0,0,0,0,30,75,0,54,0,25,0,0,18,0,0,0,0,44,45,18,18,26,50,0,0,11,0,0,18,18,18,18,18,18,18,18,18,18,18,0,0,18,0,0,0,0,0,0,3,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,11,0,0,61,26,37,33,11,26,18,18,18,61,18,26,76,57,26,44,45,1,1,1,2,2,2,1,2,23,20,40,3,3,8,9,3,11,9,12,13,1,74,55,9,1,12,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,1,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,15,1,2,1,2,9,1,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,1,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,12,2,15,8,19,70,52,59,63,65,1,1,1,8,1,1,50,1,12,2,15,12,8,8,9,1,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,32,120,9,12,13,16,8,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,120,9,9,12,12,13,13,16,16,8,18,18,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,3,3,36,36,37,37,38,38,39,39,40,40,41,41,42,42,11,11,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,120,9,9,12,12,13,13,16,16,8,18,18,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,3,3,36,36,37,37,38,38,39,39,40,40,41,41,42,42,11,11,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,1,120,9,1,12,13,16,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,1,1,9,1,12,12,12,12,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,1,12,13,2,16,15,8,19,29,30,43,44,45,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,21,35,9,9,1,12,12,13,13,2,16,15,15,8,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,9,9,1,1,12,12,13,13,13,13,2,2,2,16,16,15,15,15,15,8,8,8,18,18,18,19,20,20,20,20,21,21,22,22,23,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,31,32,32,33,33,34,34,35,35,3,3,36,36,37,37,38,38,39,39,40,40,41,41,42,42,42,42,11,11,11,11,11,11,11,43,43,44,44,45,45,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,12,12,12,12,49,19,12,9,1,12,13,2,15,8,19,39,55,3,23,38,41,66,67,35,22,27,0,40,41,1,9,1,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,8,6,1,12,19,12,77,77,1,12,19,69,8,8,64,120,9,9,12,12,13,13,16,16,8,18,18,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,3,3,36,36,37,37,38,38,39,39,40,40,41,41,42,42,11,11,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,21,35,36,40,71,74,1,12,2,15,8,19,23,31,19,12,12,19,15,2,1,36,9,12,13,2,15,8,19,68,59,72,48,22,31,35,24,19,19,2,52,9,1,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,120,9,12,13,16,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,19,69,8,6,120,9,1,12,13,16,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,1,1,48,49,1,1,1,2,2,2,1,2,2,39,77,9,1,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,12,12,13,15,8,9,1,12,13,2,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,9,1,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,20,22,31,36,38,40,9,1,12,13,2,16,15,8,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,3,36,37,38,39,40,41,42,11,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,1,11,72,121,122,121,122,121],"fc":[1849],"p":[[3,"TextRange"],[3,"TextSize"],[4,"FunIdentifierData"],[6,"Identifier"],[4,"Option"],[8,"NodeContent"],[8,"AsRef"],[3,"Node"],[3,"IdentifierData"],[15,"str"],[4,"ExprData"],[3,"SmolStr"],[3,"TypeNameData"],[15,"u32"],[3,"FileId"],[4,"PathData"],[8,"Clone"],[4,"TypeSpecifierNonArrayData"],[3,"NodeSpan"],[3,"TypeSpecifierData"],[3,"StructSpecifierData"],[3,"StructFieldSpecifierData"],[3,"ArrayedIdentifierData"],[3,"TypeQualifierData"],[4,"TypeQualifierSpecData"],[4,"StorageQualifierData"],[3,"LayoutQualifierData"],[4,"LayoutQualifierSpecData"],[4,"PrecisionQualifierData"],[4,"InterpolationQualifierData"],[3,"FullySpecifiedTypeData"],[3,"ArraySpecifierData"],[4,"ArraySpecifierDimensionData"],[4,"DeclarationData"],[3,"BlockData"],[3,"FunctionPrototypeData"],[4,"FunctionParameterDeclarationData"],[3,"FunctionParameterDeclaratorData"],[3,"InitDeclaratorListData"],[3,"SingleDeclarationData"],[3,"SingleDeclarationNoTypeData"],[4,"InitializerData"],[4,"UnaryOpData"],[4,"BinaryOpData"],[4,"AssignmentOpData"],[3,"TranslationUnit"],[4,"ExternalDeclarationData"],[3,"FunctionDefinitionData"],[3,"CompoundStatementData"],[4,"StatementData"],[3,"ExprStatementData"],[3,"SelectionStatementData"],[4,"ConditionData"],[4,"SelectionRestStatementData"],[3,"SwitchStatementData"],[4,"CaseLabelData"],[4,"IterationStatementData"],[4,"ForInitStatementData"],[3,"ForRestStatementData"],[4,"JumpStatementData"],[4,"PreprocessorData"],[4,"PreprocessorDefineData"],[3,"PreprocessorElseIfData"],[3,"PreprocessorErrorData"],[3,"PreprocessorIfData"],[3,"PreprocessorIfDefData"],[3,"PreprocessorIfNDefData"],[3,"PreprocessorIncludeData"],[3,"PreprocessorLineData"],[3,"PreprocessorPragmaData"],[3,"PreprocessorUndefData"],[3,"PreprocessorVersionData"],[4,"PreprocessorVersionProfileData"],[3,"PreprocessorExtensionData"],[4,"PreprocessorExtensionNameData"],[4,"PreprocessorExtensionBehaviorData"],[4,"CommentData"],[4,"Ordering"],[8,"Ord"],[15,"bool"],[8,"Into"],[6,"ArraySpecifier"],[6,"Initializer"],[8,"Deserializer"],[4,"Result"],[8,"Deserialize"],[3,"NodeDisplayWrapper"],[8,"NodeContentDisplay"],[15,"usize"],[3,"Formatter"],[3,"Error"],[6,"Result"],[3,"LexerPosition"],[4,"Bound"],[3,"String"],[8,"PartialEq"],[8,"Display"],[8,"Debug"],[15,"never"],[6,"TypeName"],[6,"TypeSpecifierNonArray"],[6,"Expr"],[15,"f64"],[15,"i32"],[15,"f32"],[8,"IntoIterator"],[8,"Hasher"],[8,"Hash"],[8,"From"],[8,"FnOnce"],[15,"u8"],[15,"slice"],[8,"TextLen"],[8,"PartialOrd"],[8,"Serializer"],[8,"Serialize"],[8,"Iterator"],[3,"TryFromIntError"],[3,"TypeId"],[8,"NodeDisplay"],[13,"FunctionLike"],[13,"ObjectLike"]]},\
"lang_util":{"doc":"<code>lang-util</code> is a crate that implements utilities to parse …","t":"DCYDDDCYLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLALLLLAMLLLLLLMLLLLLLLLLLLLLLLALLLLLLLLLLLNNDINDGEDINNLLLLLLLLLLLLKLLLLFLLLLLLMLLLLLLLLLLLMKMLLLLLLLLLLLLLLLLLLLLMMMMMMRDRLLLLLLLLLLLLLLLLLLLLLLLLLLLIEIDDNNNILLLLLLLLLLLLLMMKLLMMLLLLLLLMMLLLLLLLLLLLLMLLLLLLLMMLLLMMLLMMKKLLLLLLLLLLLLLLLLLDIIIDAMMAKKKKKKKKMKMKDILLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLIIDLLLLMKKKKKKLLOLLKKLMLKKLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLMMLLLLLLLLLLIDKLLLLLLLLLLKMLKMLLLLLLKM","n":["FileId","NodeContent","NodeContentDisplay","SmolStr","TextRange","TextSize","Token","Token","add","add","add","add","add","add","add_assign","add_assign","as_str","at","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_sub","checked_sub","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","contains","contains_inclusive","contains_range","cover","cover_offset","default","default","default","deref","deserialize","deserialize","deserialize","display","display_children","display_children","display_extra","display_extra","empty","end","end","end","end_bound","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","error","file_id","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_str","hash","hash","hash","intersect","into","into","into","is_empty","is_empty","is_heap_allocated","len","len","located","name","name","new","new","new","new_inline","new_inline_from_ascii","node","of","ordering","partial_cmp","partial_cmp","position","raw","serialize","serialize","serialize","source_id","start","start","start","start_bound","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sum","to_owned","to_owned","to_owned","to_string","to_string","token","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","up_to","ExtraToken","InvalidToken","KindDisplay","LexicalError","LexicalError","ListDisplay","ParseError","ParseErrorKind","TokenDescription","TokenExt","UnrecognizedEof","UnrecognizedToken","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","description","eq","eq","equivalent","equivalent","error_location","fmt","fmt","fmt","fmt","fmt","fmt","formatted","from","from","from","from","from","from","hash","into","into","into","into","kinds","location","parser_token","partial_cmp","serialize","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","variant_name","error","expected","expected","token","token","BUILTIN_BIT","FileId","MAX_VALUE","borrow","borrow_mut","builtin","clone","clone_into","cmp","default","deserialize","eq","equivalent","fmt","fmt","from","from","from","from","hash","into","new","number","partial_cmp","serialize","to_owned","to_string","try_from","try_into","type_id","FileIdResolver","FileOverride","HasFileNumber","Located","LocatedBuilder","None","Number","Path","Resolver","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone_into","clone_into","col","column","column","column","current_file","current_file","current_file","current_file","current_file","default","default","eq","eq","equivalent","equivalent","file_override","file_override","file_override","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","inner","inner","into","into","into","into_inner","is_none","line","line_number","line_number","line_number","map","new","path","path","path","pos","pos","pos","pos","resolve","resolve","resolve","resolve_file","resolve_path","set_current_file","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Node","NodeContent","NodeContentDisplay","NodeDisplay","NodeDisplayWrapper","content","content","current_level","display","display","display_children","display_children","display_extra","display_extra","end","name","name","node","source_id","span","start","Node","NodeContent","as_ref","borrow","borrow_mut","clone","clone_into","cmp","content","deref","deref_mut","deserialize","display","display_children","display_extra","end","eq","equivalent","fmt","fmt","from","from","from","hash","into","into_inner","into_node","into_node","map","map_spanned","name","new","partial_cmp","serialize","source_id","span","spanned","spanned","start","to_owned","to_string","try_from","try_into","type_id","NodeContentDisplay","NodeDisplay","NodeDisplayWrapper","borrow","borrow_mut","clone","clone_into","current_level","display","display_children","display_children","display_extra","display_extra","end","fmt","fmt","forward_display","from","into","name","name","new","node","set_level","source_id","start","to_owned","to_string","try_from","try_into","type_id","LexerPosition","NodeSpan","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","deserialize","deserialize","end","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_lexer","hash","hash","into","into","is_empty","len","new","new","new_end","new_raw","new_start","offset","partial_cmp","partial_cmp","range","range","serialize","serialize","source_id","source_id","source_id","start","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Token","TokenDescriptor","all_tokens","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","hash","into","kinds","kinds","new","parser_token","parser_token","partial_cmp","serialize","to_owned","try_from","try_into","type_id","variant_name","variant_name"],"q":[[0,"lang_util"],[148,"lang_util::error"],[220,"lang_util::error::ParseErrorKind"],[225,"lang_util::file_id"],[255,"lang_util::located"],[343,"lang_util::node"],[364,"lang_util::node::content"],[408,"lang_util::node::display"],[439,"lang_util::position"],[496,"lang_util::token"]],"d":["Unique file identifier","","Derives an implementation of <code>NodeContentDisplay</code> for the …","A <code>SmolStr</code> is a string type that has the following …","A range in text, represented as a pair of <code>TextSize</code>.","A measure of text length. Also, equivalently, an index …","","Derive <code>lang_util::error::Token</code> for an enum usable with …","","","","","","","","","","Create a new <code>TextRange</code> with the given <code>offset</code> and <code>len</code> (…","","","","","","","","Add an offset to this range.","Checked addition. Returns <code>None</code> if overflow occurred.","Subtract an offset from this range.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","","","","Check if this range contains an offset.","Check if this range contains an offset.","Check if this range completely contains another range.","Extends the range to cover <code>other</code> as well.","Extends the range to cover <code>other</code> offsets as well.","","","","","","","","","","","","","Create a zero-length range at the specified offset (…","The end point of this range.","","","","","","","","","","","","","","Error type definitions","File identifier definition","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","The range covered by both ranges, if it exists. If the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if this range is empty.","","","The size of this range.","","Located type definition","","","Creates a new <code>TextRange</code> with the given <code>start</code> and <code>end</code> (…","","Creates a new instance of <code>TextSize</code> from a raw <code>u32</code>.","Constructs inline variant of <code>SmolStr</code>.","","AST type definitions","The text size of some primitive text-like object.","Relative order of the two ranges (overlapping ranges are …","","","Input position representation types","","","","","","The start point of this range.","","","","","","","","","","","","","","","","","","Token derive support definitions","","","","","","","","","","","Create a range up to the given end (<code>..end</code>).","Extra token after input","An invalid token was encountered during lexical analysis","","An error produced by lexical analysis","Lexical analysis error","","A parsing error wrapped from lalrpop_util’s error type","Parsing error kind","Information about a lexed token","Methods provided for all Token implementations","Unexpected end of file","Unexpected token","","","","","","","","","","","","","Return a descriptor for the current token","","","","","Return the LexerLocation of a lalrpop_util::ParseError","","","","","","","String representation of the lexed token","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","List of kinds this token belongs to","Return the location at which this error occurred","Parser token name","","","","","","","","","","","","","","","","","","","","","Variant name","Lexical error","List of expected token names","List of expected token names","The unexpected token","The extra token","","Unique file identifier","","","","Create a new file identifier for a built-in string","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Create a new file identifier","Get the number behind this id, regardless of its type","","","","","","","","Trait for resolving file identifiers to file names","Represents a file location override","Trait for objects that can return the current file number","Wraps an object with location data","Builder for a Located struct","No override","Override with a raw file number","Override with a path","Trait for objects that can resolve offsets to line and …","","","","","","","Create a builder for this located type","","","","","Get the column number for this location","Set the resolved column number","Resolved column number","Resolved column number","Return the current file identifier","Set the file identifier","Get the current file identifier","File identifier for the error","File identifier for the error","","","","","","","Set the source file override","Overriden file location","Overriden file location","Build the final Located object from the given inner object","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Return a reference to the inner value","Inner error, without location information","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inner value","Return true if this file override is empty","Get the line number for this location","Set the resolved line number","Resolved line number","Resolved line number","Transform the inner value wrapped by this instance","Create a new builder for Located with default values","Set the source path","Path corresponding to the file identifier","Path corresponding to the file identifier","Set the raw position","Get the raw position into the source","Position at which the error occurred","Position at which the error occurred","Resolve the raw offset into a (line, column) tuple","Return the path corresponding to the FileId, if known","Resolve the raw offset (see LocatedBuilder::pos) to line …","Resolve the raw offset (see LocatedBuilder::pos) to line …","Resolve the given file id into a path name, and store it …","Set the current file identifier","","","","","","","","","","","","","","A syntax node with span information","Trait for AST node contents.","Trait for displaying an AST node’s content","Trait for displaying a syntax node","A wrapper for a syntax node to be displayed","","Contents of this syntax node","","","Obtain a display wrapper for the current node","Display the node’s children","Display the node’s children","Display extra information for the node","Display extra information for the node","Ending position of the node","Name of the node","Name of the syntax node’s type","","Source id of the node","Span in the input this node was parsed from","Starting position of the node","A syntax node with span information","Trait for AST node contents.","","","","","","","Contents of this syntax node","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Return the wrapped syntax node, discarding the span …","Convert the contents into a node","Convert the contents into a node","Map this content of this node into a new node","Map this content of this node into a new node with the …","","Create a new syntax node with span information","","","","Span in the input this node was parsed from","Add span information to a syntax node","Add span information to a syntax node","","","","","","","Trait for displaying an AST node’s content","Trait for displaying a syntax node","A wrapper for a syntax node to be displayed","","","","","","Obtain a display wrapper for the current node","Display the node’s children","Display the node’s children","Display extra information for the node","Display extra information for the node","Ending position of the node","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Name of the node","Name of the syntax node’s type","Create a new NodeDisplayWrapper","","Set the level of this display wrapper","Source id of the node","Starting position of the node","","","","","","A position in the lexer’s input","Span information for a node, constructed from a pair of …","","","","","","","","","","","","","","Return the end of this span as a LexerPosition","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new node span from two lexer positions","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if this range is empty","Return the length of this span","Create a new LexerPosition","Create a new node span","Return a 0-length span located at the end of the given …","Create a new LexerPosition","Return a 0-length span located at the start of the given …","Raw byte offset","","","Return the span range","Range of the node in the input slice","","","Return the source identifier for this node span","Source id","The index of this span into the list of parsed units. This …","Return the start of this span as a LexerPosition","","","","","","","","","","Trait to implement for a token to be used with <code>lang_util</code>’…","Information about a known token","Return the descriptions for all known tokens","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Return the token kinds this token belongs to","List of kinds this token belongs to","Create a new token descriptor","Return the name used by the lalrpop parser for this token","Parser token name","","","","","","","Return the variant name of the current token","Variant name"],"i":[0,0,0,0,0,0,0,0,1,1,1,2,2,2,1,2,3,1,1,3,3,2,1,3,2,1,2,1,2,1,3,2,1,3,2,3,2,1,1,1,1,1,1,3,2,3,1,3,2,3,3,3,3,3,1,1,3,1,1,1,3,3,3,3,3,2,1,3,2,0,0,1,3,3,2,1,1,3,3,2,2,2,3,3,3,3,3,1,3,2,1,1,3,2,1,3,3,1,3,0,3,3,1,3,2,3,3,0,2,1,3,2,0,2,1,3,2,3,1,3,1,1,1,1,1,2,2,2,1,2,2,1,3,2,3,3,0,1,3,2,2,1,3,2,1,3,2,1,34,34,0,0,34,0,0,0,0,0,34,34,37,38,31,34,37,38,31,34,31,34,31,34,66,31,34,31,34,0,37,38,31,31,34,34,31,37,38,31,31,34,34,31,37,38,31,34,31,33,31,31,31,31,34,37,38,31,34,37,38,31,34,37,38,31,34,37,38,31,34,31,67,68,69,69,70,0,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,0,0,42,42,42,0,42,41,43,42,41,43,43,42,43,42,43,43,41,41,43,50,41,43,41,43,42,41,42,43,42,43,41,41,43,41,42,42,43,43,42,42,42,42,41,43,43,43,42,41,43,43,42,43,41,41,43,43,41,41,41,43,41,43,41,43,49,51,41,41,41,43,42,43,42,43,42,41,43,42,41,43,42,41,43,0,0,0,0,0,0,53,10,0,63,56,63,56,63,63,56,63,10,63,53,63,0,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,52,52,53,53,53,53,53,53,53,53,52,52,53,53,53,53,53,53,0,0,0,10,10,10,10,10,63,56,63,56,63,63,10,10,0,10,10,56,63,10,10,10,63,63,10,10,10,10,10,0,0,20,17,20,17,20,17,20,17,20,17,20,20,17,17,20,17,20,17,20,20,17,20,17,17,20,17,20,17,17,17,20,17,17,20,17,20,20,17,17,17,20,17,17,20,17,17,20,17,20,20,17,20,17,20,17,0,0,40,65,65,65,65,65,65,65,65,65,65,40,65,65,40,65,65,65,65,65,65,65,40,65],"f":[0,0,0,0,0,0,0,0,[1,1],[[1,2],1],[[1,2],1],[[2,2],2],[[2,2],2],[2,2],[1],[2],[3,4],[[2,2],1],[[]],[[]],[3,4],[[]],[[]],[[]],[[]],[[1,2],[[5,[1]]]],[[2,2],[[5,[2]]]],[[1,2],[[5,[1]]]],[[2,2],[[5,[2]]]],[1,1],[3,3],[2,2],[[]],[[]],[[]],[[3,3],6],[[2,2],6],[[1,2],7],[[1,2],7],[[1,1],7],[[1,1],1],[[1,2],1],[[],1],[[],3],[[],2],[3,4],[8,[[9,[1]]]],[8,[[9,[3]]]],[8,[[9,[2]]]],[[],10],[[3,11,12],13],[[11,12],[[9,[14]]]],[[3,12],13],[12,[[9,[14]]]],[2,1],[1,2],[[],[[5,[2]]]],0,[1,[[15,[2]]]],[[1,1],7],[[3,16],7],[[3,4],7],[[3,16],7],[[3,4],7],[[3,3],7],[[2,2],7],[[],7],[[],7],[[],7],0,0,[[1,12],[[9,[14]]]],[[3,12],[[9,[14]]]],[[3,12],[[9,[14]]]],[[2,12],[[9,[14]]]],[17,1],[[]],[[[18,[4]]],3],[[]],[[]],[19,2],[20,2],[21,3],[21,3],[21,3],[21,3],[4,[[9,[3]]]],[[1,22]],[[3,22]],[[2,22]],[[1,1],[[5,[1]]]],[[]],[[]],[[]],[1,7],[3,7],[3,7],[1,2],[3,11],0,[[],[[5,[4]]]],[[],[[5,[4]]]],[[2,2],1],[[[18,[4]]],3],[19,2],[4,3],[[11,[24,[23]]],3],0,[25,2],[[1,1],6],[[3,3],[[5,[6]]]],[[2,2],[[5,[6]]]],0,0,[[1,26],9],[[3,26],9],[[2,26],9],[[],[[5,[27]]]],[1,2],[[],[[5,[2]]]],0,[1,[[15,[2]]]],[[1,2],1],[[1,2],1],[1,1],[2,2],[[2,2],2],[[2,2],2],[1],[2],[28,2],[[]],[[]],[[]],[3,16],[[],16],0,[[],9],[[],9],[11,[[9,[2,29]]]],[[],9],[[],9],[[],9],[[],9],[[],30],[[],30],[[],30],[2,1],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[[[34,[[0,[32,33]]]]],[[34,[[0,[32,33]]]]]],[[]],[[]],[[],31],[[31,31],7],[[[34,[[0,[35,33]]]],[34,[[0,[35,33]]]]],7],[[],7],[[],7],[[[36,[20,33]]]],[[37,12],13],[[38,12],13],[[31,12],13],[[31,12],13],[[[34,[[0,[39,33]]]],12],13],[[[34,[33]],12],13],0,[[]],[[]],[40,31],[[]],[[]],[[[36,[20,40,33]]],[[34,[33]]]],[[31,22]],[[]],[[]],[[]],[[]],0,[[]],0,[[31,31],[[5,[6]]]],[[31,26],9],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],30],[[],30],[[],30],[[],30],0,0,0,0,0,0,0,0,0,[[]],[[]],[19,27],[27,27],[[]],[[27,27],6],[[],27],[8,[[9,[27]]]],[[27,27],7],[[],7],[[27,12],13],[[27,12],13],[17,27],[19,27],[[]],[20,27],[[27,22]],[[]],[19,27],[27,19],[[27,27],[[5,[6]]]],[[27,26],9],[[]],[[],16],[[],9],[[],9],[[],30],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],41],[42,42],[[[43,[32]]],[[43,[32]]]],[[]],[[]],[43,19],[[41,19],41],0,0,[[],27],[[41,[44,[27]]],41],[43,[[5,[27]]]],0,0,[[],42],[[],41],[[42,42],7],[[[43,[35]],[43,[35]]],7],[[],7],[[],7],[[41,[44,[42]]],41],0,0,[41,43],[[42,12],13],[[42,12],13],[[[43,[39]],12],13],[[[43,[45]],12],13],[[]],[19,42],[16,42],[[],42],[[]],[[]],[43],0,[[]],[[]],[[]],[43],[42,7],[43,19],[[41,19],41],0,0,[[43,46],43],[[],41],[[41,[44,[47]]],41],0,0,[[41,[44,[1]]],41],[43,1],0,0,[2],[27,[[5,[48]]]],[[41,49],41],[[41,[0,[49,50]]],41],[[41,51],41],[[43,27]],[[]],[[]],[[],16],[[],16],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],30],[[],30],[[],30],0,0,0,0,0,0,0,0,0,[[],10],[[11,12],13],[[11,12],13],[12,13],[12,13],[[],[[5,[2]]]],[[],[[5,[4]]]],[[],[[5,[4]]]],0,[[],[[5,[27]]]],0,[[],[[5,[2]]]],0,0,[[[53,[[0,[52,18]]]]]],[[]],[[]],[[[53,[[0,[32,52]]]]],[[53,[[0,[32,52]]]]]],[[]],[[[53,[[0,[52,54]]]],[53,[[0,[52,54]]]]],6],0,[[[53,[52]]]],[[[53,[52]]]],[8,[[9,[[53,[[0,[55,52]]]]]]]],[[[53,[[0,[56,52]]]]],[[10,[[53,[[0,[56,52]]]]]]]],[[[53,[[0,[56,52]]]],11,12],13],[[[53,[[0,[56,52]]]],12],13],[[[53,[[0,[56,52]]]]],[[5,[2]]]],[[[53,[[0,[52,35]]]],[53,[[0,[52,35]]]]],7],[[],7],[[[53,[[0,[52,45]]]],12],13],[[[53,[[0,[39,52]]]],12],13],[[]],[52,[[53,[52]]]],[57],[[[53,[[0,[52,58]]]],22]],[[]],[[[53,[52]]],52],[[],[[53,[[0,[59,52]]]]]],[[],[[53,[[0,[59,52]]]]]],[[[53,[52]],46],[[53,[52]]]],[[[53,[52]],46],[[53,[52]]]],[[],[[5,[4]]]],[[52,[5,[17]]],[[53,[52]]]],[[[53,[[0,[52,60]]]],[53,[[0,[52,60]]]]],[[5,[6]]]],[[[53,[[0,[61,52]]]],26],9],[[[53,[[0,[56,52]]]]],[[5,[27]]]],0,[[20,20],53],[[20,20],53],[[[53,[[0,[56,52]]]]],[[5,[2]]]],[[]],[[],16],[[],9],[[],9],[[],30],0,0,0,[[]],[[]],[[[10,[[0,[32,62]]]]],[[10,[[0,[32,62]]]]]],[[]],0,[[],10],[[11,12],13],[[11,12],13],[12,13],[12,13],[[],[[5,[2]]]],[[[10,[4]],12],13],[[[10,[63]],12],13],0,[[]],[[]],[[],[[5,[4]]]],[[],[[5,[4]]]],[[4,11],[[10,[4]]]],0,[[10,11],10],[[],[[5,[27]]]],[[],[[5,[2]]]],[[]],[[],16],[[],9],[[],9],[[],30],0,0,[[]],[[]],[[]],[[]],[20,20],[17,17],[[]],[[]],[[20,20],6],[[17,17],6],[[],20],[8,[[9,[20]]]],[8,[[9,[17]]]],[17,20],[[20,20],7],[[17,17],7],[[],7],[[],7],[[20,12],13],[[20,12],13],[[17,12],13],[[]],[[]],[[20,20],17],[[20,22]],[[17,22]],[[]],[[]],[17,7],[17,2],[[27,2],20],[[27,1],17],[[27,11],17],[[27,[64,[19]]],20],[27,17],0,[[20,20],[[5,[6]]]],[[17,17],[[5,[6]]]],[17,1],0,[[20,26],9],[[17,26],9],[17,27],0,0,[17,20],[[]],[[]],[[],16],[[],9],[[],9],[[],9],[[],9],[[],30],[[],30],0,0,[[],[[24,[65]]]],[[]],[[]],[65,65],[[]],[[65,65],7],[[],7],[[65,12],13],[[]],[[65,22]],[[]],[[],[[24,[4]]]],0,[[4,4,[24,[4]]],65],[[],4],0,[[65,65],[[5,[6]]]],[[65,26],9],[[]],[[],9],[[],9],[[],30],[[],4],0],"c":[106],"p":[[3,"TextRange"],[3,"TextSize"],[3,"SmolStr"],[15,"str"],[4,"Option"],[4,"Ordering"],[15,"bool"],[8,"Deserializer"],[4,"Result"],[3,"NodeDisplayWrapper"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Bound"],[3,"String"],[3,"NodeSpan"],[8,"AsRef"],[15,"u32"],[3,"LexerPosition"],[8,"IntoIterator"],[8,"Hasher"],[15,"u8"],[15,"slice"],[8,"TextLen"],[8,"Serializer"],[3,"FileId"],[8,"Iterator"],[3,"TryFromIntError"],[3,"TypeId"],[3,"TokenDescription"],[8,"Clone"],[8,"LexicalError"],[4,"ParseErrorKind"],[8,"PartialEq"],[4,"ParseError"],[3,"ListDisplay"],[3,"KindDisplay"],[8,"Debug"],[8,"Token"],[3,"LocatedBuilder"],[4,"FileOverride"],[3,"Located"],[8,"Into"],[8,"Display"],[8,"FnOnce"],[3,"PathBuf"],[3,"Path"],[8,"Resolver"],[8,"HasFileNumber"],[8,"FileIdResolver"],[8,"NodeContent"],[3,"Node"],[8,"Ord"],[8,"Deserialize"],[8,"NodeContentDisplay"],[15,"never"],[8,"Hash"],[8,"From"],[8,"PartialOrd"],[8,"Serialize"],[8,"Sized"],[8,"NodeDisplay"],[8,"TryInto"],[3,"TokenDescriptor"],[8,"TokenExt"],[13,"LexicalError"],[13,"UnrecognizedEof"],[13,"UnrecognizedToken"],[13,"ExtraToken"]]},\
"lang_util_derive":{"doc":"<code>lang-util-derive</code> is a proc-macro crate providing …","t":"YYAADDDDDDLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLMMMMLLLLLLFMFMLLLLLLLLLLLLLLLLLLEENNNNNNDDGDDDDLMMMMMLLLLLLLLLLLLLLLLMMLLFLMMLLMLLLLLLLLLLLLLLLLLLMLMMMLLLLLLLLMLLFFLLLFMMFLLLLLLLLLLLLLLLLLLLLLLLLML","n":["NodeContentDisplay","Token","node_display","token","DisplayFieldOpts","DisplayVariantOpts","NodeDisplay","NodeDisplayField","NodeDisplayOpts","NodeDisplayVariant","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","display","display","display","extra","extra","fields","from","from","from","from","from","from","from_derive_input","from_field","from_list","from_list","from_list","from_variant","generics","ident","ident","ident","into","into","into","into","into","into","is_unit_enum","leaf","node_display","skip","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","AsParser","AsParserError","InvalidAs","InvalidTokenAttribute","MissingDisplayImpl","NoTokenOrAs","Path","RawString","Token","TokenAttr","TokenAttrTy","TokenDisplay","TokenOpts","TokenVariant","TokenVariantField","all_tokens_arm","args","as_parser","as_parser","attrs","base_ident","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","data","display","display_arm","display_arm_body","display_impl","empty_variant_header","fallback_token","fields","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from_derive_input","from_field","from_list","from_list","from_list","from_nested_meta","from_string","from_string","from_variant","generics","get_prefixed_fmt","ident","ident","ident","into","into","into","into","into","into","into","into","kinds","kinds_arm","kinds_body","parse_as_parser","parse_token_attr","parser_token_arm","parser_token_body","to_string","token","token","token","token_impl","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant","variant_name_arm"],"q":[[0,"lang_util_derive"],[4,"lang_util_derive::node_display"],[75,"lang_util_derive::token"]],"d":["Derives an implementation of <code>NodeContentDisplay</code> for the …","Derive <code>lang_util::error::Token</code> for an enum usable with …","","","","","","","","","","","","","","","","","","","","","","","","","","","Use this field when formatting extra data","Value to use as extra format instead of the variant name","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Skip formatting this field or variant","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,2,8,12,3,5,1,2,8,12,3,5,1,2,3,8,12,5,1,2,12,1,2,8,12,3,5,5,8,1,2,3,12,5,8,12,5,1,2,8,12,3,5,0,3,0,1,1,2,8,12,3,5,1,2,8,12,3,5,1,2,8,12,3,5,0,0,21,21,21,21,28,28,0,0,0,0,0,0,0,18,26,18,30,30,18,26,27,28,18,25,30,21,24,26,27,28,18,25,30,21,24,24,30,18,18,0,18,30,30,21,21,26,26,27,28,18,18,25,30,21,24,24,25,26,27,28,28,26,28,30,24,18,25,30,24,26,27,28,18,25,30,21,24,30,18,18,0,0,18,18,21,0,27,18,0,26,27,28,18,25,30,21,24,26,27,28,18,25,30,21,24,26,27,28,18,25,30,21,24,18,18],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[4,[[6,[5]]]],[7,[[6,[8]]]],[[[10,[9]]],[[6,[1]]]],[[[10,[9]]],[[6,[2]]]],[[[10,[9]]],[[6,[3]]]],[11,[[6,[12]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[13,14],0,[15,15],0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[18,19],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[18,19],[[18,[10,[20]]],19],[[20,19,[10,[18]]],19],[18,19],0,0,[[21,22],23],[[21,22],23],0,[[]],[[]],[[]],[[],18],[[]],[[]],[[]],[[]],[[]],[4,[[6,[24]]]],[7,[[6,[25]]]],[[[10,[9]]],[[6,[26]]]],[[[10,[9]]],[[6,[27]]]],[[[10,[9]]],[[6,[28]]]],[9,[[6,[28]]]],[29,[[6,[26]]]],[29,[[6,[28]]]],[11,[[6,[30]]]],0,[[18,29],31],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[18,19],[18,19],[[30,32],[[16,[31,21]]]],[30,32],[18,19],[18,19],[[],31],[15,15],0,0,[[20,19,[10,[18]]],19],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,[18,19]],"c":[],"p":[[3,"DisplayFieldOpts"],[3,"DisplayVariantOpts"],[3,"NodeDisplay"],[3,"DeriveInput"],[3,"NodeDisplayOpts"],[6,"Result"],[3,"Field"],[3,"NodeDisplayField"],[4,"NestedMeta"],[15,"slice"],[3,"Variant"],[3,"NodeDisplayVariant"],[3,"DataEnum"],[15,"bool"],[3,"TokenStream"],[4,"Result"],[3,"TypeId"],[3,"Token"],[3,"TokenStream"],[3,"Ident"],[4,"AsParserError"],[3,"Formatter"],[6,"Result"],[3,"TokenOpts"],[3,"TokenVariantField"],[3,"TokenDisplay"],[3,"TokenAttr"],[4,"AsParser"],[15,"str"],[3,"TokenVariant"],[3,"String"],[4,"Option"]]},\
"lang_util_dev":{"doc":"lang-util-dev provides utilities for developing language …","t":"AIDKLLLLLMLLLMMLLLL","n":["test_util","PathKey","Paths","all","borrow","borrow_mut","finish","from","into","local_results","local_results_prefix","new","path","paths","public_results","public_results_prefix","try_from","try_into","type_id"],"q":[[0,"lang_util_dev"],[1,"lang_util_dev::test_util"]],"d":["Testing utilities","Key for differentiating between kinds of test outputs","Test output manager","Return the list of all possible test output kinds","","","Complete the testing process for this test case","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Local (generated) test results","Return the directory name for the local results","Create a new output manager for the given input path","Obtain a path for a given output kind","Computed file names","Valid (bumped) test results","Return the directory name for the public results","","",""],"i":[0,0,0,2,3,3,3,3,3,3,2,3,3,3,3,2,3,3,3],"f":[0,0,0,[[],1],[[]],[[]],[[[3,[2]]]],[[]],[[]],0,[[],4],[5,[[6,[[3,[2]]]]]],[[[3,[2]],2],7],0,0,[[],4],[[],8],[[],8],[[],9]],"c":[],"p":[[15,"slice"],[8,"PathKey"],[3,"Paths"],[15,"str"],[3,"Path"],[6,"Result"],[3,"PathBuf"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
