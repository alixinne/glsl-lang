(function() {var implementors = {};
implementors["glsl_lang"] = [{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdentifierData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNameData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSpecifierNonArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSpecifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StructSpecifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StructFieldSpecifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrayedIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeQualifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeQualifierSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StorageQualifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LayoutQualifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LayoutQualifierSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrecisionQualifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterpolationQualifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FullySpecifiedType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArraySpecifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArraySpecifierDimension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeclarationData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionPrototypeData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionParameterDeclarationData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionParameterDeclarator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitDeclaratorList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SingleDeclaration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SingleDeclarationNoType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Initializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssignmentOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslationUnit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExternalDeclarationData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FunctionDefinitionData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompoundStatementData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatementData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectionStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Condition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelectionRestStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SwitchStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseLabel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IterationStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForInitStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForRestStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JumpStatement","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorDefine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorElseIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorIfDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorIfNDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorInclude","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorLine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorPragma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorUndef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorVersionProfile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorExtension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorExtensionName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorExtensionBehavior","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CommentData","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; !RefUnwindSafe for PreprocessorToken&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreprocessorTokenKind","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; !RefUnwindSafe for Token&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenKind","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; !RefUnwindSafe for LexerStage&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; !RefUnwindSafe for Lexer&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexicalError","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; !RefUnwindSafe for __Symbol&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i&gt; RefUnwindSafe for __StateMachine&lt;'i&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslationUnitParser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseOptions","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParseContext","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ParseContextData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IdentifierContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GlslTypeTablePolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndentStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Whitespace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormattingSettings","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; RefUnwindSafe for FormattingState&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DEFAULT_SETTINGS","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visit","synthetic":true,"types":[]}];
implementors["lang_util"] = [{"text":"impl RefUnwindSafe for LexerPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeSpan","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Node&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for NodeDisplayWrapper&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["lang_util_derive"] = [{"text":"impl RefUnwindSafe for DisplayFieldOpts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisplayVariantOpts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeDisplayField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeDisplayVariant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeDisplay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NodeContentOpts","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()