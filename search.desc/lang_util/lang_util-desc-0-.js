searchState.loadedDescShard("lang_util", 0, "<code>lang-util</code> is a crate that implements utilities to parse …\nUnique file identifier\nDerives an implementation of <code>NodeContentDisplay</code> for the …\nA <code>SmolStr</code> is a string type that has the following …\nA range in text, represented as a pair of <code>TextSize</code>.\nA measure of text length. Also, equivalently, an index …\nDerive <code>lang_util::error::Token</code> for an enum usable with …\nReturns a <code>&amp;str</code> slice of this <code>SmolStr</code>.\nCreate a new <code>TextRange</code> with the given <code>offset</code> and <code>len</code> (…\nAdd an offset to this range.\nChecked addition. Returns <code>None</code> if overflow occurred.\nSubtract an offset from this range.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nCheck if this range contains an offset.\nCheck if this range contains an offset.\nCheck if this range completely contains another range.\nExtends the range to cover <code>other</code> as well.\nExtends the range to cover <code>other</code> offsets as well.\nCreate a zero-length range at the specified offset (…\nThe end point of this range.\nError type definitions\nFile identifier definition\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe range covered by both ranges, if it exists. If the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> has a length of zero bytes.\nCheck if this range is empty.\nReturns <code>true</code> if <code>self</code> is heap-allocated.\nReturns the length of <code>self</code> in bytes.\nThe size of this range.\nLocated type definition\nConstructs a <code>SmolStr</code> from a <code>str</code>, heap-allocating if …\nCreates a new <code>TextRange</code> with the given <code>start</code> and <code>end</code> (…\nCreates a new instance of <code>TextSize</code> from a raw <code>u32</code>.\nConstructs an inline variant of <code>SmolStr</code>.\nConstructs a <code>SmolStr</code> from a statically allocated string.\nAST type definitions\nThe text size of some primitive text-like object.\nRelative order of the two ranges (overlapping ranges are …\nInput position representation types\nThe start point of this range.\nToken derive support definitions\nCreate a range up to the given end (<code>..end</code>).\nExtra token after input\nAn invalid token was encountered during lexical analysis\nAn error produced by lexical analysis\nLexical analysis error\nA parsing error wrapped from lalrpop_util’s error type\nParsing error kind\nInformation about a lexed token\nMethods provided for all Token implementations\nUnexpected end of file\nUnexpected token\nResolved column number\nFile identifier for the error\nReturn a descriptor for the current token\nReturn the LexerLocation of a lalrpop_util::ParseError\nOverriden file location\nString representation of the lexed token\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInner error, without location information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of kinds this token belongs to\nResolved line number\nReturn the location at which this error occurred\nParser token name\nPath corresponding to the file identifier\nPosition at which the error occurred\nVariant name\nLexical error\nList of expected token names\nList of expected token names\nThe unexpected token\nThe extra token\nUnique file identifier\nCreate a new file identifier for a built-in string\nCreate a new file identifier\nGet the number behind this id, regardless of its type\nTrait for resolving file identifiers to file names\nRepresents a file location override\nTrait for objects that can return the current file number\nWraps an object with location data\nBuilder for a Located struct\nNo override\nOverride with a raw file number\nOverride with a path\nTrait for objects that can resolve offsets to line and …\nCreate a builder for this located type\nGet the column number for this location\nSet the resolved column number\nResolved column number\nResolved column number\nReturn the current file identifier\nSet the file identifier\nGet the current file identifier\nFile identifier for the error\nFile identifier for the error\nSet the source file override\nOverriden file location\nOverriden file location\nBuild the final Located object from the given inner object\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the inner value\nInner error, without location information\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner value\nReturn true if this file override is empty\nGet the line number for this location\nSet the resolved line number\nResolved line number\nResolved line number\nTransform the inner value wrapped by this instance\nCreate a new builder for Located with default values\nSet the source path\nPath corresponding to the file identifier\nPath corresponding to the file identifier\nSet the raw position\nGet the raw position into the source\nPosition at which the error occurred\nPosition at which the error occurred\nResolve the raw offset into a (line, column) tuple\nReturn the path corresponding to the FileId, if known\nResolve the raw offset (see LocatedBuilder::pos) to line …\nResolve the raw offset (see LocatedBuilder::pos) to line …\nResolve the given file id into a path name, and store it …\nSet the current file identifier\nA syntax node with span information\nTrait for AST node contents.\nTrait for displaying an AST node’s content\nTrait for displaying a syntax node\nA wrapper for a syntax node to be displayed\nContents of this syntax node\nObtain a display wrapper for the current node\nDisplay the node’s children\nDisplay the node’s children\nDisplay extra information for the node\nDisplay extra information for the node\nEnding position of the node\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the contents into a node\nName of the node\nName of the syntax node’s type\nSource id of the node\nSpan in the input this node was parsed from\nAdd span information to a syntax node\nStarting position of the node\nA syntax node with span information\nTrait for AST node contents.\nContents of this syntax node\nReturn the wrapped syntax node, discarding the span …\nConvert the contents into a node\nMap this content of this node into a new node\nMap this content of this node into a new node with the …\nCreate a new syntax node with span information\nSpan in the input this node was parsed from\nAdd span information to a syntax node\nTrait for displaying an AST node’s content\nTrait for displaying a syntax node\nA wrapper for a syntax node to be displayed\nObtain a display wrapper for the current node\nDisplay the node’s children\nDisplay the node’s children\nDisplay extra information for the node\nDisplay extra information for the node\nEnding position of the node\nName of the node\nName of the syntax node’s type\nCreate a new NodeDisplayWrapper\nSet the level of this display wrapper\nSource id of the node\nStarting position of the node\nA position in the lexer’s input\nSpan information for a node, constructed from a pair of …\nReturn the end of this span as a LexerPosition\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new node span from two lexer positions\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if this range is empty\nReturn the length of this span\nCreate a new LexerPosition\nCreate a new node span\nReturn a 0-length span located at the end of the given …\nCreate a new LexerPosition\nReturn a 0-length span located at the start of the given …\nRaw byte offset\nReturn the span range\nRange of the node in the input slice\nReturn the source identifier for this node span\nSource id\nThe index of this span into the list of parsed units. This …\nReturn the start of this span as a LexerPosition\nTrait to implement for a token to be used with <code>lang_util</code>’…\nInformation about a known token\nReturn the descriptions for all known tokens\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the token kinds this token belongs to\nList of kinds this token belongs to\nCreate a new token descriptor\nReturn the name used by the lalrpop parser for this token\nParser token name\nReturn the variant name of the current token\nVariant name")