var searchIndex = JSON.parse('{\
"glsl_lang":{"doc":"<code>glsl-lang</code> is a crate implementing a LALR parser for the …","t":[0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,13,6,3,6,4,6,3,13,13,6,4,13,13,13,13,13,13,6,4,13,13,13,6,13,3,13,13,13,13,13,13,6,13,4,13,13,13,6,4,13,13,13,6,3,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,4,6,3,13,13,13,6,4,13,13,13,13,6,4,6,3,6,3,13,6,4,6,13,3,13,6,4,6,3,6,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,3,6,4,13,13,13,6,4,13,13,13,6,4,13,6,4,13,13,13,6,3,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,8,24,8,3,13,13,13,13,13,13,13,6,4,13,13,13,13,13,13,6,4,6,13,4,6,4,6,3,6,3,6,6,4,3,6,4,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,4,6,3,13,13,13,13,6,3,6,3,3,13,13,6,13,4,13,6,4,13,6,3,6,3,13,13,13,13,6,3,13,3,3,3,6,13,3,6,3,6,4,6,13,3,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,8,8,8,8,16,8,16,8,8,3,3,3,6,3,6,16,11,11,11,11,12,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,12,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,12,12,11,11,10,11,11,11,11,11,11,11,11,11,12,0,10,10,10,10,10,10,10,10,10,12,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,8,16,3,11,11,10,11,12,11,11,11,11,12,11,11,12,11,11,11,12,12,11,11,11,8,8,10,14,11,11,10,10,10,8,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,10,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,17,17,3,4,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,3,3,3,8,4,13,13,13,13,13,13,4,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,10,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,8,8,13,4,8,8,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ast","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","parse","parser","precedence","transpiler","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visit_mut","visitor","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","wrap","0","0","0","0","0","Absolute","Add","Add","Add","All","And","And","ArraySpecifier","ArraySpecifierData","ArraySpecifierDimension","ArraySpecifierDimensionData","ArrayedIdentifier","ArrayedIdentifierData","Assignment","Assignment","AssignmentOp","AssignmentOpData","AtomicUInt","Attribute","BVec2","BVec3","BVec4","Binary","BinaryOp","BinaryOpData","BitAnd","BitOr","BitXor","Block","Block","BlockData","Bool","BoolConst","Bracket","Break","Buffer","Case","CaseLabel","CaseLabel","CaseLabelData","Centroid","Coherent","Comma","Comment","CommentData","Compatibility","Complement","Compound","CompoundStatement","CompoundStatementData","Condition","ConditionData","Const","Continue","Core","DMat2","DMat22","DMat23","DMat24","DMat3","DMat32","DMat33","DMat34","DMat4","DMat42","DMat43","DMat44","DVec2","DVec3","DVec4","Dec","Declaration","Declaration","Declaration","Declaration","DeclarationData","Def","Define","Disable","Discard","Div","Div","DoWhile","Dot","Double","DoubleConst","Else","Else","ElseIf","Enable","EndIf","Equal","Equal","Error","Es","ExplicitlySized","Expr","Expr","Expr","ExprData","ExprStatement","ExprStatementData","Expression","Expression","Extension","ExternalDeclaration","ExternalDeclarationData","Flat","Float","FloatConst","For","ForInitStatement","ForInitStatementData","ForRestStatement","ForRestStatementData","FullySpecifiedType","FullySpecifiedTypeData","FunCall","FunIdentifier","FunIdentifierData","FunctionDefinition","FunctionDefinition","FunctionDefinitionData","FunctionLike","FunctionParameterDeclaration","FunctionParameterDeclarationData","FunctionParameterDeclarator","FunctionParameterDeclaratorData","FunctionPrototype","FunctionPrototype","FunctionPrototypeData","Gt","Gte","High","IImage1D","IImage1DArray","IImage2D","IImage2DArray","IImage2DMs","IImage2DMsArray","IImage2DRect","IImage3D","IImageBuffer","IImageCube","IImageCubeArray","ISampler1D","ISampler1DArray","ISampler2D","ISampler2DArray","ISampler2DMs","ISampler2DMsArray","ISampler2DRect","ISampler3D","ISamplerBuffer","ISamplerCube","ISamplerCubeArray","IVec2","IVec3","IVec4","Identifier","Identifier","IdentifierData","If","IfDef","IfNDef","Image1D","Image1DArray","Image2D","Image2DArray","Image2DMs","Image2DMsArray","Image2DRect","Image3D","ImageBuffer","ImageCube","ImageCubeArray","In","InOut","Inc","Include","InitDeclaratorList","InitDeclaratorList","InitDeclaratorListData","Initializer","InitializerData","Int","IntConst","Interpolation","InterpolationQualifier","InterpolationQualifierData","Invariant","Invariant","Iteration","IterationStatement","IterationStatementData","Jump","JumpStatement","JumpStatementData","LShift","LShift","Layout","LayoutQualifier","LayoutQualifierData","LayoutQualifierSpec","LayoutQualifierSpecData","Line","List","Low","Lt","Lte","Mat2","Mat22","Mat23","Mat24","Mat3","Mat32","Mat33","Mat34","Mat4","Mat42","Mat43","Mat44","Medium","Minus","Mod","Mod","Mult","Mult","Multi","Named","NoPerspective","Node","NodeContent","NodeContent","NodeDisplay","NodeSpan","NonEqual","Not","ObjectLike","Or","Or","Out","Patch","Path","PathData","PostDec","PostInc","Pragma","Precise","Precision","Precision","PrecisionQualifier","PrecisionQualifierData","Preprocessor","Preprocessor","PreprocessorData","PreprocessorDefine","PreprocessorDefineData","PreprocessorElseIf","PreprocessorElseIfData","PreprocessorError","PreprocessorErrorData","PreprocessorExtension","PreprocessorExtensionBehavior","PreprocessorExtensionBehaviorData","PreprocessorExtensionData","PreprocessorExtensionName","PreprocessorExtensionNameData","PreprocessorIf","PreprocessorIfData","PreprocessorIfDef","PreprocessorIfDefData","PreprocessorIfNDef","PreprocessorIfNDefData","PreprocessorInclude","PreprocessorIncludeData","PreprocessorLine","PreprocessorLineData","PreprocessorPragma","PreprocessorPragmaData","PreprocessorUndef","PreprocessorUndefData","PreprocessorVersion","PreprocessorVersionData","PreprocessorVersionProfile","PreprocessorVersionProfileData","RShift","RShift","ReadOnly","Relative","Require","Restrict","Return","Sample","Sampler1D","Sampler1DArray","Sampler1DArrayShadow","Sampler1DShadow","Sampler2D","Sampler2DArray","Sampler2DArrayShadow","Sampler2DMs","Sampler2DMsArray","Sampler2DRect","Sampler2DRectShadow","Sampler2DShadow","Sampler3D","SamplerBuffer","SamplerCube","SamplerCubeArray","SamplerCubeArrayShadow","SamplerCubeShadow","Selection","SelectionRestStatement","SelectionRestStatementData","SelectionStatement","SelectionStatementData","Shared","Shared","Simple","Single","SingleDeclaration","SingleDeclarationData","SingleDeclarationNoType","SingleDeclarationNoTypeData","SmolStr","Smooth","Specific","Statement","Statement","StatementData","Storage","StorageQualifier","StorageQualifierData","Struct","StructFieldSpecifier","StructFieldSpecifierData","StructSpecifier","StructSpecifierData","Sub","Sub","Subroutine","Switch","SwitchStatement","SwitchStatementData","Ternary","TextRange","TextSize","TranslationUnit","TypeName","TypeName","TypeNameData","TypeQualifier","TypeQualifierData","TypeQualifierSpec","TypeQualifierSpecData","TypeSpecifier","TypeSpecifier","TypeSpecifierData","TypeSpecifierNonArray","TypeSpecifierNonArrayData","UImage1D","UImage1DArray","UImage2D","UImage2DArray","UImage2DMs","UImage2DMsArray","UImage2DRect","UImage3D","UImageBuffer","UImageCube","UImageCubeArray","UInt","UIntConst","USampler1D","USampler1DArray","USampler2D","USampler2DArray","USampler2DMs","USampler2DMsArray","USampler2DRect","USampler3D","USamplerBuffer","USamplerCube","USamplerCubeArray","UVec2","UVec3","UVec4","Unary","UnaryOp","UnaryOpData","Undef","Uniform","Unnamed","Unsized","Variable","Varying","Vec2","Vec3","Vec4","Version","Void","Volatile","Warn","While","WriteOnly","Xor","Xor","add","add","add","add","add_assign","add_assign","add_assign","array_spec","array_specifier","array_specifier","as_ident","as_ident_mut","as_ref","as_rs_ident","as_rs_ident","as_rs_ident","as_str","as_str","as_str","at","behavior","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","command","cond","condition","condition","condition","contains","contains_inclusive","contains_range","content","cover","cover_offset","declare_var","default","default","default","deref","deref","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dimensions","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","empty","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extract","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_lexer","from_str","hash","hash","hash","hash","hash","hash","hash","head","head","ident","ident","ident","ident","ident","ident","identifier","identifiers","ids","initializer","initializer","intersect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_node","is_empty","is_empty","is_empty","is_heap_allocated","is_multi","is_single","len","len","len","line","map","map_spanned","message","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new_end","new_inline","new_inline_from_ascii","new_start","of","ordering","parameters","parse","parse","parse_with_context","parse_with_context","parse_with_options","parse_with_options","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","post_expr","precedence","precedence","precedence","profile","prototype","qualifier","qualifier","qualifier","qualifiers","range","range","raw","rest","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_string_number","span","spanned","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start_bound","statement","statement_list","sub","sub","sub","sub","sub_assign","sub_assign","sum","tail","text","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","up_to","variable","version","visit","visit_mut","wrap","0","0","0","0","0","0","1","2","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","2","2","2","0","0","0","0","0","0","0","0","0","1","1","0","0","0","0","0","1","1","1","2","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","args","ident","ident","value","value","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","DefaultLexer","DefaultParse","Extractable","HasParser","IntoParseBuilderExt","Item","LangParser","Lexer","Parsable","Parse","ParseBuilder","ParseContext","ParseContextData","ParseError","ParseOptions","ParseResult","Parser","add_comment","add_comment","add_type_name","add_type_name","allow_rs_ident","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","builder","clone","clone","clone","clone_inner","clone_into","clone_into","clone_into","comments","comments","context","data","data","data_mut","default","default","default","default_version","eq","eq","eq","extract","fmt","fmt","fmt","from","from","from","from","has_comments","impl_parse","into","into","into","into_data","is_type_name","is_type_name","lexer","names","ne","ne","new","new","new","new","new_identifier","new_identifier","new_with_comments","new_with_comments_and_policy","new_with_context","new_with_policy","opts","parsable","parse","parse","parse","parse_with_context","parse_with_context","parse_with_context","parse_with_options","parse_with_options","parse_with_options","parser","policy","pop_scope","pop_scope","push_scope","push_scope","source","source_id","target_vulkan","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_comments","with_comments_and_policy","with_policy","with_policy","wrap","IntoParseBuilderExt","Lexer","ParseBuilder","borrow","borrow_mut","builder","context","context","default","extract","from","into","lexer","new","opts","opts","parse","parse_source","parser","parser","source","try_from","try_into","type_id","Extractable","Parsable","extract","impl_parsable_statement","parse","parse","parse_with_context","parse_with_options","wrap","__ToTriple","__action0","__action1","__action10","__action100","__action101","__action102","__action103","__action104","__action105","__action106","__action107","__action108","__action109","__action11","__action110","__action111","__action112","__action113","__action114","__action115","__action116","__action117","__action118","__action119","__action12","__action120","__action121","__action122","__action123","__action124","__action125","__action126","__action127","__action128","__action129","__action13","__action130","__action131","__action132","__action133","__action134","__action135","__action136","__action137","__action138","__action139","__action14","__action140","__action141","__action142","__action143","__action144","__action145","__action146","__action147","__action148","__action149","__action15","__action150","__action151","__action152","__action153","__action154","__action155","__action156","__action157","__action158","__action159","__action16","__action160","__action161","__action162","__action163","__action164","__action165","__action166","__action167","__action168","__action169","__action17","__action170","__action171","__action172","__action173","__action174","__action175","__action176","__action177","__action178","__action179","__action18","__action180","__action181","__action182","__action183","__action184","__action185","__action186","__action187","__action188","__action189","__action19","__action190","__action191","__action192","__action193","__action194","__action195","__action196","__action197","__action198","__action199","__action2","__action20","__action200","__action201","__action202","__action203","__action204","__action205","__action206","__action207","__action208","__action209","__action21","__action210","__action211","__action212","__action213","__action214","__action215","__action216","__action217","__action218","__action219","__action22","__action220","__action221","__action222","__action223","__action224","__action225","__action226","__action227","__action228","__action229","__action23","__action230","__action231","__action232","__action233","__action234","__action235","__action236","__action237","__action238","__action239","__action24","__action240","__action241","__action242","__action243","__action244","__action245","__action246","__action247","__action248","__action249","__action25","__action250","__action251","__action252","__action253","__action254","__action255","__action256","__action257","__action258","__action259","__action26","__action260","__action261","__action262","__action263","__action264","__action265","__action266","__action267","__action268","__action269","__action27","__action270","__action271","__action272","__action273","__action274","__action275","__action276","__action277","__action278","__action279","__action28","__action280","__action281","__action282","__action283","__action284","__action285","__action286","__action287","__action288","__action289","__action29","__action290","__action291","__action292","__action293","__action294","__action295","__action296","__action297","__action298","__action299","__action3","__action30","__action300","__action301","__action302","__action303","__action304","__action305","__action306","__action307","__action308","__action309","__action31","__action310","__action311","__action312","__action313","__action314","__action315","__action316","__action317","__action318","__action319","__action32","__action320","__action321","__action322","__action323","__action324","__action325","__action326","__action327","__action328","__action329","__action33","__action330","__action331","__action332","__action333","__action334","__action335","__action336","__action337","__action338","__action339","__action34","__action340","__action341","__action342","__action343","__action344","__action345","__action346","__action347","__action348","__action349","__action35","__action350","__action351","__action352","__action353","__action354","__action355","__action356","__action357","__action358","__action359","__action36","__action360","__action361","__action362","__action363","__action364","__action365","__action366","__action367","__action368","__action369","__action37","__action370","__action371","__action372","__action373","__action374","__action375","__action376","__action377","__action378","__action379","__action38","__action380","__action381","__action382","__action383","__action384","__action385","__action386","__action387","__action388","__action389","__action39","__action390","__action391","__action392","__action393","__action394","__action395","__action396","__action397","__action398","__action399","__action4","__action40","__action400","__action401","__action402","__action403","__action404","__action405","__action406","__action407","__action408","__action409","__action41","__action410","__action411","__action412","__action413","__action414","__action415","__action416","__action417","__action418","__action419","__action42","__action420","__action421","__action422","__action423","__action424","__action425","__action426","__action427","__action428","__action429","__action43","__action430","__action431","__action432","__action433","__action434","__action435","__action436","__action437","__action438","__action439","__action44","__action440","__action441","__action442","__action443","__action444","__action445","__action446","__action447","__action448","__action449","__action45","__action450","__action451","__action452","__action453","__action454","__action455","__action456","__action457","__action458","__action459","__action46","__action460","__action461","__action462","__action463","__action464","__action465","__action466","__action467","__action468","__action469","__action47","__action470","__action471","__action472","__action473","__action474","__action475","__action476","__action477","__action478","__action479","__action48","__action480","__action481","__action482","__action483","__action484","__action485","__action486","__action487","__action488","__action489","__action49","__action490","__action491","__action492","__action493","__action494","__action495","__action496","__action497","__action498","__action499","__action5","__action50","__action500","__action501","__action502","__action503","__action504","__action505","__action506","__action507","__action508","__action509","__action51","__action510","__action511","__action512","__action513","__action514","__action515","__action516","__action517","__action518","__action519","__action52","__action520","__action521","__action522","__action523","__action524","__action525","__action526","__action527","__action528","__action529","__action53","__action530","__action531","__action532","__action533","__action534","__action535","__action536","__action537","__action538","__action539","__action54","__action540","__action541","__action542","__action543","__action544","__action545","__action546","__action547","__action548","__action549","__action55","__action550","__action551","__action552","__action553","__action554","__action555","__action556","__action557","__action558","__action559","__action56","__action560","__action561","__action562","__action563","__action564","__action565","__action566","__action567","__action568","__action569","__action57","__action570","__action571","__action572","__action573","__action574","__action575","__action576","__action577","__action578","__action579","__action58","__action580","__action581","__action582","__action583","__action584","__action585","__action586","__action587","__action588","__action589","__action59","__action590","__action591","__action592","__action593","__action594","__action595","__action596","__action597","__action598","__action599","__action6","__action60","__action600","__action601","__action602","__action603","__action604","__action605","__action606","__action607","__action608","__action609","__action61","__action610","__action611","__action612","__action613","__action614","__action615","__action616","__action617","__action618","__action619","__action62","__action620","__action621","__action622","__action623","__action624","__action625","__action626","__action627","__action628","__action629","__action63","__action630","__action631","__action632","__action633","__action634","__action635","__action636","__action637","__action638","__action639","__action64","__action640","__action641","__action642","__action643","__action644","__action645","__action646","__action647","__action648","__action649","__action65","__action650","__action651","__action652","__action653","__action654","__action655","__action656","__action657","__action658","__action659","__action66","__action660","__action661","__action662","__action663","__action664","__action665","__action666","__action667","__action668","__action669","__action67","__action670","__action671","__action672","__action673","__action674","__action675","__action676","__action677","__action678","__action679","__action68","__action680","__action681","__action682","__action683","__action684","__action685","__action686","__action687","__action688","__action689","__action69","__action690","__action691","__action692","__action693","__action694","__action695","__action696","__action697","__action698","__action699","__action7","__action70","__action700","__action701","__action702","__action703","__action704","__action705","__action706","__action707","__action708","__action709","__action71","__action710","__action711","__action712","__action713","__action714","__action715","__action716","__action717","__action718","__action719","__action72","__action720","__action721","__action722","__action723","__action724","__action725","__action726","__action727","__action728","__action729","__action73","__action730","__action731","__action732","__action733","__action734","__action735","__action736","__action737","__action738","__action739","__action74","__action740","__action741","__action742","__action743","__action744","__action745","__action746","__action747","__action748","__action749","__action75","__action750","__action751","__action752","__action753","__action754","__action755","__action756","__action757","__action758","__action759","__action76","__action760","__action761","__action762","__action763","__action764","__action765","__action766","__action767","__action768","__action769","__action77","__action770","__action771","__action772","__action773","__action774","__action775","__action776","__action777","__action778","__action779","__action78","__action780","__action781","__action782","__action783","__action784","__action785","__action786","__action787","__action788","__action789","__action79","__action790","__action791","__action792","__action793","__action794","__action795","__action796","__action797","__action798","__action799","__action8","__action80","__action800","__action801","__action802","__action803","__action804","__action805","__action806","__action807","__action808","__action809","__action81","__action810","__action811","__action812","__action813","__action814","__action815","__action816","__action817","__action818","__action819","__action82","__action820","__action821","__action822","__action823","__action824","__action825","__action826","__action827","__action828","__action829","__action83","__action830","__action831","__action832","__action833","__action834","__action835","__action836","__action837","__action838","__action839","__action84","__action840","__action841","__action842","__action843","__action844","__action845","__action846","__action847","__action848","__action849","__action85","__action850","__action851","__action852","__action853","__action854","__action855","__action856","__action857","__action858","__action859","__action86","__action860","__action861","__action87","__action88","__action89","__action9","__action90","__action91","__action92","__action93","__action94","__action95","__action96","__action97","__action98","__action99","__parse__TranslationUnit","to_triple","TranslationUnitParser","Variant0","Variant1","Variant10","Variant100","Variant101","Variant102","Variant103","Variant104","Variant105","Variant106","Variant107","Variant108","Variant109","Variant11","Variant110","Variant111","Variant112","Variant113","Variant114","Variant115","Variant12","Variant13","Variant14","Variant15","Variant16","Variant17","Variant18","Variant19","Variant2","Variant20","Variant21","Variant22","Variant23","Variant24","Variant25","Variant26","Variant27","Variant28","Variant29","Variant3","Variant30","Variant31","Variant32","Variant33","Variant34","Variant35","Variant36","Variant37","Variant38","Variant39","Variant4","Variant40","Variant41","Variant42","Variant43","Variant44","Variant45","Variant46","Variant47","Variant48","Variant49","Variant5","Variant50","Variant51","Variant52","Variant53","Variant54","Variant55","Variant56","Variant57","Variant58","Variant59","Variant6","Variant60","Variant61","Variant62","Variant63","Variant64","Variant65","Variant66","Variant67","Variant68","Variant69","Variant7","Variant70","Variant71","Variant72","Variant73","Variant74","Variant75","Variant76","Variant77","Variant78","Variant79","Variant8","Variant80","Variant81","Variant82","Variant83","Variant84","Variant85","Variant86","Variant87","Variant88","Variant89","Variant9","Variant90","Variant91","Variant92","Variant93","Variant94","Variant95","Variant96","Variant97","Variant98","Variant99","__ACTION","__EOF_ACTION","__StateMachine","__Symbol","__action","__expected_tokens","__goto","__phantom","__pop_Variant0","__pop_Variant1","__pop_Variant10","__pop_Variant100","__pop_Variant101","__pop_Variant102","__pop_Variant103","__pop_Variant104","__pop_Variant105","__pop_Variant106","__pop_Variant107","__pop_Variant108","__pop_Variant109","__pop_Variant11","__pop_Variant110","__pop_Variant111","__pop_Variant112","__pop_Variant113","__pop_Variant114","__pop_Variant115","__pop_Variant12","__pop_Variant13","__pop_Variant14","__pop_Variant15","__pop_Variant16","__pop_Variant17","__pop_Variant18","__pop_Variant19","__pop_Variant2","__pop_Variant20","__pop_Variant21","__pop_Variant22","__pop_Variant23","__pop_Variant24","__pop_Variant25","__pop_Variant26","__pop_Variant27","__pop_Variant28","__pop_Variant29","__pop_Variant3","__pop_Variant30","__pop_Variant31","__pop_Variant32","__pop_Variant33","__pop_Variant34","__pop_Variant35","__pop_Variant36","__pop_Variant37","__pop_Variant38","__pop_Variant39","__pop_Variant4","__pop_Variant40","__pop_Variant41","__pop_Variant42","__pop_Variant43","__pop_Variant44","__pop_Variant45","__pop_Variant46","__pop_Variant47","__pop_Variant48","__pop_Variant49","__pop_Variant5","__pop_Variant50","__pop_Variant51","__pop_Variant52","__pop_Variant53","__pop_Variant54","__pop_Variant55","__pop_Variant56","__pop_Variant57","__pop_Variant58","__pop_Variant59","__pop_Variant6","__pop_Variant60","__pop_Variant61","__pop_Variant62","__pop_Variant63","__pop_Variant64","__pop_Variant65","__pop_Variant66","__pop_Variant67","__pop_Variant68","__pop_Variant69","__pop_Variant7","__pop_Variant70","__pop_Variant71","__pop_Variant72","__pop_Variant73","__pop_Variant74","__pop_Variant75","__pop_Variant76","__pop_Variant77","__pop_Variant78","__pop_Variant79","__pop_Variant8","__pop_Variant80","__pop_Variant81","__pop_Variant82","__pop_Variant83","__pop_Variant84","__pop_Variant85","__pop_Variant86","__pop_Variant87","__pop_Variant88","__pop_Variant89","__pop_Variant9","__pop_Variant90","__pop_Variant91","__pop_Variant92","__pop_Variant93","__pop_Variant94","__pop_Variant95","__pop_Variant96","__pop_Variant97","__pop_Variant98","__pop_Variant99","__reduce","__reduce0","__reduce1","__reduce10","__reduce100","__reduce101","__reduce102","__reduce103","__reduce104","__reduce105","__reduce106","__reduce107","__reduce108","__reduce109","__reduce11","__reduce110","__reduce111","__reduce112","__reduce113","__reduce114","__reduce115","__reduce116","__reduce117","__reduce118","__reduce119","__reduce12","__reduce120","__reduce121","__reduce122","__reduce123","__reduce124","__reduce125","__reduce126","__reduce127","__reduce128","__reduce129","__reduce13","__reduce130","__reduce131","__reduce132","__reduce133","__reduce134","__reduce135","__reduce136","__reduce137","__reduce138","__reduce139","__reduce14","__reduce140","__reduce141","__reduce142","__reduce143","__reduce144","__reduce145","__reduce146","__reduce147","__reduce148","__reduce149","__reduce15","__reduce150","__reduce151","__reduce152","__reduce153","__reduce154","__reduce155","__reduce156","__reduce157","__reduce158","__reduce159","__reduce16","__reduce160","__reduce161","__reduce162","__reduce163","__reduce164","__reduce165","__reduce166","__reduce167","__reduce168","__reduce169","__reduce17","__reduce170","__reduce171","__reduce172","__reduce173","__reduce174","__reduce175","__reduce176","__reduce177","__reduce178","__reduce179","__reduce18","__reduce180","__reduce181","__reduce182","__reduce183","__reduce184","__reduce185","__reduce186","__reduce187","__reduce188","__reduce189","__reduce19","__reduce190","__reduce191","__reduce192","__reduce193","__reduce194","__reduce195","__reduce196","__reduce197","__reduce198","__reduce199","__reduce2","__reduce20","__reduce200","__reduce201","__reduce202","__reduce203","__reduce204","__reduce205","__reduce206","__reduce207","__reduce208","__reduce209","__reduce21","__reduce210","__reduce211","__reduce212","__reduce213","__reduce214","__reduce215","__reduce216","__reduce217","__reduce218","__reduce219","__reduce22","__reduce220","__reduce221","__reduce222","__reduce223","__reduce224","__reduce225","__reduce226","__reduce227","__reduce228","__reduce229","__reduce23","__reduce230","__reduce231","__reduce232","__reduce233","__reduce234","__reduce235","__reduce236","__reduce237","__reduce238","__reduce239","__reduce24","__reduce240","__reduce241","__reduce242","__reduce243","__reduce244","__reduce245","__reduce246","__reduce247","__reduce248","__reduce249","__reduce25","__reduce250","__reduce251","__reduce252","__reduce253","__reduce254","__reduce255","__reduce256","__reduce257","__reduce258","__reduce259","__reduce26","__reduce260","__reduce261","__reduce262","__reduce263","__reduce264","__reduce265","__reduce266","__reduce267","__reduce268","__reduce269","__reduce27","__reduce270","__reduce271","__reduce272","__reduce273","__reduce274","__reduce275","__reduce276","__reduce277","__reduce278","__reduce279","__reduce28","__reduce280","__reduce281","__reduce282","__reduce283","__reduce284","__reduce285","__reduce286","__reduce287","__reduce288","__reduce289","__reduce29","__reduce290","__reduce291","__reduce292","__reduce293","__reduce294","__reduce295","__reduce296","__reduce297","__reduce298","__reduce299","__reduce3","__reduce30","__reduce300","__reduce301","__reduce302","__reduce303","__reduce304","__reduce305","__reduce306","__reduce307","__reduce308","__reduce309","__reduce31","__reduce310","__reduce311","__reduce312","__reduce313","__reduce314","__reduce315","__reduce316","__reduce317","__reduce318","__reduce319","__reduce32","__reduce320","__reduce321","__reduce322","__reduce323","__reduce324","__reduce325","__reduce326","__reduce327","__reduce328","__reduce329","__reduce33","__reduce330","__reduce331","__reduce332","__reduce333","__reduce334","__reduce335","__reduce336","__reduce337","__reduce338","__reduce339","__reduce34","__reduce340","__reduce341","__reduce342","__reduce343","__reduce344","__reduce345","__reduce346","__reduce347","__reduce348","__reduce349","__reduce35","__reduce350","__reduce351","__reduce352","__reduce353","__reduce354","__reduce355","__reduce356","__reduce357","__reduce358","__reduce359","__reduce36","__reduce360","__reduce361","__reduce362","__reduce363","__reduce364","__reduce365","__reduce366","__reduce367","__reduce368","__reduce369","__reduce37","__reduce370","__reduce371","__reduce372","__reduce373","__reduce374","__reduce375","__reduce376","__reduce377","__reduce378","__reduce379","__reduce38","__reduce380","__reduce381","__reduce382","__reduce383","__reduce384","__reduce385","__reduce386","__reduce387","__reduce388","__reduce389","__reduce39","__reduce390","__reduce391","__reduce392","__reduce393","__reduce394","__reduce395","__reduce396","__reduce397","__reduce398","__reduce399","__reduce4","__reduce40","__reduce400","__reduce401","__reduce402","__reduce403","__reduce404","__reduce405","__reduce406","__reduce407","__reduce408","__reduce409","__reduce41","__reduce410","__reduce411","__reduce412","__reduce413","__reduce414","__reduce415","__reduce416","__reduce417","__reduce418","__reduce419","__reduce42","__reduce420","__reduce421","__reduce422","__reduce423","__reduce424","__reduce425","__reduce426","__reduce427","__reduce428","__reduce429","__reduce43","__reduce430","__reduce431","__reduce432","__reduce433","__reduce434","__reduce435","__reduce436","__reduce437","__reduce438","__reduce439","__reduce44","__reduce440","__reduce441","__reduce442","__reduce443","__reduce444","__reduce445","__reduce446","__reduce447","__reduce448","__reduce449","__reduce45","__reduce450","__reduce451","__reduce452","__reduce453","__reduce454","__reduce455","__reduce456","__reduce457","__reduce458","__reduce459","__reduce46","__reduce460","__reduce461","__reduce462","__reduce463","__reduce464","__reduce465","__reduce466","__reduce467","__reduce468","__reduce469","__reduce47","__reduce470","__reduce471","__reduce472","__reduce473","__reduce474","__reduce475","__reduce476","__reduce477","__reduce478","__reduce479","__reduce48","__reduce480","__reduce481","__reduce482","__reduce483","__reduce484","__reduce485","__reduce486","__reduce487","__reduce488","__reduce489","__reduce49","__reduce490","__reduce491","__reduce492","__reduce493","__reduce494","__reduce495","__reduce496","__reduce497","__reduce498","__reduce499","__reduce5","__reduce50","__reduce500","__reduce501","__reduce502","__reduce503","__reduce504","__reduce505","__reduce506","__reduce507","__reduce508","__reduce509","__reduce51","__reduce510","__reduce511","__reduce512","__reduce513","__reduce514","__reduce515","__reduce52","__reduce53","__reduce55","__reduce56","__reduce57","__reduce58","__reduce59","__reduce6","__reduce60","__reduce61","__reduce62","__reduce63","__reduce64","__reduce65","__reduce66","__reduce67","__reduce68","__reduce69","__reduce7","__reduce70","__reduce71","__reduce72","__reduce73","__reduce74","__reduce75","__reduce76","__reduce77","__reduce78","__reduce79","__reduce8","__reduce80","__reduce81","__reduce82","__reduce83","__reduce84","__reduce85","__reduce86","__reduce87","__reduce88","__reduce89","__reduce9","__reduce90","__reduce91","__reduce92","__reduce93","__reduce94","__reduce95","__reduce96","__reduce97","__reduce98","__reduce99","__symbol_type_mismatch","__token_to_integer","__token_to_symbol","_priv","action","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","ctx","eof_action","error_action","error_recovery_symbol","expected_tokens","from","from","from","goto","into","into","into","new","new","parse","parse","reduce","simulate_reduce","start_location","start_state","token_to_index","token_to_symbol","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uses_error_recovery","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","glsl","DEFAULT_SETTINGS","FormattingSettings","FormattingState","HasPrecedence","IndentStyle","Newline","None","None","Space","Spaces","Tabs","Whitespace","__private_field","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","consume_newline","declaration_terminator","default","default","default","deref","enter_block","eq","eq","eq","eq","exit_block","flush_line","flush_space","fmt","fmt","fmt","fmt","from","from","from","from","from","from","function_definition_terminator","indent_style","indentation_level","into","into","into","into","into","ne","ne","ne","new_line","new_line_pending","newline_after_close_block","newline_after_open_block","newline_before_close_block","precedence","settings","show_array_spec","show_arrayed_identifier","show_assignment_op","show_binary_op","show_block","show_case_label","show_compound_statement","show_condition","show_declaration","show_double","show_expr","show_expression_statement","show_external_declaration","show_float","show_for_init_statement","show_for_rest_statement","show_fully_specified_type","show_function_definition","show_function_identifier","show_function_parameter_declaration","show_function_parameter_declarator","show_function_prototype","show_identifier","show_init_declarator_list","show_initializer","show_interpolation_qualifier","show_iteration_statement","show_jump_statement","show_layout_qualifier","show_layout_qualifier_spec","show_path","show_precision_qualifier","show_preprocessor","show_preprocessor_define","show_preprocessor_else","show_preprocessor_elseif","show_preprocessor_endif","show_preprocessor_error","show_preprocessor_extension","show_preprocessor_if","show_preprocessor_ifdef","show_preprocessor_ifndef","show_preprocessor_include","show_preprocessor_line","show_preprocessor_pragma","show_preprocessor_undef","show_preprocessor_version","show_selection_rest_statement","show_selection_statement","show_single_declaration","show_single_declaration_no_type","show_statement","show_storage_qualifier","show_struct","show_struct_field","show_struct_non_declaration","show_subroutine","show_switch_statement","show_translation_unit","show_type_name","show_type_qualifier","show_type_qualifier_spec","show_type_specifier","show_type_specifier_non_array","show_unary_op","spaces_around_binary_ops","statement_terminator","struct_declaration_terminator","struct_field_separator","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","write","write_binary_op","write_declaration_terminator","write_function_definition_terminator","write_indent","write_line","write_statement_terminator","write_struct_declaration_terminator","write_struct_field_separator","count","count","tab_size","Children","Host","HostMut","Parent","Visit","Visitor","VisitorMut","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","make_host_trait","make_visitor_trait","to_owned","try_from","try_into","type_id","visit","visit_array_specifier","visit_array_specifier","visit_array_specifier_dimension","visit_array_specifier_dimension","visit_arrayed_identifier","visit_arrayed_identifier","visit_assignment_op","visit_assignment_op","visit_binary_op","visit_binary_op","visit_block","visit_block","visit_case_label","visit_case_label","visit_compound_statement","visit_compound_statement","visit_condition","visit_condition","visit_declaration","visit_declaration","visit_expr","visit_expr","visit_expr_statement","visit_expr_statement","visit_external_declaration","visit_external_declaration","visit_for_init_statement","visit_for_init_statement","visit_for_rest_statement","visit_for_rest_statement","visit_full_specified_type","visit_full_specified_type","visit_fun_identifier","visit_fun_identifier","visit_function_definition","visit_function_definition","visit_function_parameter_declaration","visit_function_parameter_declaration","visit_function_parameter_declarator","visit_function_parameter_declarator","visit_function_prototype","visit_function_prototype","visit_identifier","visit_identifier","visit_init_declarator_list","visit_init_declarator_list","visit_initializer","visit_initializer","visit_interpolation_qualifier","visit_interpolation_qualifier","visit_iteration_statement","visit_iteration_statement","visit_jump_statement","visit_jump_statement","visit_layout_qualifier","visit_layout_qualifier","visit_layout_qualifier_spec","visit_layout_qualifier_spec","visit_mut","visit_precision_qualifier","visit_precision_qualifier","visit_preprocessor","visit_preprocessor","visit_preprocessor_define","visit_preprocessor_define","visit_preprocessor_elseif","visit_preprocessor_elseif","visit_preprocessor_error","visit_preprocessor_error","visit_preprocessor_extension","visit_preprocessor_extension","visit_preprocessor_extension_behavior","visit_preprocessor_extension_behavior","visit_preprocessor_extension_name","visit_preprocessor_extension_name","visit_preprocessor_if","visit_preprocessor_if","visit_preprocessor_ifdef","visit_preprocessor_ifdef","visit_preprocessor_ifndef","visit_preprocessor_ifndef","visit_preprocessor_include","visit_preprocessor_include","visit_preprocessor_line","visit_preprocessor_line","visit_preprocessor_pragma","visit_preprocessor_pragma","visit_preprocessor_undef","visit_preprocessor_undef","visit_preprocessor_version","visit_preprocessor_version","visit_preprocessor_version_profile","visit_preprocessor_version_profile","visit_selection_rest_statement","visit_selection_rest_statement","visit_selection_statement","visit_selection_statement","visit_single_declaration","visit_single_declaration","visit_single_declaration_no_type","visit_single_declaration_no_type","visit_statement","visit_statement","visit_storage_qualifier","visit_storage_qualifier","visit_struct_field_specifier","visit_struct_field_specifier","visit_struct_specifier","visit_struct_specifier","visit_switch_statement","visit_switch_statement","visit_translation_unit","visit_translation_unit","visit_type_name","visit_type_name","visit_type_qualifier","visit_type_qualifier","visit_type_qualifier_spec","visit_type_qualifier_spec","visit_type_specifier","visit_type_specifier","visit_type_specifier_non_array","visit_type_specifier_non_array","visit_unary_op","visit_unary_op"],"q":["glsl_lang","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang::astglsl_lang::ast::ArraySpecifierDimensionData","glsl_lang::ast::CaseLabelData","glsl_lang::ast::CommentData","","glsl_lang::ast::ConditionData","","","","glsl_lang::ast::DeclarationData","","","","","","glsl_lang::ast::ExprData","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang::ast::ExternalDeclarationData","","","glsl_lang::ast::ForInitStatementData","","glsl_lang::ast::FunIdentifierData","","glsl_lang::ast::FunctionParameterDeclarationData","","","","glsl_lang::ast::InitializerData","","glsl_lang::ast::IterationStatementData","","","","","","","glsl_lang::ast::JumpStatementData","glsl_lang::ast::LayoutQualifierSpecData","","glsl_lang::ast::PathData","","glsl_lang::ast::PreprocessorData","","","","","","","","","","","","glsl_lang::ast::PreprocessorDefineData","","","","","glsl_lang::ast::PreprocessorExtensionNameData","glsl_lang::ast::SelectionRestStatementData","","","glsl_lang::ast::StatementData","","","","","","","","glsl_lang::ast::StorageQualifierData","glsl_lang::ast::TypeQualifierSpecData","","","","glsl_lang::ast::TypeSpecifierNonArrayData","","glsl_lang::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang::parse::builder","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang::parse::parsable","","","","","","","","","glsl_lang::parserglsl_lang::parser::__parse__TranslationUnitglsl_lang::parser::__parse__TranslationUnit::__Symbol","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang::transpiler","glsl_lang::transpiler::glslglsl_lang::transpiler::glsl::IndentStyle","","","glsl_lang::visitor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["GLSL abstract syntax tree and grammar.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parsing utilities and entry points","","","GLSL transpilers – i.e. going from GLSL to anything else.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","AST visitors (i.e. on-the-fly mutation at different places …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specified with angle brackets.","<code>+</code> unary operator","<code>+</code> binary operator","<code>+=</code> assignment operator","All extensions you could ever imagine in your whole …","<code>&amp;&amp;</code> binary operator","<code>&amp;=</code> assignment operator","Type alias for <code>Node&lt;ArraySpecifierData&gt;</code>","Dimensionality of an array.","Type alias for <code>Node&lt;ArraySpecifierDimensionData&gt;</code>","One array specifier dimension.","Type alias for <code>Node&lt;ArrayedIdentifierData&gt;</code>","An identifier with an optional array specifier.","An assignment is also an expression. Gathers an expression …","A variable declaration used as a condition","Type alias for <code>Node&lt;AssignmentOpData&gt;</code>","All possible operators for assigning expressions.","<code>atomic_uint</code> type specifier","<code>attribute</code> storage qualifier","<code>bvec2</code> type specifier","<code>bvec3</code> type specifier","<code>bvec4</code> type specifier","A binary expression, gathering two expressions and a …","Type alias for <code>Node&lt;BinaryOpData&gt;</code>","All binary operators that exist in GLSL.","<code>&amp;</code> binary operator","<code>|</code> binary operator","<code>^</code> binary operator","Type alias for <code>Node&lt;BlockData&gt;</code>","Block declaration","A general purpose block, containing fields and possibly a …","<code>bool</code> type specifier","Boolean constant expression.","Add an array specifier to an expression.","<code>break</code> jump statement","<code>buffer</code> storage qualifier","<code>case:</code> case label","Type alias for <code>Node&lt;CaseLabelData&gt;</code>","Switch statement case label","Case label statement.","<code>centroid</code> storage qualifier","<code>coherent</code> storage qualifier","An expression that contains several, separated with comma.","Type alias for <code>Node&lt;CommentData&gt;</code>","A comment","<code>compatibility</code> version profile","<code>~</code> unary operator","Statement block","Type alias for <code>Node&lt;CompoundStatementData&gt;</code>","Compound statement (with no new scope).","Type alias for <code>Node&lt;ConditionData&gt;</code>","Condition.","<code>const</code> storage qualifier","<code>continue</code> jump statement","<code>core</code> version profile","<code>dmat2</code> type specifier","<code>dmat2x2</code> type specifier","<code>dmat2x3</code> type specifier","<code>dmat2x4</code> type specifier","<code>dmat3</code> type specifier","<code>dmat3x2</code> type specifier","<code>dmat3x3</code> type specifier","<code>dmat3x4</code> type specifier","<code>dmat4</code> type specifier","<code>dmat4x2</code> type specifier","<code>dmat4x3</code> type specifier","<code>dmat4x4</code> type specifier","<code>dvec2</code> type specifier","<code>dvec3</code> type specifier","<code>dvec4</code> type specifier","<code>--</code> unary operator","Type alias for <code>Node&lt;DeclarationData&gt;</code>","Declaration","Declaration","Variable declaration","A declaration.","<code>default:</code> case label","<code>#define</code> preprocessor directive","<code>disable</code> preprocessor extension behavior","<code>discard</code> jump statement","<code>/</code> binary operator","<code>/=</code> assignment operator","<code>do</code> iteration statement","An expression associated with a field selection (struct).","<code>double</code> type specifier","Double precision floating expression.","The first argument is the body of the if, the rest is the …","<code>#else</code> preprocessor directive","<code>#elseif</code> preprocessor directive","<code>enable</code> preprocessor extension behavior","<code>#endif</code> preprocessor directive","<code>==</code> binary operator","<code>=</code> assignment operator","<code>#error</code> preprocessor directive","<code>es</code> version profile","<code>[expr]</code> dimension","Type alias for <code>Node&lt;ExprData&gt;</code>","Expression used for the function name","An expression","The most general form of an expression.","Type alias for <code>Node&lt;ExprStatementData&gt;</code>","Expression statement.","Expression statement","Expression","<code>#extension</code> preprocessor directive","Type alias for <code>Node&lt;ExternalDeclarationData&gt;</code>","External declaration.","<code>flat</code> interpolation qualifier","<code>float</code> type specifier","Single precision floating expression.","<code>for</code> iteration statement","Type alias for <code>Node&lt;ForInitStatementData&gt;</code>","For init statement.","Type alias for <code>Node&lt;ForRestStatementData&gt;</code>","For init statement.","Type alias for <code>Node&lt;FullySpecifiedTypeData&gt;</code>","Fully specified type.","A functional call. It has a function identifier and a list …","Type alias for <code>Node&lt;FunIdentifierData&gt;</code>","Function identifier.","Type alias for <code>Node&lt;FunctionDefinitionData&gt;</code>","Function definition","Function definition.","A preprocessor function definition","Type alias for <code>Node&lt;FunctionParameterDeclarationData&gt;</code>","Function parameter declaration.","Type alias for <code>Node&lt;FunctionParameterDeclaratorData&gt;</code>","Function parameter declarator.","Type alias for <code>Node&lt;FunctionPrototypeData&gt;</code>","Function prototype declaration","Function prototype.","<code>&gt;</code> binary operator","<code>&gt;=</code> binary operator","<code>high</code> precision qualifier","<code>iimage1D</code> type specifier","<code>iimage1DArray</code> type specifier","<code>iimage2D</code> type specifier","<code>iimage2DArray</code> type specifier","<code>iimage2DMS</code> type specifier","<code>iimage2DMSArray</code> type specifier","<code>iimage2DRect</code> type specifier","<code>iimage3D</code> type specifier","<code>iimageBuffer</code> type specifier","<code>iimageCube</code> type specifier","<code>iimageCubeArray</code> type specifier","<code>isampler1D</code> type specifier","<code>isampler1DArray</code> type specifier","<code>isampler2D</code> type specifier","<code>isampler2DArray</code> type specifier","<code>isampler2DMS</code> type specifier","<code>isampler2DMSArray</code> type specifier","<code>isampler2DRect</code> type specifier","<code>isampler3D</code> type specifier","<code>isamplerBuffer</code> type specifier","<code>isamplerCube</code> type specifier","<code>isamplerCubeArray</code> type specifier","<code>ivec2</code> type specifier","<code>ivec3</code> type specifier","<code>ivec4</code> type specifier","Type alias for <code>Node&lt;IdentifierData&gt;</code>","An <code>ident = expr</code> layout qualifier","A generic identifier.","<code>#if</code> preprocessor directive","<code>#ifdef</code> preprocessor directive","<code>#ifndef</code> preprocessor directive","<code>image1D</code> type specifier","<code>image1DArray</code> type specifier","<code>image2D</code> type specifier","<code>image2DArray</code> type specifier","<code>image2DMS</code> type specifier","<code>image2DMSArray</code> type specifier","<code>image2DRect</code> type specifier","<code>image3D</code> type specifier","<code>imageBuffer</code> type specifier","<code>imageCube</code> type specifier","<code>imageCubeArray</code> type specifier","<code>in</code> storage qualifier","<code>inout</code> storage qualifier","<code>++</code> unary operator","<code>#include</code> preprocessor directive","Type alias for <code>Node&lt;InitDeclaratorListData&gt;</code>","List of declarators and initializers","Init declarator list.","Type alias for <code>Node&lt;InitializerData&gt;</code>","Initializer.","<code>int</code> type specifier","Integral constant expression.","Interpolation qualifier","Type alias for <code>Node&lt;InterpolationQualifierData&gt;</code>","Interpolation qualifier.","<code>invariant</code> qualifier","Invariant declaration","Iteration statement","Type alias for <code>Node&lt;IterationStatementData&gt;</code>","Iteration statement.","Jump statement","Type alias for <code>Node&lt;JumpStatementData&gt;</code>","Jump statement.","<code>&lt;&lt;</code> binary operator","<code>&lt;&lt;=</code> assignment operator","Layout qualifier","Type alias for <code>Node&lt;LayoutQualifierData&gt;</code>","Layout qualifier.","Type alias for <code>Node&lt;LayoutQualifierSpecData&gt;</code>","Layout qualifier spec.","<code>#line</code> preprocessor directive","Multiple initializer","<code>low</code> precision qualifier","<code>&lt;</code> binary operator","<code>&lt;=</code> binary operator","<code>mat2</code> type specifier","<code>mat2x2</code> type specifier","<code>mat2x3</code> type specifier","<code>mat2x4</code> type specifier","<code>mat3</code> type specifier","<code>mat3x2</code> type specifier","<code>mat3x3</code> type specifier","<code>mat3x4</code> type specifier","<code>mat4</code> type specifier","<code>mat4x2</code> type specifier","<code>mat4x3</code> type specifier","<code>mat4x4</code> type specifier","<code>medium</code> precision qualifier","<code>-</code> unary operator","<code>%</code> binary operator","<code>%=</code> assignment operator","<code>*</code> binary operator","<code>*</code> assignment operator","Multi-line comment","Named parameter","<code>noperspective</code> interpolation qualifier","A syntax node with span information","Trait for AST node contents.","Mark a type as representing data in an AST node","Trait for displaying a syntax node","Span information for a node, constructed from a pair of …","<code>!=</code> binary operator","<code>!</code> unary operator","A preprocessor definition","<code>||</code> binary operator","<code>|=</code> assignment operator","<code>out</code> storage qualifier","<code>patch</code> storage qualifier","Type alias for <code>Node&lt;PathData&gt;</code>","A path literal.","Post-decrementation of an expression.","Post-incrementation of an expression.","<code>#pragma</code> preprocessor directive","<code>precise</code> qualifier","Precision qualifier","Precision declaration","Type alias for <code>Node&lt;PrecisionQualifierData&gt;</code>","Precision qualifier.","Type alias for <code>Node&lt;PreprocessorData&gt;</code>","Preprocessor directive","Some basic preprocessor directives.","Type alias for <code>Node&lt;PreprocessorDefineData&gt;</code>","A #define preprocessor directive.","Type alias for <code>Node&lt;PreprocessorElseIfData&gt;</code>","An #else preprocessor directive.","Type alias for <code>Node&lt;PreprocessorErrorData&gt;</code>","An #error preprocessor directive.","Type alias for <code>Node&lt;PreprocessorExtensionData&gt;</code>","Type alias for <code>Node&lt;PreprocessorExtensionBehaviorData&gt;</code>","An #extension behavior annotation.","An #extension preprocessor directive.","Type alias for <code>Node&lt;PreprocessorExtensionNameData&gt;</code>","An #extension name annotation.","Type alias for <code>Node&lt;PreprocessorIfData&gt;</code>","An #if preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIfDefData&gt;</code>","An #ifdef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIfNDefData&gt;</code>","A #ifndef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIncludeData&gt;</code>","An #include name annotation.","Type alias for <code>Node&lt;PreprocessorLineData&gt;</code>","A #line preprocessor directive.","Type alias for <code>Node&lt;PreprocessorPragmaData&gt;</code>","A #pragma preprocessor directive. Holds compiler-specific …","Type alias for <code>Node&lt;PreprocessorUndefData&gt;</code>","A #undef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorVersionData&gt;</code>","A #version preprocessor directive.","Type alias for <code>Node&lt;PreprocessorVersionProfileData&gt;</code>","A #version profile annotation.","<code>&gt;&gt;</code> binary operator","<code>&gt;&gt;=</code> assignment operator","<code>readonly</code> storage qualifier","Specified with double quotes.","<code>require</code> preprocessor extension behavior","<code>restrict</code> storage qualifier","<code>return</code> jump statement","<code>sample</code> storage qualifier","<code>sampler1D</code> type specifier","<code>sampler1DArray</code> type specifier","<code>sampler1DArrayShadow</code> type specifier","<code>sampler1DShadow</code> type specifier","<code>sampler2D</code> type specifier","<code>sampler2DArray</code> type specifier","<code>sampler2DArrayShadow</code> type specifier","<code>sampler2DMS</code> type specifier","<code>sampler2DMSArray</code> type specifier","<code>sampler2DRect</code> type specifier","<code>sampler2DRectShadow</code> type specifier","<code>sampler2DShadow</code> type specifier","<code>sampler3D</code> type specifier","<code>samplerBuffer</code> type specifier","<code>samplerCube</code> type specifier","<code>samplerCubeArray</code> type specifier","<code>samplerCubeArrayShadow</code> type specifier","<code>samplerCubeShadow</code> type specifier","<code>if/...</code> statement","Type alias for <code>Node&lt;SelectionRestStatementData&gt;</code>","Selection rest statement.","Type alias for <code>Node&lt;SelectionStatementData&gt;</code>","Selection statement.","<code>shared</code> storage qualifier","<code>shared</code> layout qualifier","Simple initializer","Single-line comment","Type alias for <code>Node&lt;SingleDeclarationData&gt;</code>","Single declaration.","Type alias for <code>Node&lt;SingleDeclarationNoTypeData&gt;</code>","A single declaration with implicit, already-defined type.","A <code>SmolStr</code> is a string type that has the following …","<code>smooth</code> interpolation qualifier","A specific extension.","Type alias for <code>Node&lt;StatementData&gt;</code>","Body of the if.","Statement.","Storage qualifier","Type alias for <code>Node&lt;StorageQualifierData&gt;</code>","Storage qualifier.","<code>struct</code> type specifier","Type alias for <code>Node&lt;StructFieldSpecifierData&gt;</code>","Struct field specifier. Used to add fields to struct …","Type alias for <code>Node&lt;StructSpecifierData&gt;</code>","Struct specifier. Used to create new, user-defined types.","<code>-</code> binary operator","<code>-=</code> assignment operator","<code>subroutine</code> storage qualifier","<code>switch</code> statement","Type alias for <code>Node&lt;SwitchStatementData&gt;</code>","Switch statement.","A ternary conditional expression, gathering three …","A range in text, represented as a pair of <code>TextSize</code>.","A measure of text length. Also, equivalently, an index …","Starting rule.","Type alias for <code>Node&lt;TypeNameData&gt;</code>","Raw type name","Any type name.","Type alias for <code>Node&lt;TypeQualifierData&gt;</code>","Type qualifier.","Type alias for <code>Node&lt;TypeQualifierSpecData&gt;</code>","Type qualifier spec.","Type alias for <code>Node&lt;TypeSpecifierData&gt;</code>","Type name used for the function name (as a constructor)","Type specifier.","Type alias for <code>Node&lt;TypeSpecifierNonArrayData&gt;</code>","Type specifier (non-array).","<code>uimage1D</code> type specifier","<code>uimage1DArray</code> type specifier","<code>uimage2D</code> type specifier","<code>uimage2DArray</code> type specifier","<code>uimage2DMS</code> type specifier","<code>uimage2DMSArray</code> type specifier","<code>uimage2DRect</code> type specifier","<code>uimage3D</code> type specifier","<code>uimageBuffer</code> type specifier","<code>uimageCube</code> type specifier","<code>uimageCubeArray</code> type specifier","<code>uint</code> type specifier","Unsigned integral constant expression.","<code>usampler1D</code> type specifier","<code>usampler1DArray</code> type specifier","<code>usampler2D</code> type specifier","<code>usampler2DArray</code> type specifier","<code>usampler2DMS</code> type specifier","<code>usampler2DMSArray</code> type specifier","<code>usampler2DRect</code> type specifier","<code>usampler3D</code> type specifier","<code>usamplerBuffer</code> type specifier","<code>usamplerCube</code> type specifier","<code>usamplerCubeArray</code> type specifier","<code>uvec2</code> type specifier","<code>uvec3</code> type specifier","<code>uvec4</code> type specifier","A unary expression, gathering a single expression and a …","Type alias for <code>Node&lt;UnaryOpData&gt;</code>","All unary operators that exist in GLSL.","<code>#undef</code> preprocessor directive","<code>uniform</code> storage qualifier","Unnamed parameter","<code>[]</code> dimension","A variable expression, using an identifier.","<code>varying</code> storage qualifier","<code>vec2</code> type specifier","<code>vec3</code> type specifier","<code>vec4</code> type specifier","<code>#version</code> preprocessor directive","<code>void</code> type specifier","<code>volatile</code> storage qualifier","<code>warn</code> preprocessor extension behavior","<code>while</code> iteration statement","<code>writeonly</code> storage qualifier","<code>^^</code> binary operator","<code>^=</code> assignment operator","","","","","","","","Attached array specification","Array part of the specifier","Array specification","Try to parse this function identifier as a raw identifier","Try to parse this function identifier as a mutable raw …","","Parses this identifier as a glsl-lang-quote Rust identifier","Try to parse this function identifier as a <code>glsl-lang-quote</code> …","Try to parse this function identifier as a <code>glsl-lang-quote</code> …","Returns this identifier as a string slice","","Return this type name as a string slice","Create a new <code>TextRange</code> with the given <code>offset</code> and <code>len</code> (…","Behavior for the extension","Body of the switch statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add an offset to this range.","Checked addition. Returns <code>None</code> if overflow occurred.","Subtract an offset from this range.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raw pragma text","Condition to evaluate","Loop condition","Condition expression","Condition expression","Check if this range contains an offset.","Check if this range contains an offset.","Check if this range completely contains another range.","Contents of this syntax node","Extends the range to cover <code>other</code> as well.","Extends the range to cover <code>other</code> offsets as well.","Declare a new variable.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of all the dimensions – possibly unsized or …","Obtain a display wrapper for the current node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display the node’s children","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display extra information for the node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a zero-length range at the specified offset (…","Ending position of the node","","","","The end point of this range.","","","","Return the end of this span as a LexerPosition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Field specifications","Declared fields","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Create a new node span from two lexer positions","","","","","","","","","First declaration","Expression to evaluate and switch on","Create a function identifier from an identifier","Raw identifier","Parameter name","Declared identifier","Identifier to test","Identifier to test","Associated identifiers","List of declared identifiers for this field","List of layout qualifiers","Initializer expression","Initializer expression","The range covered by both ranges, if it exists. If the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the wrapped syntax node, discarding the span …","Convert the contents into a node","","Check if this range is empty.","Return true if this range is empty","","true if this comment is a multi-line comment","true if this comment is a single-line comment","","The size of this range.","Return the length of this span","Line index","Map this content of this node into a new node","Map this content of this node into a new node with the …","Error message","Name of the syntax node’s type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Structure name","Block name","Function name","Declared identifier","Identifier to undefine","Name of the target extension","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>TextRange</code> with the given <code>start</code> and <code>end</code> (…","Create a new syntax node with span information","Create a new node span","Create a new ArrayedIdentifier from a raw identifier and a …","Create a new FullySpecifiedType from a …","Return a 0-length span located at the end of the given …","Constructs inline variant of <code>SmolStr</code>.","","Return a 0-length span located at the start of the given …","The text size of some primitive text-like object.","Relative order of the two ranges (overlapping ranges are …","Function parameters","","","","","","","","","","","","","Include path","Loop increment operation","","","","Version profile","Function prototype","Type qualifiers for the field","Optional type qualifier","Block type qualifier","List of type qualifiers","Return the span range","Range of the node in the input slice","","Rest of the selection statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source id of the node","","","","","","","Return the source identifier for this node span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The index of this span into the list of parsed units. This …","Source index","Span in the input this node was parsed from","Add span information to a syntax node","Starting position of the node","","","","The start point of this range.","","","","Return the start of this span as a LexerPosition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Function body","List of statements","","","","","","","","Following declarations","Get the comment’s text, regardless of its typeype name portion of the specifier","Type of the field","Type specifier","Return type","Parameter type","Declaration type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a range up to the given end (<code>..end</code>).","Construct an <code>Expr::Variable(name)</code> from an identifier <code>name</code>","Version number","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of arguments for the function","Identifier for the definition","Identifier for the definition","Associated value","Associated value","","","","","","","","","","","","","","","","","","","","Default lexer to use for parsing sources","GLSL parsing with the default lexer","Part of the syntax tree that can be extracted from a …","GLSL language parsing capability","Trait for creating parse builders from lexer inputs","AST node returned by this parser","GLSL language parser","Type of the lexer associated with this input","A parsable is something we can parse either directly, or …","GLSL language parsing functions","Builder structure for a parsing operation","Parsing context","Parsing context data","Errors returned by the parsing operation","Parsing options","Result of a parsing operation","Type of the parser to create","Add a new comment to the parsed comments list","Add a new comment to the parsed comments list","Register <code>name</code> as a new type name","Register <code>name</code> as a new type name","Allow Rust quoting identifiers (<code>#(ident)</code>) in the source","","","","","","","Parse operation builder definition","Create a builder for this lexer input","","","","Clone the parsing data and return the cloned context","","","","Get the list of comments stored in this parse context","List of parsed comments (or <code>None</code> to disable comment …","","Obtain a reference to the context’s data","Parsing data","Obtain an exclusive reference to the context’s data","","","","Default GLSL version number to parse source as","","","","Extract the subtree for Self from a parent tree R","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Return <code>true</code> if this parsing context supports comments","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume this ParseContext and return its data. Will fail …","Return <code>true</code> if the given name is a type name","Return <code>true</code> if the given name is a type name","","List of known type names","","","Instantiate the parser","Create new parsing options using default values","Create a new parsing context from this options object","Create a new ParseContextData object","Update the context data with a new identifier in a given …","Update the context data with a new identifier in a given …","Create a new parsing context from this options object, …","Create a new parsing context from this options object, …","Create a new parsing context from this options object and …","Create a new parsing context from this options object, …","","","Parse the input","Parse the input source","Parse the input source","Parse the input source with the given context","Parse the input source with the given context","Parse the input source with the given context","Parse the input source with the given options","Parse the input source with the given options","Parse the input source with the given options","","","Leave the current nesting level","Leave the current nesting level","Enter a new nesting level for declarations","Enter a new nesting level for declarations","","Unique source identifier for token positions","<code>true</code> if the GLSL target should be Vulkan instead of OpenGL","","","","","","","","","","","","","Create a new ParseContextData object with comments parsing …","Create a new ParseContextData object with comments parsing …","Create a new parse context cloning the given one’s data, …","Create a new ParseContextData object with the given type …","Wrap the given source which parses as Self into something …","Trait for creating parse builders from lexer inputs","Type of the lexer associated with this input","Builder structure for a parsing operation","","","Create a builder for this lexer input","Set the parse options for this parse","","Create a new parse builder from the given input string","Execute the parsing operation, and extract the wanted node","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create a new parse builder from the given input string","Set the parse options for this parse","","Execute the parsing operation","Execute the parsing operation","Set the parser instance to use for this parse","","","","","","Part of the syntax tree that can be extracted from a …","A parsable is something we can parse either directly, or …","Extract the subtree for Self from a parent tree R","","Parse the input source","Parse the input source","Parse the input source with the given context","Parse the input source with the given options","Wrap the given source which parses as Self into something …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A GLSL450/GLSL460 transpiler that takes a syntax tree and …","","Formatting settings for the GLSL transpiler","Formatting state of the GLSL transpiler","Precedence information for transpiling parentheses properly","Indentation style of the output","A newline","No indentation is generated","No whitespace","A space","Items are indented with spaces.","Items are indented with tabs. In case spaces are needed …","Formatter whitespace","","","","","","","","","","","","","","","","","","","","Consume the pending newlines","What to insert after a declaration","","","","","Enter a new block, and update the indentation level","","","","","Exit the current block, and update the indentation level","Flush pending newlines to the output, if any","Flush pending newlines as spaces to the output, if any","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","What to insert after a function definition","Indentation style of the output","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Append a pending new line to the output","","Insert newline after block close brace","Insert newlines after block open braces","Insert newlines before block close braces","Return the precedence level of the expression","Formatting settings","Transpile an array_spec to GLSL","Transpile an arrayed_identifier to GLSL","Transpile an assignment_op to GLSL","Transpile a binary_op to GLSL","Transpile a block(f: &amp;mut F, b: &amp;ast::Block, state: &amp;mut …","Transpile a case_label to GLSL","Transpile a compound_statement to GLSL","Transpile a condition to GLSL","Transpile a declaration to GLSL","Transpile a double(f: &amp;mut F, x: f64, _: &amp;mut …","Transpile an expr to GLSL","Transpile an expression_statement to GLSL","Transpile an external_declaration to GLSL","Transpile a float(f: &amp;mut F, x: f32, _: &amp;mut …","Transpile a for_init_statement to GLSL","Transpile a for_rest_statement to GLSL","Transpile a fully_specified_type to GLSL","Transpile a function_definition to GLSL","Transpile a function_identifier to GLSL","Transpile a function_parameter_declaration to GLSL","Transpile a function_parameter_declarator to GLSL","Transpile a function_prototype to GLSL","Transpile an identifier to GLSL","Transpile an init_declarator_list to GLSL","Transpile an initializer to GLSL","Transpile an interpolation_qualifier to GLSL","Transpile an iteration_statement to GLSL","Transpile a jump_statement to GLSL","Transpile a layout_qualifier to GLSL","Transpile a layout_qualifier_spec to GLSL","Transpile a path(f: &amp;mut F, path: &amp;ast::Path, _: &amp;mut …","Transpile a precision_qualifier to GLSL","Transpile a preprocessor to GLSL","Transpile a preprocessor_define to GLSL","Transpile a preprocessor_else(f: &amp;mut F, _: &amp;mut …","Transpile a preprocessor_elseif to GLSL","Transpile a preprocessor_endif(f: &amp;mut F, _: &amp;mut …","Transpile a preprocessor_error to GLSL","Transpile a preprocessor_extension to GLSL","Transpile a preprocessor_if to GLSL","Transpile a preprocessor_ifdef to GLSL","Transpile a preprocessor_ifndef to GLSL","Transpile a preprocessor_include to GLSL","Transpile a preprocessor_line to GLSL","Transpile a preprocessor_pragma to GLSL","Transpile a preprocessor_undef to GLSL","Transpile a preprocessor_version to GLSL","Transpile a selection_rest_statement to GLSL","Transpile a selection_statement to GLSL","Transpile a single_declaration to GLSL","Transpile a single_declaration_no_type to GLSL","Transpile a statement to GLSL","Transpile a storage_qualifier to GLSL","Transpile a struct to GLSL","Transpile a struct_field to GLSL","Transpile a struct_non_declaration to GLSL","Transpile a subroutine to GLSL","Transpile a switch_statement to GLSL","Transpile a translation_unit to GLSL","Transpile a type_name to GLSL","Transpile a type_qualifier to GLSL","Transpile a type_qualifier_spec to GLSL","Transpile a type_specifier to GLSL","Transpile a type_specifier_non_array to GLSL","Transpile an unary_op to GLSL","Insert spaces around binary ops","What to insert after a statement","What to insert after a struct declaration","What to insert between fields of a struct","","","","","","","","","","","","","","","","","","","","Write the current indenting level and style to the output","Write this whitespace to the output","Write a binary operator","Write a declaration terminator","Write a function definition terminator","","","Write a statement terminator","Write a struct declaration terminator","Write a struct field separator","Number of tab characters used per indent level","Number of space characters used per indent level","Size of the tabs in characters","The visitor will go deeper in the AST by visiting all the …","Part of the AST that can be visited.","Part of the AST that can be visited.","The visitor won’t visit children nor siblings and will …","Visit strategy after having visited an AST node.","Visitor object, visiting AST nodes.","Visitor object, visiting AST nodes.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Visit an AST node.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visit an AST node.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,0,0,18,0,29,30,1,2,3,4,5,6,31,7,8,32,9,10,11,12,13,14,33,15,34,35,36,37,38,39,40,16,17,41,18,42,19,20,21,22,23,43,44,24,25,26,45,46,27,28,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,29,30,1,2,3,4,5,6,31,7,8,32,9,10,11,12,13,14,33,15,34,35,36,37,38,39,40,16,17,41,18,42,19,20,21,22,23,43,44,24,25,26,45,46,27,28,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,62,63,64,65,66,67,68,69,70,71,69,70,0,0,0,0,0,0,72,73,0,0,74,75,74,74,74,72,0,0,69,69,69,0,76,0,74,72,72,77,75,78,0,79,0,75,75,72,0,0,80,68,79,0,0,0,0,75,77,80,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,68,0,81,79,82,0,78,83,84,77,69,70,85,72,74,72,86,83,83,84,83,69,70,83,80,87,0,88,73,0,0,0,79,82,83,0,0,89,74,72,85,0,0,0,0,0,0,72,0,0,0,81,0,90,0,0,0,0,0,76,0,69,69,91,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,92,0,83,83,83,74,74,74,74,74,74,74,74,74,74,74,75,75,68,83,0,76,0,0,0,74,72,93,0,0,93,76,79,0,0,79,0,0,69,70,93,0,0,0,0,83,94,91,69,69,74,74,74,74,74,74,74,74,74,74,74,74,91,68,69,70,69,70,95,96,89,0,0,0,0,0,69,68,90,69,70,75,75,0,0,72,72,83,93,93,76,0,0,0,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,70,75,67,84,75,77,75,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,79,0,0,0,0,75,92,94,95,0,0,0,0,0,89,71,0,86,0,93,0,0,74,0,0,0,0,69,70,75,79,0,0,72,0,0,0,0,74,0,0,0,0,0,0,88,0,0,0,74,74,74,74,74,74,74,74,74,74,74,74,72,74,74,74,74,74,74,74,74,74,74,74,74,74,74,72,0,0,83,75,96,87,72,75,74,74,74,83,74,75,84,85,75,69,70,97,97,98,98,97,98,98,99,100,101,88,88,102,62,88,72,62,63,64,97,103,104,62,63,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,62,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,97,98,97,98,62,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,62,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,63,98,102,105,128,119,120,121,123,97,97,97,102,97,97,79,63,97,98,63,102,102,62,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,111,131,62,63,64,67,74,102,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,131,62,62,63,63,64,64,67,67,74,74,102,100,100,106,106,107,107,99,99,108,108,93,93,75,75,109,109,92,92,91,91,89,89,110,110,111,111,87,87,76,76,112,112,88,88,113,113,96,96,114,114,115,115,101,101,116,116,94,94,72,72,68,68,69,69,70,70,65,65,81,81,117,117,118,118,79,79,66,66,119,119,73,73,86,86,104,104,78,78,85,85,82,82,120,120,77,77,83,83,90,90,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,80,80,103,103,71,71,84,84,95,95,131,62,62,63,63,64,64,67,67,74,74,102,100,100,106,106,107,107,99,99,108,108,93,93,75,75,109,109,92,92,91,91,89,89,110,110,111,111,87,87,76,76,112,112,88,88,113,113,96,96,114,114,115,115,101,101,116,116,94,94,72,72,68,68,69,69,70,70,65,65,81,81,117,117,118,118,79,79,66,66,119,119,73,73,86,86,104,104,78,78,85,85,82,82,120,120,77,77,83,83,90,90,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,80,80,103,103,71,71,84,84,95,95,97,131,62,63,64,97,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,97,97,62,63,63,63,63,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,65,106,112,62,62,63,63,64,64,97,98,67,74,102,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,62,62,62,63,63,63,63,64,64,64,64,97,97,98,98,98,67,67,74,74,74,102,102,102,105,100,100,100,100,106,106,107,107,99,99,99,108,108,93,93,75,75,109,109,92,92,91,91,89,89,110,110,110,111,111,87,87,76,76,112,112,88,88,113,113,96,96,114,114,115,115,101,101,116,116,94,94,94,94,72,72,72,72,72,72,72,68,68,69,69,70,70,65,65,81,81,117,117,118,118,79,79,66,66,119,119,73,73,86,86,104,104,78,78,85,85,82,82,120,120,77,77,83,83,90,90,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,80,80,103,103,71,71,84,84,95,95,63,63,63,63,118,105,63,62,63,64,97,98,102,105,115,104,88,99,114,116,124,125,112,107,109,101,116,97,62,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,102,132,63,97,105,63,95,95,63,97,105,127,102,102,122,131,62,62,63,63,64,64,67,67,74,74,102,100,100,106,106,107,107,99,99,108,108,93,93,75,75,109,109,92,92,91,91,89,89,110,110,111,111,87,87,76,76,112,112,88,88,113,113,96,96,114,114,115,115,101,101,116,116,94,94,72,72,68,68,69,69,70,70,65,65,81,81,117,117,118,118,79,79,66,66,119,119,73,73,86,86,104,104,78,78,85,85,82,82,120,120,77,77,83,83,90,90,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,80,80,103,103,71,71,84,84,95,95,106,112,113,101,129,103,62,64,97,98,67,74,105,100,106,107,99,108,93,75,109,92,110,111,87,76,112,88,113,96,114,115,101,116,94,72,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,103,71,95,63,97,102,105,99,110,105,63,63,105,98,97,113,65,65,65,65,65,65,62,63,64,98,102,105,126,120,72,68,69,130,117,107,110,112,108,105,105,98,119,62,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,131,62,63,64,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,105,127,102,132,131,62,63,64,97,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,97,97,117,118,97,97,98,98,97,98,98,115,95,62,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,62,63,63,64,102,62,63,64,97,98,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,62,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,100,107,110,113,114,101,62,63,64,97,98,67,74,102,105,100,106,107,99,108,93,75,109,92,91,89,110,111,87,76,112,88,113,96,114,115,101,116,94,72,68,69,70,65,81,117,118,79,66,119,73,86,104,78,85,82,120,77,83,90,121,122,123,124,125,126,127,128,129,130,80,103,71,84,95,97,72,130,65,65,65,133,134,135,136,137,138,138,138,139,140,141,142,143,141,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,150,151,152,153,154,155,156,159,151,152,153,160,161,162,163,164,165,166,167,168,167,168,169,170,171,172,173,171,172,173,173,174,175,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,190,191,190,192,193,194,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,0,0,0,0,0,210,0,211,0,0,0,0,0,0,0,0,212,213,214,213,214,215,215,213,214,215,213,214,0,211,215,213,214,213,215,213,214,214,214,216,213,213,213,215,213,214,215,215,213,214,217,215,213,214,215,213,213,214,213,0,215,213,214,213,213,214,216,214,215,213,210,215,213,214,213,214,213,213,213,213,216,0,210,218,219,220,218,219,220,218,219,216,214,213,214,213,214,216,215,215,215,213,214,215,213,214,215,213,214,215,213,214,214,214,213,214,217,0,211,0,216,216,211,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,0,0,217,0,220,220,220,220,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,0,0,0,0,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,223,222,223,224,222,223,224,223,223,223,223,223,222,223,224,223,222,223,224,224,224,224,224,223,223,223,223,223,223,222,223,224,222,223,224,222,223,224,223,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,0,0,0,0,0,0,341,342,341,341,342,342,0,343,342,341,344,345,343,342,341,344,345,343,342,341,344,345,342,341,344,345,345,344,342,344,345,343,345,342,341,344,345,345,345,345,342,341,344,345,342,341,344,345,345,343,344,344,345,342,341,344,345,343,342,344,345,345,345,344,344,344,346,345,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,344,344,344,344,342,341,344,345,342,341,344,345,343,342,341,344,345,343,342,341,344,345,343,342,341,345,345,345,345,345,345,345,345,347,348,347,349,0,0,349,0,0,0,349,349,349,349,349,349,349,349,349,0,0,349,349,349,349,350,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,353,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352,351,352],"f":[null,[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],[[["translationunit",3]],["option",4]],null,null,[[["",0]],["u32",0]],nullnull,[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],[[["str",0]],["cow",4,[["str",0]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textsize",3]],[[["textsize",3]],["textsize",3]],[[["",0]]],[[["",0]]],[[["",0],["delta",4,[["textsize",3]]]]],null,null,null,[[["",0]],["option",4,[["node",3]]]],[[["",0]],["option",4,[["node",3]]]],[[["",0]],["",0]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["textsize",3],["textsize",3]],["textrange",3]],null,null,[[["",0]],["",0]],[[["",0]],["strtextsize",3]],["option",4,[["textrange",3]]]],[[["textsize",3]],["option",4,[["textsize",3]]]],[[["textsize",3]],["option",4,[["textrange",3]]]],[[["textsize",3]],["option",4,[["textsize",3]]]],[[["",0]],["identifierdata",3]],[[["",0]],["smolstr",3]],[[["",0]],["typenamedata",3]],[[["",0]],["textrange",3]],[[["",0]],["textsize",3]],[[["",0]],["pathdata",4]],[[["",0]],["typespecifiernonarraydata",4]],[[["",0]],["node",3]],[[["",0]],["nodespan",3]],[[["",0]],["typespecifierdata",3]],[[["",0]],["structspecifierdata",3]],[[["",0]],["structfieldspecifierdata",3]],[[["",0]],["arrayedidentifierdata",3]],[[["",0]],["typequalifierdata",3]],[[["",0]],["typequalifierspecdata",4]],[[["",0]],["storagequalifierdata",4]],[[["",0]],["layoutqualifierdata",3]],[[["",0]],["layoutqualifierspecdata",4]],[[["",0]],["precisionqualifierdata",4]],[[["",0]],["interpolationqualifierdata",4]],[[["",0]],["fullyspecifiedtypedata",3]],[[["",0]],["arrayspecifierdata",3]],[[["",0]],["arrayspecifierdimensiondata",4]],[[["",0]],["declarationdata",4]],[[["",0]],["blockdata",3]],[[["",0]],["funidentifierdata",4]],[[["",0]],["functionprototypedata",3]],[[["",0]],["functionparameterdeclarationdata",4]],[[["",0]],["functionparameterdeclaratordata",3]],[[["",0]],["initdeclaratorlistdata",3]],[[["",0]],["singledeclarationdata",3]],[[["",0]],["singledeclarationnotypedata",3]],[[["",0]],["initializerdata",4]],[[["",0]],["exprdata",4]],[[["",0]],["unaryopdata",4]],[[["",0]],["binaryopdata",4]],[[["",0]],["assignmentopdata",4]],[[["",0]],["translationunit",3]],[[["",0]],["externaldeclarationdata",4]],[[["",0]],["functiondefinitiondata",3]],[[["",0]],["compoundstatementdata",3]],[[["",0]],["statementdata",4]],[[["",0]],["exprstatementdata",3]],[[["",0]],["selectionstatementdata",3]],[[["",0]],["conditiondata",4]],[[["",0]],["selectionreststatementdata",4]],[[["",0]],["switchstatementdata",3]],[[["",0]],["caselabeldata",4]],[[["",0]],["iterationstatementdata",4]],[[["",0]],["forinitstatementdata",4]],[[["",0]],["forreststatementdata",3]],[[["",0]],["jumpstatementdata",4]],[[["",0]],["preprocessordata",4]],[[["",0]],["preprocessordefinedata",4]],[[["",0]],["preprocessorelseifdata",3]],[[["",0]],["preprocessorerrordata",3]],[[["",0]],["preprocessorifdata",3]],[[["",0]],["preprocessorifdefdata",3]],[[["",0]],["preprocessorifndefdata",3]],[[["",0]],["preprocessorincludedata",3]],[[["",0]],["preprocessorlinedata",3]],[[["",0]],["preprocessorpragmadata",3]],[[["",0]],["preprocessorundefdata",3]],[[["",0]],["preprocessorversiondata",3]],[[["",0]],["preprocessorversionprofiledata",4]],[[["",0]],["preprocessorextensiondata",3]],[[["",0]],["preprocessorextensionnamedata",4]],[[["",0]],["preprocessorextensionbehaviordata",4]],[[["",0]],["commentdatasmolstr",3]],["ordering",4]],[[["",0],["textsize",3]],["ordering",4]],[[["",0],["node",3]],["ordering",4]],[[["",0],["nodespan",3]],["ordering",4]],null,null,null,null,null,[[["textsize",3]],["bool",0]],[[["textsize",3]],["bool",0]],[[["textrange",3]],["bool",0]],null,[[["textrange",3]],["textrange",3]],[[["textsize",3]],["textrange",3]],[[],["statementdata",4]],[[],["smolstr",3]],[[],["textrange",3]],[[],["textsize",3]],[[["",0]],["str",0]],[[["",0]]],[[["",0]]],[[],["result",4,[["identifierdata",3]]]],[[],["result",4,[["smolstr",3]]]],[[],["result",4,[["typenamedata",3]]]],[[],["result",4,[["textrange",3]]]],[[],["result",4,[["textsize",3]]]],[[],["result",4,[["pathdata",4]]]],[[],["result",4,[["typespecifiernonarraydata",4]]]],[[],["result",4,[["node",3]]]],[[],["result",4,[["nodespan",3]]]],[[],["result",4,[["typespecifierdata",3]]]],[[],["result",4,[["structspecifierdata",3]]]],[[],["result",4,[["structfieldspecifierdata",3]]]],[[],["result",4,[["arrayedidentifierdata",3]]]],[[],["result",4,[["typequalifierdata",3]]]],[[],["result",4,[["typequalifierspecdata",4]]]],[[],["result",4,[["storagequalifierdata",4]]]],[[],["result",4,[["layoutqualifierdata",3]]]],[[],["result",4,[["layoutqualifierspecdata",4]]]],[[],["result",4,[["precisionqualifierdata",4]]]],[[],["result",4,[["interpolationqualifierdata",4]]]],[[],["result",4,[["fullyspecifiedtypedata",3]]]],[[],["result",4,[["arrayspecifierdata",3]]]],[[],["result",4,[["arrayspecifierdimensiondata",4]]]],[[],["result",4,[["declarationdata",4]]]],[[],["result",4,[["blockdata",3]]]],[[],["result",4,[["funidentifierdata",4]]]],[[],["result",4,[["functionprototypedata",3]]]],[[],["result",4,[["functionparameterdeclarationdata",4]]]],[[],["result",4,[["functionparameterdeclaratordata",3]]]],[[],["result",4,[["initdeclaratorlistdata",3]]]],[[],["result",4,[["singledeclarationdata",3]]]],[[],["result",4,[["singledeclarationnotypedata",3]]]],[[],["result",4,[["initializerdata",4]]]],[[],["result",4,[["exprdata",4]]]],[[],["result",4,[["unaryopdata",4]]]],[[],["result",4,[["binaryopdata",4]]]],[[],["result",4,[["assignmentopdata",4]]]],[[],["result",4,[["translationunit",3]]]],[[],["result",4,[["externaldeclarationdata",4]]]],[[],["result",4,[["functiondefinitiondata",3]]]],[[],["result",4,[["compoundstatementdata",3]]]],[[],["result",4,[["statementdata",4]]]],[[],["result",4,[["exprstatementdata",3]]]],[[],["result",4,[["selectionstatementdata",3]]]],[[],["result",4,[["conditiondata",4]]]],[[],["result",4,[["selectionreststatementdata",4]]]],[[],["result",4,[["switchstatementdata",3]]]],[[],["result",4,[["caselabeldata",4]]]],[[],["result",4,[["iterationstatementdata",4]]]],[[],["result",4,[["forinitstatementdata",4]]]],[[],["result",4,[["forreststatementdata",3]]]],[[],["result",4,[["jumpstatementdata",4]]]],[[],["result",4,[["preprocessordata",4]]]],[[],["result",4,[["preprocessordefinedata",4]]]],[[],["result",4,[["preprocessorelseifdata",3]]]],[[],["result",4,[["preprocessorerrordata",3]]]],[[],["result",4,[["preprocessorifdata",3]]]],[[],["result",4,[["preprocessorifdefdata",3]]]],[[],["result",4,[["preprocessorifndefdata",3]]]],[[],["result",4,[["preprocessorincludedata",3]]]],[[],["result",4,[["preprocessorlinedata",3]]]],[[],["result",4,[["preprocessorpragmadata",3]]]],[[],["result",4,[["preprocessorundefdata",3]]]],[[],["result",4,[["preprocessorversiondata",3]]]],[[],["result",4,[["preprocessorversionprofiledata",4]]]],[[],["result",4,[["preprocessorextensiondata",3]]]],[[],["result",4,[["preprocessorextensionnamedata",4]]]],[[],["result",4,[["preprocessorextensionbehaviordata",4]]]],[[],["result",4,[["commentdata",4]]]],null,[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3,[["node",3]]]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["textsize",3]],["textrange",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[],["textsize",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["lexerposition",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],null,[[["",0]],["bound",4,[["textsize",3]]]],[[["",0],["identifierdata",3]],["bool",0]],[[["",0],["string",3]],["bool",0]],[[["",0],["string",3]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["smolstr",3]],["bool",0]],[[["",0],["typenamedata",3]],["bool",0]],[[["",0],["textrange",3]],["bool",0]],[[["",0],["textsize",3]],["bool",0]],[[["",0],["pathdata",4]],["bool",0]],[[["",0],["typespecifiernonarraydata",4]],["bool",0]],[[["",0],["node",3]],["bool",0]],[[["",0],["nodespan",3]],["bool",0]],[[["",0],["typespecifierdata",3]],["bool",0]],[[["",0],["structspecifierdata",3]],["bool",0]],[[["",0],["structfieldspecifierdata",3]],["bool",0]],[[["",0],["arrayedidentifierdata",3]],["bool",0]],[[["",0],["typequalifierdata",3]],["bool",0]],[[["",0],["typequalifierspecdata",4]],["bool",0]],[[["",0],["storagequalifierdata",4]],["bool",0]],[[["",0],["layoutqualifierdata",3]],["bool",0]],[[["",0],["layoutqualifierspecdata",4]],["bool",0]],[[["",0],["precisionqualifierdata",4]],["bool",0]],[[["",0],["interpolationqualifierdata",4]],["bool",0]],[[["",0],["fullyspecifiedtypedata",3]],["bool",0]],[[["",0],["arrayspecifierdata",3]],["bool",0]],[[["",0],["arrayspecifierdimensiondata",4]],["bool",0]],[[["",0],["declarationdata",4]],["bool",0]],[[["",0],["blockdata",3]],["bool",0]],[[["",0],["funidentifierdata",4]],["bool",0]],[[["",0],["functionprototypedata",3]],["bool",0]],[[["",0],["functionparameterdeclarationdata",4]],["bool",0]],[[["",0],["functionparameterdeclaratordata",3]],["bool",0]],[[["",0],["initdeclaratorlistdata",3]],["bool",0]],[[["",0],["singledeclarationdata",3]],["bool",0]],[[["",0],["singledeclarationnotypedata",3]],["bool",0]],[[["",0],["initializerdata",4]],["bool",0]],[[["",0],["exprdata",4]],["bool",0]],[[["",0],["unaryopdata",4]],["bool",0]],[[["",0],["binaryopdata",4]],["bool",0]],[[["",0],["assignmentopdata",4]],["bool",0]],[[["",0],["translationunit",3]],["bool",0]],[[["",0],["externaldeclarationdata",4]],["bool",0]],[[["",0],["functiondefinitiondata",3]],["bool",0]],[[["",0],["compoundstatementdata",3]],["bool",0]],[[["",0],["statementdata",4]],["bool",0]],[[["",0],["exprstatementdata",3]],["bool",0]],[[["",0],["selectionstatementdata",3]],["bool",0]],[[["",0],["conditiondata",4]],["bool",0]],[[["",0],["selectionreststatementdata",4]],["bool",0]],[[["",0],["switchstatementdata",3]],["bool",0]],[[["",0],["caselabeldata",4]],["bool",0]],[[["",0],["iterationstatementdata",4]],["bool",0]],[[["",0],["forinitstatementdata",4]],["bool",0]],[[["",0],["forreststatementdata",3]],["bool",0]],[[["",0],["jumpstatementdata",4]],["bool",0]],[[["",0],["preprocessordata",4]],["bool",0]],[[["",0],["preprocessordefinedata",4]],["bool",0]],[[["",0],["preprocessorelseifdata",3]],["bool",0]],[[["",0],["preprocessorerrordata",3]],["bool",0]],[[["",0],["preprocessorifdata",3]],["bool",0]],[[["",0],["preprocessorifdefdata",3]],["bool",0]],[[["",0],["preprocessorifndefdata",3]],["bool",0]],[[["",0],["preprocessorincludedata",3]],["bool",0]],[[["",0],["preprocessorlinedata",3]],["bool",0]],[[["",0],["preprocessorpragmadata",3]],["bool",0]],[[["",0],["preprocessorundefdata",3]],["bool",0]],[[["",0],["preprocessorversiondata",3]],["bool",0]],[[["",0],["preprocessorversionprofiledata",4]],["bool",0]],[[["",0],["preprocessorextensiondata",3]],["bool",0]],[[["",0],["preprocessorextensionnamedata",4]],["bool",0]],[[["",0],["preprocessorextensionbehaviordata",4]],["bool",0]],[[["",0],["commentdata",4]],["bool",0]],[[["translationunit",3]],["option",4]],null,null,[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[["str",0]],["identifierdata",3]],[[["node",3,[["identifierdata",3]]]],["identifierdata",3]],[[]],[[],["smolstr",3]],[[["unescaped",3]],["smolstr",3]],[[["tokentext",3]],["smolstr",3]],[[["node",3,[["typenamedata",3]]]],["typenamedata",3]],[[["identifierdata",3]],["typenamedata",3]],[[["str",0]],["typenamedata",3]],[[]],[[["nodespan",3]],["textrange",3]],[[]],[[["u32",0]],["textsize",3]],[[["lexerposition",3]],["textsize",3]],[[]],[[["node",3,[["pathdata",4]]]],["pathdata",4]],[[]],[[]],[[["node",3,[["typenamedata",3]]]],["typespecifiernonarraydata",4]],[[["node",3,[["typespecifiernonarraydata",4]]]],["typespecifiernonarraydata",4]],[[],["node",3]],[[["never",0]]],[[]],[[]],[[["node",3,[["typespecifiernonarraydata",4]]]],["typespecifierdata",3]],[[["node",3,[["typespecifierdata",3]]]],["typespecifierdata",3]],[[]],[[["typespecifiernonarraydata",4]],["typespecifierdata",3]],[[["node",3,[["structspecifierdata",3]]]],["structspecifierdata",3]],[[]],[[]],[[["node",3,[["structfieldspecifierdata",3]]]],["structfieldspecifierdata",3]],[[]],[[["node",3,[["arrayedidentifierdata",3]]]],["arrayedidentifierdata",3]],[[["str",0]],["arrayedidentifierdata",3]],[[]],[[["node",3,[["typequalifierdata",3]]]],["typequalifierdata",3]],[[["node",3,[["typequalifierspecdata",4]]]],["typequalifierspecdata",4]],[[]],[[["node",3,[["storagequalifierdata",4]]]],["storagequalifierdata",4]],[[]],[[]],[[["node",3,[["layoutqualifierdata",3]]]],["layoutqualifierdata",3]],[[["node",3,[["layoutqualifierspecdata",4]]]],["layoutqualifierspecdata",4]],[[]],[[]],[[["node",3,[["precisionqualifierdata",4]]]],["precisionqualifierdata",4]],[[["node",3,[["interpolationqualifierdata",4]]]],["interpolationqualifierdata",4]],[[]],[[]],[[["typespecifiernonarraydata",4]],["fullyspecifiedtypedata",3]],[[["node",3,[["fullyspecifiedtypedata",3]]]],["fullyspecifiedtypedata",3]],[[["node",3,[["arrayspecifierdata",3]]]],["arrayspecifierdata",3]],[[]],[[]],[[["node",3,[["arrayspecifierdimensiondata",4]]]],["arrayspecifierdimensiondata",4]],[[["node",3,[["declarationdata",4]]]],["declarationdata",4]],[[]],[[["node",3,[["blockdata",3]]]],["blockdata",3]],[[]],[[["node",3,[["funidentifierdata",4]]]],["funidentifierdata",4]],[[]],[[]],[[["node",3,[["functionprototypedata",3]]]],["functionprototypedata",3]],[[]],[[["node",3,[["functionparameterdeclarationdata",4]]]],["functionparameterdeclarationdata",4]],[[]],[[["node",3,[["functionparameterdeclaratordata",3]]]],["functionparameterdeclaratordata",3]],[[]],[[["node",3,[["initdeclaratorlistdata",3]]]],["initdeclaratorlistdata",3]],[[]],[[["node",3,[["singledeclarationdata",3]]]],["singledeclarationdata",3]],[[]],[[["node",3,[["singledeclarationnotypedata",3]]]],["singledeclarationnotypedata",3]],[[["exprdata",4]],["initializerdata",4]],[[]],[[["node",3,[["exprdata",4]]]],["initializerdata",4]],[[["node",3,[["initializerdata",4]]]],["initializerdata",4]],[[["i32",0]],["exprdata",4]],[[["u32",0]],["exprdata",4]],[[]],[[["bool",0]],["exprdata",4]],[[["node",3,[["exprdata",4]]]],["exprdata",4]],[[["f32",0]],["exprdata",4]],[[["f64",0]],["exprdata",4]],[[]],[[["node",3,[["unaryopdata",4]]]],["unaryopdata",4]],[[["node",3,[["binaryopdata",4]]]],["binaryopdata",4]],[[]],[[]],[[["node",3,[["assignmentopdata",4]]]],["assignmentopdata",4]],[[["node",3,[["translationunit",3]]]],["translationunit",3]],[[]],[[["node",3,[["externaldeclarationdata",4]]]],["externaldeclarationdata",4]],[[]],[[["node",3,[["functiondefinitiondata",3]]]],["functiondefinitiondata",3]],[[]],[[]],[[["node",3,[["compoundstatementdata",3]]]],["compoundstatementdata",3]],[[]],[[["node",3,[["statementdata",4]]]],["statementdata",4]],[[]],[[["node",3,[["exprstatementdata",3]]]],["exprstatementdata",3]],[[["node",3,[["selectionstatementdata",3]]]],["selectionstatementdata",3]],[[]],[[]],[[["node",3,[["conditiondata",4]]]],["conditiondata",4]],[[["node",3,[["selectionreststatementdata",4]]]],["selectionreststatementdata",4]],[[]],[[]],[[["node",3,[["switchstatementdata",3]]]],["switchstatementdata",3]],[[["node",3,[["caselabeldata",4]]]],["caselabeldata",4]],[[]],[[["node",3,[["iterationstatementdata",4]]]],["iterationstatementdata",4]],[[]],[[["node",3,[["forinitstatementdata",4]]]],["forinitstatementdata",4]],[[]],[[]],[[["node",3,[["forreststatementdata",3]]]],["forreststatementdata",3]],[[]],[[["node",3,[["jumpstatementdata",4]]]],["jumpstatementdata",4]],[[["node",3,[["preprocessordata",4]]]],["preprocessordata",4]],[[]],[[]],[[["node",3,[["preprocessordefinedata",4]]]],["preprocessordefinedata",4]],[[["node",3,[["preprocessorelseifdata",3]]]],["preprocessorelseifdata",3]],[[]],[[]],[[["node",3,[["preprocessorerrordata",3]]]],["preprocessorerrordata",3]],[[]],[[["node",3,[["preprocessorifdata",3]]]],["preprocessorifdata",3]],[[]],[[["node",3,[["preprocessorifdefdata",3]]]],["preprocessorifdefdata",3]],[[]],[[["node",3,[["preprocessorifndefdata",3]]]],["preprocessorifndefdata",3]],[[]],[[["node",3,[["preprocessorincludedata",3]]]],["preprocessorincludedata",3]],[[["node",3,[["preprocessorlinedata",3]]]],["preprocessorlinedata",3]],[[]],[[]],[[["node",3,[["preprocessorpragmadata",3]]]],["preprocessorpragmadata",3]],[[]],[[["node",3,[["preprocessorundefdata",3]]]],["preprocessorundefdata",3]],[[]],[[["node",3,[["preprocessorversiondata",3]]]],["preprocessorversiondata",3]],[[]],[[["node",3,[["preprocessorversionprofiledata",4]]]],["preprocessorversionprofiledata",4]],[[["node",3,[["preprocessorextensiondata",3]]]],["preprocessorextensiondata",3]],[[]],[[["node",3,[["preprocessorextensionnamedata",4]]]],["preprocessorextensionnamedata",4]],[[]],[[["node",3,[["preprocessorextensionbehaviordata",4]]]],["preprocessorextensionbehaviordata",4]],[[]],[[]],[[["node",3,[["commentdata",4]]]],["commentdata",4]],[[],["smolstr",3]],[[],["smolstr",3]],[[],["smolstr",3]],[[],["smolstr",3]],[[],["compoundstatementdata",3]],[[["lexerposition",3],["lexerposition",3]],["nodespan",3]],[[["str",0]],["result",4,[["smolstr",3]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[],["funidentifierdata",4]],null,null,null,null,null,null,null,null,null,null,[[["textrange",3]],["option",4,[["textrange",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["node",3]],[[["",0]],["bool",0]],[[],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[],["textsize",3]],[[["",0]],["textsize",3]],null,[[],["node",3]],[[],["node",3]],null,[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],null,null,null,null,null,null,[[["",0],["identifierdata",3]],["bool",0]],[[["",0],["typenamedata",3]],["bool",0]],[[["",0],["textrange",3]],["bool",0]],[[["",0],["textsize",3]],["bool",0]],[[["",0],["pathdata",4]],["bool",0]],[[["",0],["typespecifiernonarraydata",4]],["bool",0]],[[["",0],["nodespan",3]],["bool",0]],[[["",0],["typespecifierdata",3]],["bool",0]],[[["",0],["structspecifierdata",3]],["bool",0]],[[["",0],["structfieldspecifierdata",3]],["bool",0]],[[["",0],["arrayedidentifierdata",3]],["bool",0]],[[["",0],["typequalifierdata",3]],["bool",0]],[[["",0],["typequalifierspecdata",4]],["bool",0]],[[["",0],["storagequalifierdata",4]],["bool",0]],[[["",0],["layoutqualifierdata",3]],["bool",0]],[[["",0],["layoutqualifierspecdata",4]],["bool",0]],[[["",0],["fullyspecifiedtypedata",3]],["bool",0]],[[["",0],["arrayspecifierdata",3]],["bool",0]],[[["",0],["arrayspecifierdimensiondata",4]],["bool",0]],[[["",0],["declarationdata",4]],["bool",0]],[[["",0],["blockdata",3]],["bool",0]],[[["",0],["funidentifierdata",4]],["bool",0]],[[["",0],["functionprototypedata",3]],["bool",0]],[[["",0],["functionparameterdeclarationdata",4]],["bool",0]],[[["",0],["functionparameterdeclaratordata",3]],["bool",0]],[[["",0],["initdeclaratorlistdata",3]],["bool",0]],[[["",0],["singledeclarationdata",3]],["bool",0]],[[["",0],["singledeclarationnotypedata",3]],["bool",0]],[[["",0],["initializerdata",4]],["bool",0]],[[["",0],["exprdata",4]],["bool",0]],[[["",0],["translationunit",3]],["bool",0]],[[["",0],["externaldeclarationdata",4]],["bool",0]],[[["",0],["functiondefinitiondata",3]],["bool",0]],[[["",0],["compoundstatementdata",3]],["bool",0]],[[["",0],["statementdata",4]],["bool",0]],[[["",0],["exprstatementdata",3]],["bool",0]],[[["",0],["selectionstatementdata",3]],["bool",0]],[[["",0],["conditiondata",4]],["bool",0]],[[["",0],["selectionreststatementdata",4]],["bool",0]],[[["",0],["switchstatementdata",3]],["bool",0]],[[["",0],["caselabeldata",4]],["bool",0]],[[["",0],["iterationstatementdata",4]],["bool",0]],[[["",0],["forinitstatementdata",4]],["bool",0]],[[["",0],["forreststatementdata",3]],["bool",0]],[[["",0],["jumpstatementdata",4]],["bool",0]],[[["",0],["preprocessordata",4]],["bool",0]],[[["",0],["preprocessordefinedata",4]],["bool",0]],[[["",0],["preprocessorelseifdata",3]],["bool",0]],[[["",0],["preprocessorerrordata",3]],["bool",0]],[[["",0],["preprocessorifdata",3]],["bool",0]],[[["",0],["preprocessorifdefdata",3]],["bool",0]],[[["",0],["preprocessorifndefdata",3]],["bool",0]],[[["",0],["preprocessorincludedata",3]],["bool",0]],[[["",0],["preprocessorlinedata",3]],["bool",0]],[[["",0],["preprocessorpragmadata",3]],["bool",0]],[[["",0],["preprocessorundefdata",3]],["bool",0]],[[["",0],["preprocessorversiondata",3]],["bool",0]],[[["",0],["preprocessorextensiondata",3]],["bool",0]],[[["",0],["preprocessorextensionnamedata",4]],["bool",0]],[[["",0],["commentdata",4]],["bool",0]],[[],["smolstr",3]],[[["textsize",3],["textsize",3]],["textrange",3]],[[["option",4,[["nodespan",3]]]],["node",3]],[[["fileid",3],["textrange",3]],["nodespan",3]],[[],["arrayedidentifierdata",3]],[[["node",3,[["typespecifiernonarraydata",4]]]],["fullyspecifiedtypedata",3]],[[["fileid",3],["usize",0]],["nodespan",3]],[[["str",0]],["smolstr",3]],[[["usize",0]],["smolstr",3]],[[["fileid",3]],["nodespan",3]],[[],["textsize",3]],[[["textrange",3]],["ordering",4]],null,[[],["result",4,[["located",3,[["parseerrorkind",4]]]]]],[[],["result",4,[["located",3,[["parseerrorkind",4]]]]]],[[["parsecontext",3]],["result",4,[["located",3,[["parseerrorkind",4]]]]]],[[["parsecontext",3]],["result",4,[["located",3,[["parseerrorkind",4]]]]]],[[["parseoptions",3]],["result",4,[["located",3,[["parseerrorkind",4]]]]]],[[["parseoptions",3]],["result",4,[["located",3,[["parseerrorkind",4]]]]]],[[["",0],["identifierdata",3]],["option",4,[["ordering",4]]]],[[["",0],["smolstr",3]],["option",4,[["ordering",4]]]],[[["",0],["typenamedata",3]],["option",4,[["ordering",4]]]],[[["",0],["textsize",3]],["option",4,[["ordering",4]]]],[[["",0],["node",3]],["option",4,[["ordering",4]]]],[[["",0],["nodespan",3]],["option",4,[["ordering",4]]]],null,null,[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],null,null,null,null,null,null,[[["",0]],["textrange",3]],null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["fileid",3]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],null,null,null,[[["lexerposition",3],["lexerposition",3]],["node",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[],["textsize",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["lexerposition",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],null,[[["",0]],["bound",4,[["textsize",3]]]],null,null,[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textsize",3]],[[["textsize",3]],["textsize",3]],[[["",0]]],[[["",0]]],[[],["textsize",3]],null,[[["",0]],["strstring",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",0]],["result",4,[["textsize",3],["tryfrominterror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["textsize",3]],["textrange",3]],[[],["exprdata",4]],null,[[["",0],["",0]]],[[["",0],["",0]]],[[["str",0]],["cow",4,[["str",0]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["node",3,[["commentdata",4]]]]],[[["",0],["node",3,[["commentdata",4]]]]],[[["",0],["node",3,[["identifierdata",3]]]],["node",3,[["typenamedata",3]]]],[[["",0],["node",3,[["identifierdata",3]]]],["node",3,[["typenamedata",3]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[],["parsebuilder",3]],[[["",0]],["parseoptions",3]],[[["",0]],["parsecontext",3]],[[["",0]],["parsecontextdata",3]],[[["",0]],["parsecontext",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["option",4,[["btreemap",3]]]],null,null,[[["",0]],["ref",3,[["parsecontextdata",3]]]],null,[[["",0]],["refmut",3,[["parsecontextdata",3]]]],[[],["parseoptions",3]],[[],["parsecontext",3]],[[],["parsecontextdata",3]],null,[[["",0],["parseoptions",3]],["bool",0]],[[["",0],["parsecontext",3]],["bool",0]],[[["",0],["parsecontextdata",3]],["bool",0]],[[],["option",4]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["parsecontextdata",3]],["parsecontext",3]],[[]],[[["",0]],["bool",0]],null,[[]],[[]],[[]],[[],["option",4,[["parsecontextdata",3]]]],[[["",0],["str",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],null,null,[[["",0],["parseoptions",3]],["bool",0]],[[["",0],["parsecontext",3]],["bool",0]],[[]],[[],["parseoptions",3]],[[],["parsecontext",3]],[[],["parsecontextdata",3]],[[["",0],["node",3],["identifiercontext",4]]],[[["",0],["node",3],["identifiercontext",4]]],[[],["parsecontext",3]],[[],["parsecontext",3]],[[["parsecontextdata",3]],["parsecontext",3]],[[],["parsecontext",3]],null,null,[[["",0],["parsecontext",3],["",0]],["result",4,[["parseerror",4,[["lexerposition",3],["token",4]]]]]],[[],["result",4,[["parseerror",6]]]],[[],["result",4,[["parseerror",6]]]],[[["str",0],["parsecontext",3]],["result",4,[["parseerror",6]]]],[[["parsecontext",3]],["parseresult",6]],[[["parsecontext",3]],["parseresult",6]],[[["str",0],["parseoptions",3]],["result",4,[["parseerror",6]]]],[[["parseoptions",3]],["parseresult",6]],[[["parseoptions",3]],["parseresult",6]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["parsecontextdata",3]],[[],["parsecontextdata",3]],[[["",0]],["parsecontext",3]],[[],["parsecontextdata",3]],[[["str",0]],["cow",4,[["str",0]]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["parsebuilder",3]],[[["parsecontext",3]]],null,[[]],[[],["parseresult",6,[["option",4,[["extractable",8]]]]]],[[]],[[]],null,[[]],[[["parseoptions",3]]],null,[[],["parseresult",6]],[[["option",4,[["parseoptions",3]]],["option",4,[["parsecontext",3]]],["option",4],["option",4]],["parseresult",6]],[[]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[],["option",4]],null,[[["str",0]],["result",4,[["parseerror",6]]]],[[["str",0]],["result",4,[["parseerror",6]]]],[[["str",0],["parsecontext",3]],["result",4,[["parseerror",6]]]],[[["str",0],["parseoptions",3]],["result",4,[["parseerror",6]]]],[[["str",0]],["cow",4,[["str",0]]]],null,[[["parsecontext",3]],["translationunit",3]],[[["parsecontext",3]],["identifier",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarray",6]],[[["parsecontext",3]],["typespecifiernonarray",6]],[[["parsecontext",3]],["typespecifiernonarray",6]],[[["parsecontext",3]],["typespecifier",6]],[[["parsecontext",3]],["typequalifierspecdata",4]],[[["parsecontext",3]],["typequalifierspecdata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typequalifierspecdata",4]],[[["parsecontext",3]],["typequalifierspecdata",4]],[[["parsecontext",3]],["typequalifierspecdata",4]],[[["parsecontext",3]],["typequalifierspec",6]],[[["parsecontext",3]],["typequalifierspecdata",4]],[[["parsecontext",3]],["typequalifierspec",6]],[[["parsecontext",3]],["typequalifier",6]],[[["parsecontext",3]],["fullyspecifiedtype",6]],[[["parsecontext",3]],["funidentifierdata",4]],[[["parsecontext",3]],["funidentifierdata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["funidentifier",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["unaryopdata",4]],[[["parsecontext",3]],["unaryopdata",4]],[[["parsecontext",3]],["unaryopdata",4]],[[["parsecontext",3]],["unaryopdata",4]],[[["parsecontext",3]],["unaryopdata",4]],[[["parsecontext",3]],["unaryopdata",4]],[[["parsecontext",3]],["unaryop",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["arrayedidentifier",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["arrayspecifierdimensiondata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typename",6]],[[["parsecontext",3]],["arrayspecifierdimensiondata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["arrayspecifierdimension",6]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["assignmentopdata",4]],[[["parsecontext",3]],["assignmentop",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["exprstatement",6]],[[["parsecontext",3]],["arrayspecifier",6]],[[["parsecontext",3]],["switchstatement",6]],[[["parsecontext",3]],["caselabeldata",4]],[[["parsecontext",3]],["caselabeldata",4]],[[["parsecontext",3]],["caselabel",6]],[[["parsecontext",3]],["initializerdata",4]],[[["parsecontext",3]],["initializerdata",4]],[[["parsecontext",3]],["initializer",6]],[[["parsecontext",3]],["conditiondata",4]],[[["parsecontext",3]],["conditiondata",4]],[[["parsecontext",3]],["condition",6]],[[["parsecontext",3]],["structfieldspecifier",6]],[[["parsecontext",3]],["forinitstatementdata",4]],[[["parsecontext",3]],["forinitstatementdata",4]],[[["parsecontext",3]],["forinitstatement",6]],[[["parsecontext",3]],["forreststatement",6]],[[["parsecontext",3]],["jumpstatementdata",4]],[[["parsecontext",3]],["jumpstatementdata",4]],[[["parsecontext",3]],["jumpstatementdata",4]],[[["parsecontext",3]],["jumpstatementdata",4]],[[["parsecontext",3]],["jumpstatement",6]],[[["parsecontext",3]],["compoundstatement",6]],[[["parsecontext",3]],["structspecifier",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["interpolationqualifierdata",4]],[[["parsecontext",3]],["interpolationqualifierdata",4]],[[["parsecontext",3]],["interpolationqualifierdata",4]],[[["parsecontext",3]],["interpolationqualifier",6]],[[["parsecontext",3]],["precisionqualifierdata",4]],[[["parsecontext",3]],["precisionqualifierdata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["precisionqualifierdata",4]],[[["parsecontext",3]],["precisionqualifier",6]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["storagequalifier",6]],[[["parsecontext",3]],["layoutqualifierspecdata",4]],[[["parsecontext",3]],["layoutqualifierspecdata",4]],[[["parsecontext",3]],["layoutqualifierspecdata",4]],[[["parsecontext",3]],["layoutqualifierspec",6]],[[["parsecontext",3]],["layoutqualifier",6]],[[["parsecontext",3]],["declarationdata",4]],[[["parsecontext",3]],["functionparameterdeclarator",6]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["functionprototype",6]],[[["parsecontext",3]],["singledeclarationdata",3]],[[["parsecontext",3]],["singledeclarationdata",3]],[[["parsecontext",3]],["singledeclaration",6]],[[["parsecontext",3]],["singledeclarationnotype",6]],[[["parsecontext",3]],["initdeclaratorlist",6]],[[["parsecontext",3]],["block",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["functiondefinition",6]],[[["parsecontext",3]],["preprocessordefinedata",4]],[[["parsecontext",3]],["preprocessordefinedata",4]],[[["parsecontext",3]],["preprocessordefinedata",4]],[[["parsecontext",3]],["preprocessordefinedata",4]],[[["parsecontext",3]],["preprocessordefine",6]],[[["parsecontext",3]],["preprocessorelseif",6]],[[["parsecontext",3]],["preprocessorerror",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessorif",6]],[[["parsecontext",3]],["preprocessorifdef",6]],[[["parsecontext",3]],["preprocessorifndef",6]],[[["parsecontext",3]],["preprocessorinclude",6]],[[["parsecontext",3]],["preprocessorinclude",6]],[[["parsecontext",3]],["preprocessorline",6]],[[["parsecontext",3]],["preprocessorpragma",6]],[[["parsecontext",3]],["preprocessorundef",6]],[[["parsecontext",3]],["preprocessorversionprofiledata",4]],[[["parsecontext",3]],["preprocessorversionprofiledata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessorversionprofiledata",4]],[[["parsecontext",3]],["preprocessorversionprofile",6]],[[["parsecontext",3]],["preprocessorversion",6]],[[["parsecontext",3]],["preprocessorextensionbehaviordata",4]],[[["parsecontext",3]],["preprocessorextensionbehaviordata",4]],[[["parsecontext",3]],["preprocessorextensionbehaviordata",4]],[[["parsecontext",3]],["preprocessorextensionbehaviordata",4]],[[["parsecontext",3]],["preprocessorextensionbehavior",6]],[[["parsecontext",3]],["preprocessorextension",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["option",4,[["externaldeclaration",6]]]],[[["parsecontext",3]],["option",4,[["externaldeclaration",6]]]],[[["parsecontext",3]],["option",4,[["externaldeclaration",6]]]],[[["parsecontext",3]],["option",4,[["externaldeclaration",6]]]],[[["parsecontext",3]],["translationunit",3]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["translationunit",3]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["option",4,[["externaldeclaration",6]]]]]],[[["parsecontext",3]],["vec",3,[["option",4,[["externaldeclaration",6]]]]]],[[["parsecontext",3]],["option",4,[["preprocessorextensionbehavior",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["preprocessorextensionbehavior",6]]]],[[["parsecontext",3]],["preprocessorextensionbehavior",6]],[[["parsecontext",3]],["option",4,[["preprocessorversionprofile",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["preprocessorversionprofile",6]]]],[[["parsecontext",3]],["option",4,[["token",4]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["token",4]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["option",4,[["arrayedidentifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["arrayedidentifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["singledeclarationnotype",6]]]],[[["parsecontext",3]],["vec",3,[["singledeclarationnotype",6]]]],[[["parsecontext",3]],["singledeclarationnotype",6]],[[["parsecontext",3]],["option",4,[["initializer",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["initializer",6]]]],[[["parsecontext",3]],["initializer",6]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["option",4,[["vec",3,[["typespecifier",6]]]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["vec",3,[["typespecifier",6]]]]]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["selectionstatement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["selectionstatement",6]],[[["parsecontext",3]],["selectionstatement",6]],[[["parsecontext",3]],["option",4,[["condition",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["condition",6]]]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["statement",6]]]],[[["parsecontext",3]],["vec",3,[["statement",6]]]],[[["parsecontext",3]],["option",4,[["expr",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["expr",6]]]],[[["parsecontext",3]],["vec",3,[["typequalifierspec",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["typequalifierspec",6]]]],[[["parsecontext",3]],["option",4,[["typequalifierspec",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["typequalifierspec",6]]]],[[["parsecontext",3]],["option",4,[["arrayspecifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["arrayspecifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["structfieldspecifier",6]]]],[[["parsecontext",3]],["vec",3,[["structfieldspecifier",6]]]],[[["parsecontext",3]],["option",4,[["identifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["identifier",6]]]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["option",4,[["typequalifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["typequalifier",6]]]],[[["parsecontext",3]],["vec",3,[["arrayspecifierdimension",6]]]],[[["parsecontext",3]],["vec",3,[["arrayspecifierdimension",6]]]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["lexerposition",3]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["lexerposition",3]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["option",4,[["expr",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["expr",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["arrayedidentifier",6]],[[["parsecontext",3]],["vec",3,[["structfieldspecifier",6]]]],[[["parsecontext",3]],["vec",3,[["structfieldspecifier",6]]]],[[["parsecontext",3]],["vec",3,[["statement",6]]]],[[["parsecontext",3]],["vec",3,[["statement",6]]]],[[["parsecontext",3]],["option",4,[["initializer",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["initializer",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["initializer",6]],[[["parsecontext",3]],["selectionstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["typespecifier",6]],[[["parsecontext",3]],["option",4,[["typespecifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["typespecifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["layoutqualifierspec",6]],[[["parsecontext",3]],["option",4,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["layoutqualifierspec",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["option",4,[["functionparameterdeclaration",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["option",4,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["vec",3,[["singledeclarationnotype",6]]]],[[["parsecontext",3]],["vec",3,[["singledeclarationnotype",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["identifier",6]],[[["parsecontext",3]],["vec",3,[["option",4,[["externaldeclaration",6]]]]]],[[["parsecontext",3]],["vec",3,[["option",4,[["externaldeclaration",6]]]]]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["option",4,[["vec",3,[["typespecifier",6]]]]]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["storagequalifierdata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["singledeclarationnotype",6]]]],[[["parsecontext",3]],["vec",3,[["singledeclarationnotype",6]]]],[[["parsecontext",3]],["initdeclaratorlist",6]],[[["parsecontext",3]],["initdeclaratorlist",6]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["option",4,[["preprocessorextensionbehavior",6]]]],[[["parsecontext",3]],["preprocessorextension",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessorextension",6]],[[["parsecontext",3]],["option",4,[["initializer",6]]]],[[["parsecontext",3]],["singledeclarationdata",3]],[[["parsecontext",3]],["singledeclarationdata",3]],[[["parsecontext",3]],["singledeclarationnotype",6]],[[["parsecontext",3]],["singledeclarationnotype",6]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["arrayspecifier",6]],[[["parsecontext",3]],["arrayspecifierdimension",6]],[[["parsecontext",3]],["arrayedidentifier",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["assignmentop",6]],[[["parsecontext",3]],["block",6]],[[["parsecontext",3]],["caselabel",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["compoundstatement",6]],[[["parsecontext",3]],["condition",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["exprstatement",6]],[[["parsecontext",3]],["option",4,[["externaldeclaration",6]]]],[[["parsecontext",3]],["option",4,[["externaldeclaration",6]]]],[[["parsecontext",3]],["option",4,[["externaldeclaration",6]]]],[[["parsecontext",3]],["forinitstatement",6]],[[["parsecontext",3]],["forreststatement",6]],[[["parsecontext",3]],["fullyspecifiedtype",6]],[[["parsecontext",3]],["funidentifier",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["functiondefinition",6]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["functionparameterdeclarator",6]],[[["parsecontext",3]],["functionprototype",6]],[[["parsecontext",3]],["identifier",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["initdeclaratorlist",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["initdeclaratorlist",6]],[[["parsecontext",3]],["initializer",6]],[[["parsecontext",3]],["interpolationqualifier",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["jumpstatement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["layoutqualifier",6]],[[["parsecontext",3]],["layoutqualifierspec",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["precisionqualifier",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessordefine",6]],[[["parsecontext",3]],["preprocessorelseif",6]],[[["parsecontext",3]],["preprocessorerror",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessorextension",6]],[[["parsecontext",3]],["preprocessorextension",6]],[[["parsecontext",3]],["preprocessorextensionbehavior",6]],[[["parsecontext",3]],["preprocessorif",6]],[[["parsecontext",3]],["preprocessorifdef",6]],[[["parsecontext",3]],["preprocessorifndef",6]],[[["parsecontext",3]],["preprocessorinclude",6]],[[["parsecontext",3]],["preprocessorinclude",6]],[[["parsecontext",3]],["preprocessorline",6]],[[["parsecontext",3]],["preprocessorpragma",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessorundef",6]],[[["parsecontext",3]],["preprocessorversion",6]],[[["parsecontext",3]],["preprocessorversionprofile",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["selectionstatement",6]],[[["parsecontext",3]],["selectionstatement",6]],[[["parsecontext",3]],["selectionstatement",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["singledeclaration",6]],[[["parsecontext",3]],["singledeclarationnotype",6]],[[["parsecontext",3]],["singledeclarationnotype",6]],[[["parsecontext",3]],["storagequalifier",6]],[[["parsecontext",3]],["structfieldspecifier",6]],[[["parsecontext",3]],["structspecifier",6]],[[["parsecontext",3]],["switchstatement",6]],[[["parsecontext",3]],["typequalifierspec",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typename",6]],[[["parsecontext",3]],["typequalifier",6]],[[["parsecontext",3]],["typequalifierspec",6]],[[["parsecontext",3]],["typespecifier",6]],[[["parsecontext",3]],["typespecifiernonarray",6]],[[["parsecontext",3]],["typespecifiernonarray",6]],[[["parsecontext",3]],["typespecifiernonarray",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["unaryop",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["arrayspecifier",6]],[[["parsecontext",3]],["arrayspecifierdimension",6]],[[["parsecontext",3]],["arrayedidentifier",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["assignmentop",6]],[[["parsecontext",3]],["block",6]],[[["parsecontext",3]],["caselabel",6]],[[["parsecontext",3]],["compoundstatement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["condition",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["declaration",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["exprstatement",6]],[[["parsecontext",3]],["option",4,[["externaldeclaration",6]]]],[[["parsecontext",3]],["option",4,[["externaldeclaration",6]]]],[[["parsecontext",3]],["option",4,[["externaldeclaration",6]]]],[[["parsecontext",3]],["forinitstatement",6]],[[["parsecontext",3]],["forreststatement",6]],[[["parsecontext",3]],["fullyspecifiedtype",6]],[[["parsecontext",3]],["funidentifier",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["functiondefinition",6]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["functionparameterdeclarator",6]],[[["parsecontext",3]],["functionprototype",6]],[[["parsecontext",3]],["identifier",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["initdeclaratorlist",6]],[[["parsecontext",3]],["initdeclaratorlist",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["initializer",6]],[[["parsecontext",3]],["interpolationqualifier",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["iterationstatement",6]],[[["parsecontext",3]],["jumpstatement",6]],[[["parsecontext",3]],["layoutqualifier",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["layoutqualifierspec",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["precisionqualifier",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessor",6]],[[["parsecontext",3]],["preprocessordefine",6]],[[["parsecontext",3]],["preprocessorelseif",6]],[[["parsecontext",3]],["preprocessorerror",6]],[[["parsecontext",3]],["preprocessorextension",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessorextension",6]],[[["parsecontext",3]],["preprocessorextensionbehavior",6]],[[["parsecontext",3]],["preprocessorif",6]],[[["parsecontext",3]],["preprocessorifdef",6]],[[["parsecontext",3]],["preprocessorifndef",6]],[[["parsecontext",3]],["preprocessorinclude",6]],[[["parsecontext",3]],["preprocessorinclude",6]],[[["parsecontext",3]],["preprocessorline",6]],[[["parsecontext",3]],["preprocessorpragma",6]],[[["parsecontext",3]],["preprocessorundef",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["preprocessorversion",6]],[[["parsecontext",3]],["preprocessorversionprofile",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["selectionstatement",6]],[[["parsecontext",3]],["selectionstatement",6]],[[["parsecontext",3]],["selectionstatement",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["statement",6]],[[["parsecontext",3]],["singledeclaration",6]],[[["parsecontext",3]],["singledeclarationnotype",6]],[[["parsecontext",3]],["singledeclarationnotype",6]],[[["parsecontext",3]],["storagequalifier",6]],[[["parsecontext",3]],["structfieldspecifier",6]],[[["parsecontext",3]],["structspecifier",6]],[[["parsecontext",3]],["switchstatement",6]],[[["parsecontext",3]],["typequalifierspec",6]],[[["parsecontext",3]],["typename",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typequalifier",6]],[[["parsecontext",3]],["typequalifierspec",6]],[[["parsecontext",3]],["typespecifier",6]],[[["parsecontext",3]],["typespecifiernonarray",6]],[[["parsecontext",3]],["typespecifiernonarray",6]],[[["parsecontext",3]],["typespecifiernonarray",6]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["unaryop",6]],[[["parsecontext",3]],["arrayedidentifier",6]],[[["parsecontext",3]],["arrayedidentifier",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifier",6]],[[["parsecontext",3]],["typespecifier",6]],[[["parsecontext",3]],["block",6]],[[["parsecontext",3]],["block",6]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["vec",3,[["arrayedidentifier",6]]]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["vec",3,[["expr",6]]]],[[["parsecontext",3]],["forreststatement",6]],[[["parsecontext",3]],["forreststatement",6]],[[["parsecontext",3]],["exprstatement",6]],[[["parsecontext",3]],["exprstatement",6]],[[["parsecontext",3]],["forreststatement",6]],[[["parsecontext",3]],["forreststatement",6]],[[["parsecontext",3]],["forreststatement",6]],[[["parsecontext",3]],["forreststatement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["jumpstatementdata",4]],[[["parsecontext",3]],["jumpstatementdata",4]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["translationunit",3]],[[["parsecontext",3]],["translationunit",3]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["vec",3,[["functionparameterdeclaration",6]]]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["vec",3,[["identifier",6]]]],[[["parsecontext",3]],["structspecifier",6]],[[["parsecontext",3]],["structspecifier",6]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["vec",3,[["initializer",6]]]],[[["parsecontext",3]],["preprocessorline",6]],[[["parsecontext",3]],["preprocessorline",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["vec",3,[["layoutqualifierspec",6]]]],[[["parsecontext",3]],["preprocessorversion",6]],[[["parsecontext",3]],["preprocessorversion",6]],[[["parsecontext",3]],["compoundstatement",6]],[[["parsecontext",3]],["compoundstatement",6]],[[["parsecontext",3]],["switchstatement",6]],[[["parsecontext",3]],["switchstatement",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["block",6]],[[["parsecontext",3]],["block",6]],[[["parsecontext",3]],["block",6]],[[["parsecontext",3]],["block",6]],[[["parsecontext",3]],["structspecifier",6]],[[["parsecontext",3]],["structspecifier",6]],[[["parsecontext",3]],["structspecifier",6]],[[["parsecontext",3]],["structspecifier",6]],[[["parsecontext",3]],["typequalifier",6]],[[["parsecontext",3]],["typequalifier",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["fullyspecifiedtype",6]],[[["parsecontext",3]],["fullyspecifiedtype",6]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["functionparameterdeclaration",6]],[[["parsecontext",3]],["structfieldspecifier",6]],[[["parsecontext",3]],["structfieldspecifier",6]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3],["lexerposition",3],["lexerposition",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["vec",3,[["typespecifier",6]]]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["expr",6]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],[[["parsecontext",3]],["typespecifiernonarraydata",4]],null,[[],["result",4,[["parseerror",4,[["lexerposition",3],["token",4]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i16",0],["usize",0]],["i16",0]],[[["i16",0]],["vec",3,[["string",3]]]],[[["i16",0],["usize",0]],["i16",0]],null,[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["parsecontext",3],["i16",0],["option",4,[["lexerposition",3]]],["vec",3],["vec",3],["phantomdata",3]],["option",4,[["result",4,[["translationunit",3],["parseerror",4,[["lexerposition",3],["token",4]]]]]]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[["parsecontext",3],["option",4,[["lexerposition",3]]],["vec",3],["phantomdata",3]]],[[],["never",0]],[[["token",4],["phantomdata",3]],["option",4,[["usize",0]]]],[[["usize",0],["token",4],["phantomdata",3]],["__symbol",4]],null,[[["",0],["i16",0],["usize",0]],["i16",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0],["i16",0]],["i16",0]],[[["",0],["i16",0]],["i16",0]],[[["",0],["errorrecovery",6]]],[[["",0],["i16",0]],["vec",3,[["string",3]]]],[[]],[[]],[[]],[[["",0],["i16",0],["usize",0]],["i16",0]],[[]],[[]],[[]],[[]],[[],["translationunitparser",3]],[[["",0],["parsecontext",3],["intoiterator",8]],["result",4,[["translationunit",3],["parseerror",4,[["lexerposition",3],["token",4]]]]]],[[["",0],["parsecontext",3],["",0]],["result",4,[["parseerror",4,[["lexerposition",3],["token",4]]]]]],[[["",0],["i16",0],["option",4],["vec",3],["vec",3]],["option",4,[["parseresult",6]]]],[[["",0],["i16",0]],["simulatedreduce",4]],[[["",0]]],[[["",0]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0],["usize",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["bool",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["indentstyle",4]],[[["",0]],["whitespace",4]],[[["",0]],["formattingsettings",3]],[[["",0]],["formattingstate",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]]],null,[[]],[[]],[[]],[[["",0]],["formattingsettings",3]],[[["",0],["",0]],["result",6]],[[["",0],["indentstyle",4]],["bool",0]],[[["",0],["whitespace",4]],["bool",0]],[[["",0],["formattingsettings",3]],["bool",0]],[[["",0],["formattingstate",3]],["bool",0]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["formattingsettings",3]]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[["",0],["indentstyle",4]],["bool",0]],[[["",0],["formattingsettings",3]],["bool",0]],[[["",0],["formattingstate",3]],["bool",0]],[[["",0],["bool",0]],["result",6]],null,null,null,null,[[["",0]],["u32",0]],null,[[["",0],["arrayspecifier",6],["formattingstate",3]],["result",6]],[[["",0],["arrayedidentifier",6],["formattingstate",3]],["result",6]],[[["",0],["assignmentop",6],["formattingstate",3]],["result",6]],[[["",0],["binaryop",6],["formattingstate",3]],["result",6]],[[["",0],["block",6],["formattingstate",3]],["result",6]],[[["",0],["caselabel",6],["formattingstate",3]],["result",6]],[[["",0],["compoundstatement",6],["formattingstate",3]],["result",6]],[[["",0],["condition",6],["formattingstate",3]],["result",6]],[[["",0],["declaration",6],["formattingstate",3]],["result",6]],[[["",0],["f64",0],["formattingstate",3]],["result",6]],[[["",0],["expr",6],["formattingstate",3]],["result",6]],[[["",0],["exprstatement",6],["formattingstate",3]],["result",6]],[[["",0],["externaldeclaration",6],["formattingstate",3]],["result",6]],[[["",0],["f32",0],["formattingstate",3]],["result",6]],[[["",0],["forinitstatement",6],["formattingstate",3]],["result",6]],[[["",0],["forreststatement",6],["formattingstate",3]],["result",6]],[[["",0],["fullyspecifiedtype",6],["formattingstate",3]],["result",6]],[[["",0],["functiondefinition",6],["formattingstate",3]],["result",6]],[[["",0],["funidentifier",6],["formattingstate",3]],["result",6]],[[["",0],["functionparameterdeclaration",6],["formattingstate",3]],["result",6]],[[["",0],["functionparameterdeclarator",6],["formattingstate",3]],["result",6]],[[["",0],["functionprototype",6],["formattingstate",3]],["result",6]],[[["",0],["identifier",6],["formattingstate",3]],["result",6]],[[["",0],["initdeclaratorlist",6],["formattingstate",3]],["result",6]],[[["",0],["initializer",6],["formattingstate",3]],["result",6]],[[["",0],["interpolationqualifier",6],["formattingstate",3]],["result",6]],[[["",0],["iterationstatement",6],["formattingstate",3]],["result",6]],[[["",0],["jumpstatement",6],["formattingstate",3]],["result",6]],[[["",0],["layoutqualifier",6],["formattingstate",3]],["result",6]],[[["",0],["layoutqualifierspec",6],["formattingstate",3]],["result",6]],[[["",0],["path",6],["formattingstate",3]],["result",6]],[[["",0],["precisionqualifier",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessor",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessordefine",6],["formattingstate",3]],["result",6]],[[["",0],["formattingstate",3]],["result",6]],[[["",0],["preprocessorelseif",6],["formattingstate",3]],["result",6]],[[["",0],["formattingstate",3]],["result",6]],[[["",0],["preprocessorerror",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessorextension",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessorif",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessorifdef",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessorifndef",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessorinclude",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessorline",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessorpragma",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessorundef",6],["formattingstate",3]],["result",6]],[[["",0],["preprocessorversion",6],["formattingstate",3]],["result",6]],[[["",0],["selectionreststatement",6],["formattingstate",3]],["result",6]],[[["",0],["selectionstatement",6],["formattingstate",3]],["result",6]],[[["",0],["singledeclaration",6],["formattingstate",3]],["result",6]],[[["",0],["singledeclarationnotype",6],["formattingstate",3]],["result",6]],[[["",0],["statement",6],["formattingstate",3]],["result",6]],[[["",0],["storagequalifier",6],["formattingstate",3]],["result",6]],[[["",0],["structspecifier",6],["formattingstate",3]],["result",6]],[[["",0],["structfieldspecifier",6],["formattingstate",3]],["result",6]],[[["",0],["structspecifier",6],["formattingstate",3]],["result",6]],[[["",0],["formattingstate",3]],["result",6]],[[["",0],["switchstatement",6],["formattingstate",3]],["result",6]],[[["",0],["translationunit",3],["formattingstate",3]],["result",6]],[[["",0],["typename",6],["formattingstate",3]],["result",6]],[[["",0],["typequalifier",6],["formattingstate",3]],["result",6]],[[["",0],["typequalifierspec",6],["formattingstate",3]],["result",6]],[[["",0],["typespecifier",6],["formattingstate",3]],["result",6]],[[["",0],["typespecifiernonarray",6],["formattingstate",3]],["result",6]],[[["",0],["unaryop",6],["formattingstate",3]],["result",6]],null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["",0],["u32",0]],["result",6]],[[["",0],["",0],["formattingstate",3]],["result",6]],[[["",0],["",0],["str",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["visit",4]],[[["",0],["",0]]],[[["",0],["visit",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]]],[[]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["",0]]],[[["",0],["arrayspecifier",6]],["visit",4]],[[["",0],["arrayspecifier",6]],["visit",4]],[[["",0],["arrayspecifierdimension",6]],["visit",4]],[[["",0],["arrayspecifierdimension",6]],["visit",4]],[[["",0],["arrayedidentifier",6]],["visit",4]],[[["",0],["arrayedidentifier",6]],["visit",4]],[[["",0],["assignmentop",6]],["visit",4]],[[["",0],["assignmentop",6]],["visit",4]],[[["",0],["binaryop",6]],["visit",4]],[[["",0],["binaryop",6]],["visit",4]],[[["",0],["block",6]],["visit",4]],[[["",0],["block",6]],["visit",4]],[[["",0],["caselabel",6]],["visit",4]],[[["",0],["caselabel",6]],["visit",4]],[[["",0],["compoundstatement",6]],["visit",4]],[[["",0],["compoundstatement",6]],["visit",4]],[[["",0],["condition",6]],["visit",4]],[[["",0],["condition",6]],["visit",4]],[[["",0],["declaration",6]],["visit",4]],[[["",0],["declaration",6]],["visit",4]],[[["",0],["expr",6]],["visit",4]],[[["",0],["expr",6]],["visit",4]],[[["",0],["exprstatement",6]],["visit",4]],[[["",0],["exprstatement",6]],["visit",4]],[[["",0],["externaldeclaration",6]],["visit",4]],[[["",0],["externaldeclaration",6]],["visit",4]],[[["",0],["forinitstatement",6]],["visit",4]],[[["",0],["forinitstatement",6]],["visit",4]],[[["",0],["forreststatement",6]],["visit",4]],[[["",0],["forreststatement",6]],["visit",4]],[[["",0],["fullyspecifiedtype",6]],["visit",4]],[[["",0],["fullyspecifiedtype",6]],["visit",4]],[[["",0],["funidentifier",6]],["visit",4]],[[["",0],["funidentifier",6]],["visit",4]],[[["",0],["functiondefinition",6]],["visit",4]],[[["",0],["functiondefinition",6]],["visit",4]],[[["",0],["functionparameterdeclaration",6]],["visit",4]],[[["",0],["functionparameterdeclaration",6]],["visit",4]],[[["",0],["functionparameterdeclarator",6]],["visit",4]],[[["",0],["functionparameterdeclarator",6]],["visit",4]],[[["",0],["functionprototype",6]],["visit",4]],[[["",0],["functionprototype",6]],["visit",4]],[[["",0],["identifier",6]],["visit",4]],[[["",0],["identifier",6]],["visit",4]],[[["",0],["initdeclaratorlist",6]],["visit",4]],[[["",0],["initdeclaratorlist",6]],["visit",4]],[[["",0],["initializer",6]],["visit",4]],[[["",0],["initializer",6]],["visit",4]],[[["",0],["interpolationqualifier",6]],["visit",4]],[[["",0],["interpolationqualifier",6]],["visit",4]],[[["",0],["iterationstatement",6]],["visit",4]],[[["",0],["iterationstatement",6]],["visit",4]],[[["",0],["jumpstatement",6]],["visit",4]],[[["",0],["jumpstatement",6]],["visit",4]],[[["",0],["layoutqualifier",6]],["visit",4]],[[["",0],["layoutqualifier",6]],["visit",4]],[[["",0],["layoutqualifierspec",6]],["visit",4]],[[["",0],["layoutqualifierspec",6]],["visit",4]],[[["",0],["",0]]],[[["",0],["precisionqualifier",6]],["visit",4]],[[["",0],["precisionqualifier",6]],["visit",4]],[[["",0],["preprocessor",6]],["visit",4]],[[["",0],["preprocessor",6]],["visit",4]],[[["",0],["preprocessordefine",6]],["visit",4]],[[["",0],["preprocessordefine",6]],["visit",4]],[[["",0],["preprocessorelseif",6]],["visit",4]],[[["",0],["preprocessorelseif",6]],["visit",4]],[[["",0],["preprocessorerror",6]],["visit",4]],[[["",0],["preprocessorerror",6]],["visit",4]],[[["",0],["preprocessorextension",6]],["visit",4]],[[["",0],["preprocessorextension",6]],["visit",4]],[[["",0],["preprocessorextensionbehavior",6]],["visit",4]],[[["",0],["preprocessorextensionbehavior",6]],["visit",4]],[[["",0],["preprocessorextensionname",6]],["visit",4]],[[["",0],["preprocessorextensionname",6]],["visit",4]],[[["",0],["preprocessorif",6]],["visit",4]],[[["",0],["preprocessorif",6]],["visit",4]],[[["",0],["preprocessorifdef",6]],["visit",4]],[[["",0],["preprocessorifdef",6]],["visit",4]],[[["",0],["preprocessorifndef",6]],["visit",4]],[[["",0],["preprocessorifndef",6]],["visit",4]],[[["",0],["preprocessorinclude",6]],["visit",4]],[[["",0],["preprocessorinclude",6]],["visit",4]],[[["",0],["preprocessorline",6]],["visit",4]],[[["",0],["preprocessorline",6]],["visit",4]],[[["",0],["preprocessorpragma",6]],["visit",4]],[[["",0],["preprocessorpragma",6]],["visit",4]],[[["",0],["preprocessorundef",6]],["visit",4]],[[["",0],["preprocessorundef",6]],["visit",4]],[[["",0],["preprocessorversion",6]],["visit",4]],[[["",0],["preprocessorversion",6]],["visit",4]],[[["",0],["preprocessorversionprofile",6]],["visit",4]],[[["",0],["preprocessorversionprofile",6]],["visit",4]],[[["",0],["selectionreststatement",6]],["visit",4]],[[["",0],["selectionreststatement",6]],["visit",4]],[[["",0],["selectionstatement",6]],["visit",4]],[[["",0],["selectionstatement",6]],["visit",4]],[[["",0],["singledeclaration",6]],["visit",4]],[[["",0],["singledeclaration",6]],["visit",4]],[[["",0],["singledeclarationnotype",6]],["visit",4]],[[["",0],["singledeclarationnotype",6]],["visit",4]],[[["",0],["statement",6]],["visit",4]],[[["",0],["statement",6]],["visit",4]],[[["",0],["storagequalifier",6]],["visit",4]],[[["",0],["storagequalifier",6]],["visit",4]],[[["",0],["structfieldspecifier",6]],["visit",4]],[[["",0],["structfieldspecifier",6]],["visit",4]],[[["",0],["structspecifier",6]],["visit",4]],[[["",0],["structspecifier",6]],["visit",4]],[[["",0],["switchstatement",6]],["visit",4]],[[["",0],["switchstatement",6]],["visit",4]],[[["",0],["translationunit",3]],["visit",4]],[[["",0],["translationunit",3]],["visit",4]],[[["",0],["typename",6]],["visit",4]],[[["",0],["typename",6]],["visit",4]],[[["",0],["typequalifier",6]],["visit",4]],[[["",0],["typequalifier",6]],["visit",4]],[[["",0],["typequalifierspec",6]],["visit",4]],[[["",0],["typequalifierspec",6]],["visit",4]],[[["",0],["typespecifier",6]],["visit",4]],[[["",0],["typespecifier",6]],["visit",4]],[[["",0],["typespecifiernonarray",6]],["visit",4]],[[["",0],["typespecifiernonarray",6]],["visit",4]],[[["",0],["unaryop",6]],["visit",4]],[[["",0],["unaryop",6]],["visit",4]]],"p":[[6,"TypeSpecifierNonArray"],[6,"TypeSpecifier"],[6,"StructSpecifier"],[6,"StructFieldSpecifier"],[6,"ArrayedIdentifier"],[6,"TypeQualifier"],[6,"StorageQualifier"],[6,"LayoutQualifier"],[6,"PrecisionQualifier"],[6,"InterpolationQualifier"],[6,"FullySpecifiedType"],[6,"ArraySpecifier"],[6,"ArraySpecifierDimension"],[6,"Declaration"],[6,"FunIdentifier"],[6,"Expr"],[6,"UnaryOp"],[6,"AssignmentOp"],[6,"FunctionDefinition"],[6,"CompoundStatement"],[6,"Statement"],[6,"ExprStatement"],[6,"SelectionStatement"],[6,"SwitchStatement"],[6,"CaseLabel"],[6,"IterationStatement"],[6,"JumpStatement"],[6,"Preprocessor"],[6,"Identifier"],[6,"TypeName"],[6,"TypeQualifierSpec"],[6,"LayoutQualifierSpec"],[6,"Block"],[6,"FunctionPrototype"],[6,"FunctionParameterDeclaration"],[6,"FunctionParameterDeclarator"],[6,"InitDeclaratorList"],[6,"SingleDeclaration"],[6,"SingleDeclarationNoType"],[6,"Initializer"],[6,"BinaryOp"],[6,"ExternalDeclaration"],[6,"Condition"],[6,"SelectionRestStatement"],[6,"ForInitStatement"],[6,"ForRestStatement"],[6,"PreprocessorDefine"],[6,"PreprocessorElseIf"],[6,"PreprocessorError"],[6,"PreprocessorIf"],[6,"PreprocessorIfDef"],[6,"PreprocessorIfNDef"],[6,"PreprocessorInclude"],[6,"PreprocessorLine"],[6,"PreprocessorPragma"],[6,"PreprocessorUndef"],[6,"PreprocessorVersion"],[6,"PreprocessorVersionProfile"],[6,"PreprocessorExtension"],[6,"PreprocessorExtensionName"],[6,"PreprocessorExtensionBehavior"],[3,"IdentifierData"],[3,"SmolStr"],[3,"TypeNameData"],[3,"TranslationUnit"],[3,"ExprStatementData"],[4,"PathData"],[4,"UnaryOpData"],[4,"BinaryOpData"],[4,"AssignmentOpData"],[4,"PreprocessorExtensionNameData"],[4,"ExprData"],[4,"ConditionData"],[4,"TypeSpecifierNonArrayData"],[4,"StorageQualifierData"],[4,"DeclarationData"],[4,"JumpStatementData"],[4,"CaseLabelData"],[4,"StatementData"],[4,"PreprocessorVersionProfileData"],[4,"ExternalDeclarationData"],[4,"ForInitStatementData"],[4,"PreprocessorData"],[4,"PreprocessorExtensionBehaviorData"],[4,"IterationStatementData"],[4,"SelectionRestStatementData"],[4,"ArraySpecifierDimensionData"],[4,"FunIdentifierData"],[4,"InterpolationQualifierData"],[4,"PreprocessorDefineData"],[4,"PrecisionQualifierData"],[4,"LayoutQualifierSpecData"],[4,"TypeQualifierSpecData"],[4,"InitializerData"],[4,"CommentData"],[4,"FunctionParameterDeclarationData"],[3,"TextRange"],[3,"TextSize"],[3,"ArrayedIdentifierData"],[3,"TypeSpecifierData"],[3,"SingleDeclarationData"],[3,"Node"],[3,"PreprocessorExtensionData"],[3,"SwitchStatementData"],[3,"NodeSpan"],[3,"StructSpecifierData"],[3,"StructFieldSpecifierData"],[3,"TypeQualifierData"],[3,"LayoutQualifierData"],[3,"FullySpecifiedTypeData"],[3,"ArraySpecifierData"],[3,"BlockData"],[3,"FunctionPrototypeData"],[3,"FunctionParameterDeclaratorData"],[3,"InitDeclaratorListData"],[3,"SingleDeclarationNoTypeData"],[3,"FunctionDefinitionData"],[3,"CompoundStatementData"],[3,"SelectionStatementData"],[3,"ForRestStatementData"],[3,"PreprocessorElseIfData"],[3,"PreprocessorErrorData"],[3,"PreprocessorIfData"],[3,"PreprocessorIfDefData"],[3,"PreprocessorIfNDefData"],[3,"PreprocessorIncludeData"],[3,"PreprocessorLineData"],[3,"PreprocessorPragmaData"],[3,"PreprocessorUndefData"],[3,"PreprocessorVersionData"],[8,"NodeDisplay"],[8,"NodeContent"],[13,"ExplicitlySized"],[13,"Case"],[13,"Single"],[13,"Multi"],[13,"Expr"],[13,"Assignment"],[13,"FunctionPrototype"],[13,"InitDeclaratorList"],[13,"Precision"],[13,"Block"],[13,"Invariant"],[13,"Variable"],[13,"IntConst"],[13,"UIntConst"],[13,"BoolConst"],[13,"FloatConst"],[13,"DoubleConst"],[13,"Unary"],[13,"Binary"],[13,"Ternary"],[13,"Assignment"],[13,"Bracket"],[13,"FunCall"],[13,"Dot"],[13,"PostInc"],[13,"PostDec"],[13,"Comma"],[13,"Preprocessor"],[13,"FunctionDefinition"],[13,"Declaration"],[13,"Expression"],[13,"Declaration"],[13,"TypeSpecifier"],[13,"Expr"],[13,"Named"],[13,"Unnamed"],[13,"Simple"],[13,"List"],[13,"While"],[13,"DoWhile"],[13,"For"],[13,"Return"],[13,"Identifier"],[13,"Absolute"],[13,"Relative"],[13,"Define"],[13,"ElseIf"],[13,"Error"],[13,"If"],[13,"IfDef"],[13,"IfNDef"],[13,"Include"],[13,"Line"],[13,"Pragma"],[13,"Undef"],[13,"Version"],[13,"Extension"],[13,"FunctionLike"],[13,"ObjectLike"],[13,"Specific"],[13,"Statement"],[13,"Else"],[13,"Declaration"],[13,"Expression"],[13,"Selection"],[13,"Switch"],[13,"CaseLabel"],[13,"Iteration"],[13,"Jump"],[13,"Compound"],[13,"Subroutine"],[13,"Storage"],[13,"Layout"],[13,"Precision"],[13,"Interpolation"],[13,"TypeName"],[13,"Struct"],[8,"LangParser"],[8,"IntoParseBuilderExt"],[8,"HasParser"],[3,"ParseContext"],[3,"ParseContextData"],[3,"ParseOptions"],[3,"ParseBuilder"],[8,"Extractable"],[8,"Parse"],[8,"DefaultParse"],[8,"Parsable"],[8,"__ToTriple"],[4,"__Symbol"],[3,"__StateMachine"],[3,"TranslationUnitParser"],[13,"Variant0"],[13,"Variant1"],[13,"Variant2"],[13,"Variant3"],[13,"Variant4"],[13,"Variant5"],[13,"Variant6"],[13,"Variant7"],[13,"Variant8"],[13,"Variant9"],[13,"Variant10"],[13,"Variant11"],[13,"Variant12"],[13,"Variant13"],[13,"Variant14"],[13,"Variant15"],[13,"Variant16"],[13,"Variant17"],[13,"Variant18"],[13,"Variant19"],[13,"Variant20"],[13,"Variant21"],[13,"Variant22"],[13,"Variant23"],[13,"Variant24"],[13,"Variant25"],[13,"Variant26"],[13,"Variant27"],[13,"Variant28"],[13,"Variant29"],[13,"Variant30"],[13,"Variant31"],[13,"Variant32"],[13,"Variant33"],[13,"Variant34"],[13,"Variant35"],[13,"Variant36"],[13,"Variant37"],[13,"Variant38"],[13,"Variant39"],[13,"Variant40"],[13,"Variant41"],[13,"Variant42"],[13,"Variant43"],[13,"Variant44"],[13,"Variant45"],[13,"Variant46"],[13,"Variant47"],[13,"Variant48"],[13,"Variant49"],[13,"Variant50"],[13,"Variant51"],[13,"Variant52"],[13,"Variant53"],[13,"Variant54"],[13,"Variant55"],[13,"Variant56"],[13,"Variant57"],[13,"Variant58"],[13,"Variant59"],[13,"Variant60"],[13,"Variant61"],[13,"Variant62"],[13,"Variant63"],[13,"Variant64"],[13,"Variant65"],[13,"Variant66"],[13,"Variant67"],[13,"Variant68"],[13,"Variant69"],[13,"Variant70"],[13,"Variant71"],[13,"Variant72"],[13,"Variant73"],[13,"Variant74"],[13,"Variant75"],[13,"Variant76"],[13,"Variant77"],[13,"Variant78"],[13,"Variant79"],[13,"Variant80"],[13,"Variant81"],[13,"Variant82"],[13,"Variant83"],[13,"Variant84"],[13,"Variant85"],[13,"Variant86"],[13,"Variant87"],[13,"Variant88"],[13,"Variant89"],[13,"Variant90"],[13,"Variant91"],[13,"Variant92"],[13,"Variant93"],[13,"Variant94"],[13,"Variant95"],[13,"Variant96"],[13,"Variant97"],[13,"Variant98"],[13,"Variant99"],[13,"Variant100"],[13,"Variant101"],[13,"Variant102"],[13,"Variant103"],[13,"Variant104"],[13,"Variant105"],[13,"Variant106"],[13,"Variant107"],[13,"Variant108"],[13,"Variant109"],[13,"Variant110"],[13,"Variant111"],[13,"Variant112"],[13,"Variant113"],[13,"Variant114"],[13,"Variant115"],[4,"Whitespace"],[4,"IndentStyle"],[3,"DEFAULT_SETTINGS"],[3,"FormattingSettings"],[3,"FormattingState"],[8,"HasPrecedence"],[13,"Tabs"],[13,"Spaces"],[4,"Visit"],[8,"Host"],[8,"Visitor"],[8,"VisitorMut"],[8,"HostMut"]]},\
"glsl_lang_cli":{"doc":"<code>glsl-lang</code> debugging CLI.","t":[3,3,12,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,5,5,5,5,5,12,11,12,11,11,12,11,11,11,11,11,11,11],"n":["Opts","ParseError","bad_bit","borrow","borrow","borrow_mut","borrow_mut","code","fmt","fmt","fmt","format","from","from","from_args","inner","into","into","labels","main","output_glsl","output_json","output_text","parse_tu","path","redact_arg_values","snip","source","source_code","src","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["glsl_lang_cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["glsl-lang command-line interface","","","","","","","","","","","output format (text, json or glsl)","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","CLI entry point","","","","","input file path","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,1,2,1,1,2,2,1,2,1,2,1,1,0,0,0,0,0,2,2,1,1,1,1,1,2,1,2,1,2,1],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["box",3,[["display",8]]]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[],["result",4,[["earlyexit",3]]]],null,[[]],[[]],[[["",0]],["option",4,[["box",3,[["iterator",8]]]]]],[[],["result",6,[["error",3]]]],[[["write",8],["translationunit",3]],["result",6]],[[["write",8],["translationunit",3]],["result",6]],[[["write",8],["translationunit",3]],["result",6]],[[["str",0],["str",0]],["result",6,[["translationunit",3]]]],null,[[],["result",4,[["vec",3,[["string",3]]],["earlyexit",3]]]],null,[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["sourcecode",8]]]],null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"ParseError"],[3,"Opts"]]},\
"glsl_lang_lexer":{"doc":"","tn":["AddAssign","Ampersand","AndAssign","AndOp","AtomicUInt","Attribute","BVec2","BVec3","BVec4","Bang","Bool","BoolConstant","Break","Buffer","Caret","Case","Centroid","Coherent","Colon","Comma","CommentList","Const","Continue","DMat2","DMat2x2","DMat2x3","DMat2x4","DMat3","DMat3x2","DMat3x3","DMat3x4","DMat4","DMat4x2","DMat4x3","DMat4x4","DVec2","DVec3","DVec4","Dash","DecOp","Default","Discard","DivAssign","Do","Dot","Double","DoubleConstant","Else","EqOp","Equal","Error","Error","Flat","Float","FloatConstant","For","FunctionPrototype","GeOp","GlslTypeTablePolicy","HasLexerError","HighPrecision","IImage1D","IImage1DArray","IImage2D","IImage2DArray","IImage2DMs","IImage2DMsArray","IImage2DRect","IImage3D","IImageBuffer","IImageCube","IImageCubeArray","ISampler1D","ISampler1DArray","ISampler2D","ISampler2DArray","ISampler2DMs","ISampler2DMsArray","ISampler2DRect","ISampler3D","ISamplerBuffer","ISamplerCube","ISamplerCubeArray","ISubpassInput","ISubpassInputMs","ITexture1D","ITexture1DArray","ITexture2D","ITexture2DArray","ITexture2DMs","ITexture2DMsArray","ITexture2DRect","ITexture3D","ITextureBuffer","ITextureCube","ITextureCubeArray","IVec2","IVec3","IVec4","Identifier","IdentifierContext","If","Image1D","Image1DArray","Image2D","Image2DArray","Image2DMs","Image2DMsArray","Image2DRect","Image3D","ImageBuffer","ImageCube","ImageCubeArray","In","InOut","IncOp","Input","Int","IntConstant","Invariant","Iter","LangLexer","LangLexerIterator","Layout","LeOp","LeftAngle","LeftAssign","LeftBrace","LeftBracket","LeftOp","LeftParen","LowPrecision","Mat2","Mat2x2","Mat2x3","Mat2x4","Mat3","Mat3x2","Mat3x3","Mat3x4","Mat4","Mat4x2","Mat4x3","Mat4x4","MediumPrecision","ModAssign","MulAssign","MultiLineComment","NeOp","NoPerspective","OrAssign","OrOp","Out","ParseContext","ParseContextData","ParseOptions","Patch","Percent","Plus","PpCompatibility","PpCore","PpDefine","PpElif","PpElse","PpEndIf","PpError","PpEs","PpExtDisable","PpExtEnable","PpExtRequire","PpExtWarn","PpExtension","PpIf","PpIfDef","PpIfNDef","PpInclude","PpLine","PpPathAbsolute","PpPathRelative","PpPragma","PpRest","PpUndef","PpVersion","Precise","Precision","Question","ReadOnly","Restrict","Return","RightAngle","RightAssign","RightBrace","RightBracket","RightOp","RightParen","Sample","Sampler","Sampler1D","Sampler1DArray","Sampler1DArrayShadow","Sampler1DShadow","Sampler2D","Sampler2DArray","Sampler2DArrayShadow","Sampler2DMs","Sampler2DMsArray","Sampler2DRect","Sampler2DRectShadow","Sampler2DShadow","Sampler3D","SamplerBuffer","SamplerCube","SamplerCubeArray","SamplerCubeArrayShadow","SamplerCubeShadow","SamplerShadow","Semicolon","Shared","SingleLineComment","Slash","Smooth","Star","Struct","SubAssign","SubpassInput","SubpassInputMs","Subroutine","Switch","Texture1D","Texture1DArray","Texture2D","Texture2DArray","Texture2DMs","Texture2DMsArray","Texture2DRect","Texture3D","TextureBuffer","TextureCube","TextureCubeArray","Tilde","Token","TypeName","TypeTablePolicy","UImage1D","UImage1DArray","UImage2D","UImage2DArray","UImage2DMs","UImage2DMsArray","UImage2DRect","UImage3D","UImageBuffer","UImageCube","UImageCubeArray","UInt","UIntConstant","USampler1D","USampler1DArray","USampler2D","USampler2DArray","USampler2DMs","USampler2DMsArray","USampler2DRect","USampler3D","USamplerBuffer","USamplerCube","USamplerCubeArray","USubpassInput","USubpassInputMs","UTexture1D","UTexture1DArray","UTexture2D","UTexture2DArray","UTexture2DMs","UTexture2DMsArray","UTexture2DRect","UTexture3D","UTextureBuffer","UTextureCube","UTextureCubeArray","UVec2","UVec3","UVec4","Uniform","Varying","Vec2","Vec3","Vec4","VerticalBar","Void","Volatile","While","Whitespace","WriteOnly","XorAssign","XorOp","allow_rs_ident","comments","context","data","default_version","names","new","policy","promote_to_type_name","resolve_err","run","source_id","target_vulkan","token","v2","v2_full","0","0","0","0","0","0","0","0","0","0","CommentList","FunctionPrototype","GlslTypeTablePolicy","IdentifierContext","ParseContext","ParseContextData","ParseOptions","TypeTablePolicy","add_comment","add_comment","add_type_name","add_type_name","allow_rs_ident","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_inner","clone_into","clone_into","clone_into","clone_into","clone_into","comments","comments","data","data","data_mut","default","default","default","default_version","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","has_comments","into","into","into","into","into","into_data","is_type_name","is_type_name","names","ne","ne","new","new","new","new_identifier","new_identifier","new_with_comments","new_with_comments_and_policy","new_with_context","new_with_policy","policy","pop_scope","pop_scope","promote_to_type_name","promote_to_type_name","push_scope","push_scope","source_id","target_vulkan","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_comments","with_comments_and_policy","with_policy","with_policy","AddAssign","Ampersand","AndAssign","AndOp","AtomicUInt","Attribute","BVec2","BVec3","BVec4","Bang","Bool","BoolConstant","Break","Buffer","Caret","Case","Centroid","Coherent","Colon","Comma","Const","Continue","DMat2","DMat2x2","DMat2x3","DMat2x4","DMat3","DMat3x2","DMat3x3","DMat3x4","DMat4","DMat4x2","DMat4x3","DMat4x4","DVec2","DVec3","DVec4","Dash","DecOp","Default","Discard","DivAssign","Do","Dot","Double","DoubleConstant","Else","EqOp","Equal","Error","Flat","Float","FloatConstant","For","GeOp","HighPrecision","IImage1D","IImage1DArray","IImage2D","IImage2DArray","IImage2DMs","IImage2DMsArray","IImage2DRect","IImage3D","IImageBuffer","IImageCube","IImageCubeArray","ISampler1D","ISampler1DArray","ISampler2D","ISampler2DArray","ISampler2DMs","ISampler2DMsArray","ISampler2DRect","ISampler3D","ISamplerBuffer","ISamplerCube","ISamplerCubeArray","ISubpassInput","ISubpassInputMs","ITexture1D","ITexture1DArray","ITexture2D","ITexture2DArray","ITexture2DMs","ITexture2DMsArray","ITexture2DRect","ITexture3D","ITextureBuffer","ITextureCube","ITextureCubeArray","IVec2","IVec3","IVec4","Identifier","If","Image1D","Image1DArray","Image2D","Image2DArray","Image2DMs","Image2DMsArray","Image2DRect","Image3D","ImageBuffer","ImageCube","ImageCubeArray","In","InOut","IncOp","Int","IntConstant","Invariant","Layout","LeOp","LeftAngle","LeftAssign","LeftBrace","LeftBracket","LeftOp","LeftParen","LowPrecision","Mat2","Mat2x2","Mat2x3","Mat2x4","Mat3","Mat3x2","Mat3x3","Mat3x4","Mat4","Mat4x2","Mat4x3","Mat4x4","MediumPrecision","ModAssign","MulAssign","MultiLineComment","NeOp","NoPerspective","OrAssign","OrOp","Out","Patch","Percent","Plus","PpCompatibility","PpCore","PpDefine","PpElif","PpElse","PpEndIf","PpError","PpEs","PpExtDisable","PpExtEnable","PpExtRequire","PpExtWarn","PpExtension","PpIf","PpIfDef","PpIfNDef","PpInclude","PpLine","PpPathAbsolute","PpPathRelative","PpPragma","PpRest","PpUndef","PpVersion","Precise","Precision","Question","ReadOnly","Restrict","Return","RightAngle","RightAssign","RightBrace","RightBracket","RightOp","RightParen","Sample","Sampler","Sampler1D","Sampler1DArray","Sampler1DArrayShadow","Sampler1DShadow","Sampler2D","Sampler2DArray","Sampler2DArrayShadow","Sampler2DMs","Sampler2DMsArray","Sampler2DRect","Sampler2DRectShadow","Sampler2DShadow","Sampler3D","SamplerBuffer","SamplerCube","SamplerCubeArray","SamplerCubeArrayShadow","SamplerCubeShadow","SamplerShadow","Semicolon","Shared","SingleLineComment","Slash","Smooth","Star","Struct","SubAssign","SubpassInput","SubpassInputMs","Subroutine","Switch","Texture1D","Texture1DArray","Texture2D","Texture2DArray","Texture2DMs","Texture2DMsArray","Texture2DRect","Texture3D","TextureBuffer","TextureCube","TextureCubeArray","Tilde","Token","TypeName","UImage1D","UImage1DArray","UImage2D","UImage2DArray","UImage2DMs","UImage2DMsArray","UImage2DRect","UImage3D","UImageBuffer","UImageCube","UImageCubeArray","UInt","UIntConstant","USampler1D","USampler1DArray","USampler2D","USampler2DArray","USampler2DMs","USampler2DMsArray","USampler2DRect","USampler3D","USamplerBuffer","USamplerCube","USamplerCubeArray","USubpassInput","USubpassInputMs","UTexture1D","UTexture1DArray","UTexture2D","UTexture2DArray","UTexture2DMs","UTexture2DMsArray","UTexture2DRect","UTexture3D","UTextureBuffer","UTextureCube","UTextureCubeArray","UVec2","UVec3","UVec4","Uniform","Varying","Vec2","Vec3","Vec4","VerticalBar","Void","Volatile","While","Whitespace","WriteOnly","XorAssign","XorOp","__TOKEN_TOKENS","all_tokens","as_str","borrow","borrow_mut","clone","clone_into","description","eq","fmt","fmt","from","impl_from","into","is_pp","kinds","ne","parser_token","to_owned","to_string","try_from","try_into","type_id","variant_name","0","0","0","0","0","0","0","0","0","0","lang_token","Directives","Io","LexicalError","Processor","Token","borrow","borrow_mut","core","directives","directives","eq","fmt","fmt","from","from","fs","into","location","str","to_string","try_from","try_into","type_id","0","0","kind","pos","HandleTokenResult","Item","Item","LexerCore","None","Pending","borrow","borrow","borrow_mut","borrow_mut","ctx","default","directives","file_id","from","from","handle_directive","handle_file_id","handle_token","into","into","into_directives","lang_token","new","opts","pop_event","pop_item","push_errors","push_item","try_from","try_from","try_into","try_into","type_id","type_id","0","0","1","Directives","borrow","borrow_mut","clone","clone_into","default","directives","directives","fmt","from","from","get_declaration","inject","into","to_owned","try_from","try_into","type_id","Error","File","FileSystem","Lexer","LexerIterator","PreprocessorExt","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","canonicalize","core","current_file","current_file","exists","from","from","from","handle_token","handle_token","inner","inner","inner","into","into","into","into_directives","into_iter","new","new","next","open","open_source","opts","read","registry","resolve_err","run","state","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_context","with_registry","with_state","Lexer","LexerIterator","borrow","borrow","borrow_mut","borrow_mut","core","from","from","handle_token","handle_token","inner","inner","into","into","into_directives","into_iter","new","new_with_state","next","opts","resolve_err","run","source_id","try_from","try_from","try_into","try_into","type_id","type_id","with_context"],"q":["glsl_lang_lexerglsl_lang_lexer::Token","","","","","","","","","","glsl_lang_lexer::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_lexer::tokenglsl_lang_lexer::token::Token","","","","","","","","","","glsl_lang_lexer::v2","glsl_lang_lexer::v2_full","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_lexer::v2_full::LexicalError","","","","glsl_lang_lexer::v2_full::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_lexer::v2_full::core::HandleTokenResult","","","glsl_lang_lexer::v2_full::directives","","","","","","","","","","","","","","","","","","glsl_lang_lexer::v2_full::fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_lexer::v2_full::str","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","A list of comments indexed by their position","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type of lexical analysis error","","","","","The identifier is a function declaration name","","Default GLSL type table policy: only struct declarations …","Language lexer error definition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Context in which an identifier is seen for the first time","","","","","","","","","","","","","","","","Type of the input for this lexer","","","","Type of the iterator returned by this lexer","GLSL language lexer","GLSL language lexer iterator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parsing context","Parsing context data","Parsing options","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A policy to dictate which identifiers should be seen as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allow Rust quoting identifiers (<code>#(ident)</code>) in the source","List of parsed comments (or <code>None</code> to disable comment …","","Parsing data","Default GLSL version number to parse source as","List of known type names","Instantiate the lexer","","Return <code>true</code> if the given identifier (in its context) …","","Run the lexer","Unique source identifier for token positions","<code>true</code> if the GLSL target should be Vulkan instead of OpenGL","","","glsl-lang-pp/full based lexer","","","","","","","","","","","A list of comments indexed by their position","The identifier is a function declaration name","Default GLSL type table policy: only struct declarations …","Context in which an identifier is seen for the first time","Parsing context","Parsing context data","Parsing options","A policy to dictate which identifiers should be seen as …","Add a new comment to the parsed comments list","Add a new comment to the parsed comments list","Register <code>name</code> as a new type name","Register <code>name</code> as a new type name","Allow Rust quoting identifiers (<code>#(ident)</code>) in the source","","","","","","","","","","","","","","","","Clone the parsing data and return the cloned context","","","","","","Get the list of comments stored in this parse context","List of parsed comments (or <code>None</code> to disable comment …","Obtain a reference to the context’s data","Parsing data","Obtain an exclusive reference to the context’s data","","","","Default GLSL version number to parse source as","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return <code>true</code> if this parsing context supports comments","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume this ParseContext and return its data. Will fail …","Return <code>true</code> if the given name is a type name","Return <code>true</code> if the given name is a type name","List of known type names","","","Create new parsing options using default values","Create a new parsing context from this options object","Create a new ParseContextData object","Update the context data with a new identifier in a given …","Update the context data with a new identifier in a given …","Create a new parsing context from this options object, …","Create a new parsing context from this options object, …","Create a new parsing context from this options object and …","Create a new parsing context from this options object, …","","Leave the current nesting level","Leave the current nesting level","Return <code>true</code> if the given identifier (in its context) …","","Enter a new nesting level for declarations","Enter a new nesting level for declarations","Unique source identifier for token positions","<code>true</code> if the GLSL target should be Vulkan instead of OpenGL","","","","","","","","","","","","","","","","","","","","","Create a new ParseContextData object with comments parsing …","Create a new ParseContextData object with comments parsing …","Create a new parse context cloning the given one’s data, …","Create a new ParseContextData object with the given type …eturn this token’s inner text as a string slice","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Return <code>true</code> if this token is a preprocessor token","","","","","","","","","","","","","","","","","","","","","","i/o error","Lexical analysis error","Preprocessor error","Invalid token in lexical analysis","","","","","","","","","Returns the argument unchanged.","","Filesystem based glsl-lang-pp preprocessing lexer","Calls <code>U::from(self)</code>.","","Memory based glsl-lang-pp preprocessing lexer","","","","","","","Type of invalid token error","Location of the error","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","A preprocessor parsed file ready for lexing","","glsl-lang-pp filesystem lexer","glsl-lang-pp filesystem lexer iterator","glsl-lang-pp preprocessor extensions","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Open the given file for lexing","Open the given source block for lexing","","","","","","","","","","","","","","","","","Set the extension registry to use for this file","Set the default processor state for processing this file","glsl-lang-pp memory lexer","glsl-lang-pp memory lexer iterator","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,3,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,4,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,6,0,7,5,6,4,6,8,9,4,5,5,0,0,0,10,11,12,13,14,15,16,17,18,19,0,3,0,0,0,0,0,0,7,6,7,6,5,5,7,6,3,20,5,7,6,3,20,5,7,6,3,20,7,5,7,6,3,20,6,6,7,7,7,5,7,6,5,5,7,6,3,5,7,6,3,20,5,7,7,6,3,20,7,5,7,6,3,20,7,7,6,6,5,7,5,7,6,7,6,7,7,7,7,6,7,6,8,20,7,6,5,5,5,7,6,3,20,5,7,6,3,20,5,7,6,3,20,5,7,6,3,20,6,6,7,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,10,11,12,13,14,15,16,17,18,19,0,0,21,0,21,21,21,21,0,0,22,21,21,21,21,21,0,21,21,0,21,21,21,21,23,24,25,25,0,0,26,0,26,26,27,26,27,26,27,26,27,27,27,26,27,27,27,27,26,27,27,27,27,26,26,26,26,27,26,27,26,27,26,28,29,29,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,30,0,0,0,0,0,31,32,33,31,32,33,30,32,31,32,30,31,32,33,31,32,31,32,33,31,32,33,32,32,31,31,32,34,34,31,30,33,32,31,33,31,32,33,31,32,33,31,32,33,31,33,33,0,0,35,36,35,36,36,35,36,35,36,35,36,35,36,36,36,35,35,36,35,36,35,36,35,36,35,36,35,36,35],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["parseoptions",3]]],null,[[["",0],["identifier",6],["identifiercontext",4]],["bool",0]],[[["",0],["parseerror",4,[["lexerposition",3],["token",4]]]],["parseerror",6]],[[["parsecontext",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["comment",6]]],[[["",0],["comment",6]]],[[["",0],["identifier",6]],["typename",6]],[[["",0],["identifier",6]],["typename",6]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["parseoptions",3]],[[["",0]],["parsecontext",3]],[[["",0]],["parsecontextdata",3]],[[["",0]],["identifiercontext",4]],[[["",0]],["glsltypetablepolicy",3]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["option",4,[["commentlist",6]]]],null,[[["",0]],["ref",3,[["parsecontextdata",3]]]],null,[[["",0]],["refmut",3,[["parsecontextdata",3]]]],[[]],[[],["parsecontext",3]],[[]],null,[[["",0],["parseoptions",3]],["bool",0]],[[["",0],["parsecontext",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["identifiercontext",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["parsecontextdata",3]]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["parsecontextdata",3]]]],[[["",0],["str",0]],["bool",0]],[[["",0],["str",0]],["bool",0]],null,[[["",0],["parseoptions",3]],["bool",0]],[[["",0],["parsecontext",3]],["bool",0]],[[]],[[],["parsecontext",3]],[[]],[[["",0],["identifier",6],["identifiercontext",4]]],[[["",0],["identifier",6],["identifiercontext",4]]],[[]],[[]],[[["parsecontextdata",3]]],[[]],null,[[["",0]]],[[["",0]]],[[["",0],["identifier",6],["identifiercontext",4]],["bool",0]],[[["",0],["identifier",6],["identifiercontext",4]],["bool",0]],[[["",0]]],[[["",0]]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[["",0]],["parsecontext",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["token",4]],[[["",0],["",0]]],[[["",0]],["tokendescription",3]],[[["",0],["token",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[]],[[["",0]],["bool",0]],[[["",0]]],[[["",0],["token",4]],["bool",0]],[[["",0]],["str",0]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["str",0]],null,null,null,null,null,null,null,null,null,null,[[["parsecontext",3],["str",0],["nodespan",3],["token",4]],["result",4]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["error",6]]],null,[[]],[[["",0]]],null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],null,null,[[]],[[]],[[["",0],["eventdirective",3],["bool",0]],["result",4,[["vec",3,[["error",6]]]]]],[[["",0],["fileid",3]]],[[["",0],["outputtoken",3],["token",4],["tokenstate",4],["tokenizer",3],["handletokenresult",4]]],[[]],[[]],[[],["directives",3]],[[["",0],["outputtoken",3],["token",4]],["result",4]],[[["parseoptions",3],["parsecontext",3]]],null,[[["",0]],["option",4,[["result",4,[["event",4],["located",3]]]]]],[[["",0]],["option",4,[["result",4,[["lexicalerror",4]]]]]],[[["",0]]],[[["",0],["result",4,[["lexicalerror",4]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["directives",3]],[[["",0],["",0]]],[[],["directives",3]],[[["",0]]],null,[[["",0],["formatter",3]],["result",6]],[[["vec",3,[["eventdirective",3]]]]],[[]],[[["eventdirective",3]],["option",4,[["externaldeclaration",6]]]],[[["translationunit",3]],["directives",3]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["path",3]],["result",4,[["pathbuf",3]]]],null,null,null,[[["",0],["path",3]],["bool",0]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[],["directives",3]],[[]],[[["parseoptions",3]]],[[["expandstack",3],["registry",3],["parseoptions",3]]],[[["",0]],["option",4]],[[["",0]],["result",4,[["file",3]]]],[[["",0],["str",0]],["file",3]],null,[[["",0],["path",3]],["result",4,[["cow",4,[["str",0]]]]]],null,[[["",0],["parseerror",4,[["lexerposition",3],["token",4]]]],["parseerror",6]],[[["parsecontext",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["parsecontext",3]],["lexeriterator",3]],[[]],[[]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[]],null,null,null,null,[[]],[[]],[[],["directives",3]],[[]],[[["parseoptions",3]]],[[["str",0],["registry",3],["parseoptions",3],["processorstate",3]]],[[["",0]],["option",4]],null,[[["",0],["parseerror",4,[["lexerposition",3],["token",4]]]],["parseerror",6]],[[["parsecontext",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["parsecontext",3]],["lexeriterator",3]]],"p":[[4,"Token"],[8,"HasLexerError"],[4,"IdentifierContext"],[8,"LangLexer"],[3,"ParseOptions"],[3,"ParseContextData"],[3,"ParseContext"],[8,"TypeTablePolicy"],[8,"LangLexerIterator"],[13,"Identifier"],[13,"TypeName"],[13,"FloatConstant"],[13,"IntConstant"],[13,"UIntConstant"],[13,"BoolConstant"],[13,"DoubleConstant"],[13,"PpRest"],[13,"PpPathAbsolute"],[13,"PpPathRelative"],[3,"GlslTypeTablePolicy"],[4,"LexicalError"],[3,"Directives"],[13,"Processor"],[13,"Io"],[13,"Token"],[4,"HandleTokenResult"],[3,"LexerCore"],[13,"Item"],[13,"Pending"],[8,"FileSystem"],[3,"Lexer"],[3,"LexerIterator"],[3,"File"],[8,"PreprocessorExt"],[3,"Lexer"],[3,"LexerIterator"]]},\
"glsl_lang_pp":{"doc":"","t":[14,0,11,14,0,0,0,0,14,0,0,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,17,17,17,6,3,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,4,8,13,8,13,4,3,3,13,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,4,13,13,13,12,0,12,0,0,3,6,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,3,6,4,13,13,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,3,13,13,13,4,6,13,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,11,11,0,11,11,11,11,11,11,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,3,3,6,6,6,13,0,11,11,11,11,11,11,11,12,11,11,11,11,11,0,12,11,11,11,11,11,11,11,12,11,11,11,0,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,0,0,11,11,12,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,12,11,11,11,12,11,11,12,11,11,11,11,11,13,6,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,0,11,11,12,12,11,11,11,12,0,0,0,11,11,12,11,11,11,11,11,11,11,0,11,12,11,11,11,11,11,11,0,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,4,13,13,13,4,3,13,13,13,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,4,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,6,4,13,4,3,13,13,8,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,0,12,12,10,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,4,3,3,4,13,4,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,12,11,12,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,4,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,16,3,8,3,13,4,3,13,3,6,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,10,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,13,13,13,13,3,4,3,4,3,3,8,6,13,3,4,3,4,3,13,3,4,3,4,13,13,13,13,3,4,4,4,13,13,13,13,3,3,4,4,4,3,3,4,13,3,13,13,13,13,13,13,13,13,3,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,4,3,4,13,13,13,13,3,13,13,17,3,4,4,13,11,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,12,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,13,4,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,12,0,0,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,6,3,11,11,11,11,11,11,11,11,11,11,11,11,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,13,6,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,0,0,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,12,13,13,3,4,3,3,13,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["ext_name","exts","into_node","keyword","last","lexer","parser","processor","type_name","types","util","DEFAULT_REGISTRY","EMPTY_REGISTRY","ExtensionSpec","Registry","__private_field","__private_field","all","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","deref","deref","extensions","from","from","from","from","get","into","into","into","into","name","name","names","new","new","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_names","type_names","ATOM_EXTNAMEATOM_","ATOM_EXTNAMEATOM__47_4C_5F_41_52_42_5F_73_68_61_64_69_6E_67_5F_6C_61_6E_67_75_61_67_65_5F_69_6E_63_6C_75_64_65","ATOM_EXTNAMEATOM__47_4C_5F_47_4F_4F_47_4C_45_5F_63_70_70_5F_73_74_79_6C_65_5F_6C_69_6E_65_5F_64_69_72_65_63_74_69_76_65","ATOM_EXTNAMEATOM__47_4C_5F_47_4F_4F_47_4C_45_5F_69_6E_63_6C_75_64_65_5F_64_69_72_65_63_74_69_76_65","ExtNameAtom","ExtNameAtomStaticSet","borrow","borrow_mut","cmp","empty_string_index","eq","from","get","into","partial_cmp","try_from","try_into","type_id","Active","Directive","EnterFile","Error","Event","LocatedIterator","Masked","MaybeToken","Token","TokenState","Tokenizer","TypeTable","Warn","active","as_token","as_token","as_token_kind","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current_version","eq","eq","extensions","fmt","fmt","from","from","from","from","handle_extension","inner","into","into","into","into","into_iter","is_type_name","location","location","ne","ne","new","new","new","next","pending_error","promote_type_name","promote_type_name","registry","resolve","set_extension_behavior","target_vulkan","to_owned","token","tokenize_single","tokenize_single","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_names","type_table","warn","canonical_path","directive","error","file_id","masked","masked","path","source_token","state","token_kind","0","token_from_syntax_kind","ADD_ASSIGN","AMPERSAND","AND_ASSIGN","AND_OP","ANGLE_STRING","ASTERISK","BACKSLASH","BANG","BAR","CARET","COLON","COMMA","COMMENT","DASH","DEC_OP","DEFINED","DIGITS","DIV_ASSIGN","EQUAL","EQ_OP","ERROR","GE_OP","HASH","IDENT_KW","INC_OP","LANGLE","LBRACE","LBRACKET","LEFT_ASSIGN","LEFT_OP","LE_OP","LINECONT","LPAREN","Lexer","MOD_ASSIGN","MUL_ASSIGN","NEWLINE","NE_OP","OR_ASSIGN","OR_OP","PERCENT","PERIOD","PLUS","PP_CONCAT","QUESTION","QUOTE_STRING","RANGLE","RBRACE","RBRACKET","RIGHT_ASSIGN","RIGHT_OP","RPAREN","SEMICOLON","SLASH","SUB_ASSIGN","TILDE","TextToken","Token","WS","XOR_ASSIGN","XOR_OP","buffer","glue","input","newline","pre","Lexer","TextToken","borrow","borrow_mut","buffer","clone","clone_into","fmt","from","input","input","into","into_iter","into_line_map","line_map","maybe_concat","maybe_concat2","new","next","next","set_expect_angle_string","to_owned","token","try_from","try_into","type_id","ADD_ASSIGN","AMPERSAND","AND_ASSIGN","AND_OP","ANGLE_STRING","ASTERISK","BACKSLASH","BANG","BAR","CARET","COLON","COMMA","COMMENT","DASH","DEC_OP","DEFINED","DIGITS","DIV_ASSIGN","EQUAL","EQ_OP","ERROR","GE_OP","HASH","IDENT_KW","INC_OP","LANGLE","LBRACE","LBRACKET","LEFT_ASSIGN","LEFT_OP","LE_OP","LINECONT","LPAREN","MOD_ASSIGN","MUL_ASSIGN","NEWLINE","NE_OP","OR_ASSIGN","OR_OP","PERCENT","PERIOD","PLUS","PP_CONCAT","QUESTION","QUOTE_STRING","RANGLE","RBRACE","RBRACKET","RIGHT_ASSIGN","RIGHT_OP","RPAREN","SEMICOLON","SLASH","SUB_ASSIGN","TILDE","Token","WS","XOR_ASSIGN","XOR_OP","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from","into","is_trivia","to_owned","try_from","try_into","type_id","DIGIT","LETTER","NEWLINE","NewlineSplitter","NewlineToken","NewlineTokenKind","PUNCT","WS","borrow","borrow","borrow_mut","borrow_mut","chars","clone","clone","clone_into","clone_into","current_pos","end","eq","fmt","fmt","from","from","into","into","into_iter","into_line_map","line_map","line_map","new","next","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AngleString","Backslash","Digits","Ident","Init","MultiComment","MultiCommentStar","PreLexer","QuoteString","SingleComment","Slash","State","TextToken","Whitespace","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","expect_angle_string","fmt","fmt","from","from","input","input","into","into","into_iter","into_line_map","line_map","ne","new","next","next_token","peek_token","peeked","return_to","set_expect_angle_string","source","start","state","to_owned","to_owned","token","try_from","try_from","try_into","try_into","type_id","type_id","seen_e","AMPERSAND","ANGLE_STRING","ASTERISK","BACKSLASH","BANG","BAR","CARET","COLON","COMMA","COMMENT","DASH","DEFINED","DIGITS","EQUAL","ERROR","HASH","IDENT_KW","LANGLE","LBRACE","LBRACKET","LINECONT","LPAREN","NEWLINE","PERCENT","PERIOD","PLUS","QUESTION","QUOTE_STRING","RANGLE","RBRACE","RBRACKET","RPAREN","SEMICOLON","SLASH","TILDE","Token","WS","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from_punct","into","is_trivia","to_owned","try_from","try_into","type_id","EndOfInput","ExpectAny","Found","Parser","ParserRun","SyntaxBitset","SyntaxNode","SyntaxToken","Unexpected","ast","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer_trivia","builder","bump","checkpoint","clone","clone_into","eat_trivia","error","errors","expect_any","expect_one","finish_node","fmt","from","from","from","input","into","into","into","lang","new","new","parse","parse_ast","parse_define_body","parse_one","peek","peeked","push_error","raw","skip","skip_trivia","source","source","start_node","start_node_at","syntax","syntax_kind","text","to_owned","trivia_buffer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","Ast","borrow","borrow_mut","clone","clone_into","errors","fmt","from","green_node","green_node","into","into_inner","line_map","new","to_owned","try_from","try_into","type_id","EndOfInput","Error","ErrorKind","ExtraTokensInPreprocessorDirective","Unexpected","UnexpectedTokensInDefineArgs","UnknownPreprocessorDirective","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","ne","to_owned","to_string","try_from","try_into","type_id","actual","expected","expected","name","name","PreprocessorLang","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","kind_from_raw","kind_to_raw","partial_cmp","to_owned","try_from","try_into","type_id","InputToken","define_body","digits","file","ident","if_section_or_control_line","pp_concat","pp_define","pp_error","pp_extension","pp_if_expr","pp_if_ident","pp_include","pp_line","pp_pragma","pp_tokens","pp_version","ADD_ASSIGN","AMPERSAND","AND_ASSIGN","AND_OP","ANGLE_STRING","ASTERISK","BACKSLASH","BANG","BAR","CARET","COLON","COMMA","COMMENT","DASH","DEC_OP","DEFINED","DIGITS","DIV_ASSIGN","EQUAL","EQ_OP","ERROR","GE_OP","HASH","IDENT_KW","INC_OP","LANGLE","LBRACE","LBRACKET","LEFT_ASSIGN","LEFT_OP","LE_OP","LPAREN","MOD_ASSIGN","MUL_ASSIGN","NEWLINE","NE_OP","OR_ASSIGN","OR_OP","PERCENT","PERIOD","PLUS","PP_CONCAT","PP_CONCAT_OP","PP_DEFINE","PP_DEFINE_ARG","PP_DEFINE_ARGS","PP_DEFINE_BODY","PP_ELIF","PP_ELSE","PP_EMPTY","PP_ENDIF","PP_ERROR","PP_ERROR_BODY","PP_EXTENSION","PP_IDENT","PP_IF","PP_IFDEF","PP_IFNDEF","PP_IF_EXPR","PP_INCLUDE","PP_INCLUDE_PATH","PP_LINE","PP_LINE_BODY","PP_PRAGMA","PP_PRAGMA_BODY","PP_UNDEF","PP_VERSION","PP_VERSION_NUMBER","PP_VERSION_PROFILE","QUESTION","QUOTE_STRING","RANGLE","RBRACE","RBRACKET","RIGHT_ASSIGN","RIGHT_OP","ROOT","RPAREN","SEMICOLON","SLASH","SUB_ASSIGN","SyntaxKind","TILDE","WS","XOR_ASSIGN","XOR_OP","_LAST","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","from","from","hash","into","is_newline","is_trivia","is_whitespace","partial_cmp","paste","to_owned","try_from","try_into","type_id","ArbInclude","GoogleInclude","IncludeMode","None","ProcessorState","ProcessorStateBuilder","add_extension","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone","clone_into","clone_into","clone_into","compatibility_profile","compatibility_profile","core_profile","core_profile","cpp_style_line","cpp_style_line","default","default","default","definition","definition","definition","definitions","definitions","eq","eq","es_profile","es_profile","event","expand","expr","extension","extension","extensions","finish","fmt","fmt","from","from","from","from","fs","get_definition","include_mode","into","into","into","ne","ne","new","nodes","registry","registry","str","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","warn","warn","warn","Definition","File","Function","Line","MacroCall","MacroInvocation","Object","Regular","Version","arg_count","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","concat_node_to_tokens","definition","eq","file_id","fmt","from","from","from","into","into","into","name","ne","object_like","parse_nested","parse_raw","protected","range","subs_tokens","substitute","substitute_define_function","substitute_define_object","substitute_function","substitute_inner","substitute_object","substitute_string","substitute_vec","substitute_vec_inner","to_owned","tokens","trim_ws","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","1","0","CppStyleLineNotSupported","Define","Directive","Directive","DirectiveDefine","DirectiveElif","DirectiveElse","DirectiveEndIf","DirectiveError","DirectiveExtension","DirectiveIf","DirectiveIfDef","DirectiveIfNDef","DirectiveInclude","DirectiveKind","DirectiveLine","DirectivePragma","DirectiveUndef","DirectiveVersion","Elif","Else","Empty","EndIf","EnterFile","EnterFile","Error","Error","Error","Error","ErrorDirective","ErrorKind","Event","EventDirective","Extension","ExtraElif","ExtraElse","ExtraEndIf","If","IfDef","IfNDef","Include","IncludeNotFound","IncludeNotSupported","Invalid","InvalidTokenPaste","Line","MismatchedArguments","OutputToken","Parse","Pragma","Processing","ProcessingError","ProcessingErrorKind","ProtectedDefine","SendEvent","SendNode","Token","Token","TokenLike","Undef","UnexpectedDirective","UnsupportedExt","UnterminatedMacroInvocation","Version","WarnExtUse","as_token","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","directive","directive_error","directive_errors","enter_file","eq","eq","eq","eq","eq","eq","error","errors","errors","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_token","into","into","into","into","into","into","into_errors","into_token","is_token","kind","kind","kind","kind","kind","kind","map_error","ne","ne","ne","ne","ne","ne","new","new_error","node","range","root","send","source_id","source_range","text","text","text","text","text_range","text_range","text_range","text_range","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","token","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unsupported_ext","warn_ext_use","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","extension","extension","name","pos","pos","raw_line","raw_line","canonical_path","directive","error","file_id","masked","masked","masked","path","token","0","0","0","0","0","0","0","0","0","0","0","0","0","0","actual","expected","ident","ident","ident","ident","is_undef","message","node","path","token","canonical_path","error","errors","file_id","masked","masked","masked","node","path","token","Directive","EnterFile","Error","SendEvent","SendNode","Token","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from","from","into","into","ne","ne","range","root","text","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","canonical_path","error","errors","file_id","masked","masked","masked","node","path","token","Complete","Completed","EnterFile","EnterFile","EnterNewFile","Event","Event","ExpandEvent","ExpandLocation","ExpandOne","ExpandState","ExpandedTokens","HandleNodeResult","Init","Iterate","LocationString","Number","PendingEvents","PendingOne","String","add_override","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current_file","current_file","current_file","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","handle_node","handle_node_or_token","handle_token","if_stack","if_stack","into","into","into","into","into","into","into_iter","is_number","line_map","line_override","line_override","line_to_line_number","location","location","ne","new","new","next","offset_to_line_and_col","offset_to_raw_line_and_col","resolve","set_state","state","state","string","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","1","ast","current_state","current_state","current_state","current_state","current_state","current_state","errors","errors","errors","errors","errors","events","events","iterator","iterator","iterator","iterator","iterator","node","node_or_token","path","0","0","1","2","0","0","Active","ExtraElif","ExtraElse","ExtraEndIf","IfError","IfStack","IfState","None","One","activate","active","active","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deactivate","else_seen","eq","fmt","fmt","from","from","from","if_group_active","into","into","into","ne","new","on_elif","on_else","on_endif","on_if_like","stack","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_else_seen","else_seen","else_seen","Constant","EvalResult","ExprEvaluator","Token","additive","and","binary_op","borrow","borrow","borrow_mut","borrow_mut","bump","clone","clone","clone_into","clone_into","eq","equality","expr","fmt","fmt","from","from","input","into","into","into_iter","logical_and","logical_or","multiplicative","ne","new","next","next_result","or","peek","peek_kind","primary","relational","shift","state","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unary","xor","0","0","Error","ExpandStack","FileSystem","ParsedFile","Path","PathOrSource","Processor","Source","Std","StdProcessor","as_path","ast","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonical_paths","canonicalize","canonicalize","clone","clone","clone_into","clone_into","cmp","default","default","eq","exists","exists","expand_one","file_cache","file_id","file_id","file_ids","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","fs","get_paths","hash","into","into","into","into","into","into_iter","into_iter","into_state","location","ne","new","new_with_fs","next","parse","parse_source","partial_cmp","process","processor","processor","read","read","resolve","resolve","resolve_relative_to_id","resolve_relative_to_path","stack","state","system_paths","system_paths","system_paths_mut","to_owned","to_owned","tokenize","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","1","All","Compatibility","Core","Debug","Define","DefineError","DefineFunction","DefineKind","DefineObject","Directive","DirectiveExt","DirectiveResult","Disable","Elif","ElifError","Else","ElseError","Empty","Enable","EndIf","EndIfError","Error","ErrorError","Es","EsProfileRequired","Eval","Eval","Extension","ExtensionBehavior","ExtensionError","ExtensionName","ExtraTokens","ExtraTokens","ExtraTokens","Function","If","IfDef","IfDefError","IfError","IfEvalError","IfNDef","Include","IncludeError","IncorrectSyntax","Invalid","InvalidAllBehavior","InvalidExpr","InvalidExtensionBehavior","InvalidLineNumber","InvalidPath","InvalidPathLiteral","InvalidVersionNumber","InvalidVersionProfile","Line","Line","LineAndFileNumber","LineAndPath","LineError","MalformedExpr","MalformedLine","MalformedPath","MissingBody","MissingBody","MissingBody","MissingBody","MissingBody","MissingBody","MissingExpr","MissingExtensionBehavior","MissingExtensionName","MissingIdentifier","MissingLineNumber","MissingName","MissingPath","MissingVersionNumber","None","Object","Optimize","ParsedLine","ParsedPragma","Pragma","PragmaError","ProfileUnsupported","Require","Specific","StdGl","Undef","Unknown","UnsupportedVersionNumber","VALID_VERSION_NUMBERS","Version","VersionError","VersionProfile","Warn","arg_names","args","behavior","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","deref","disable","enable","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eval","eval","eval_if","eval_inner","file_id","file_id","file_id","file_id","file_id","file_id","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","function","ident","ident","ident","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_node","is_active","kind","kind","line_number","message","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","node","node","number","object","one","parse","parse_function_pragma","parsed_profile","path","path","profile","protected","protected","raw","raw","require","source","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","warn","name","0","0","0","behavior","name","name","0","0","token","tokens","tokens","token","tokens","tokens","token","token","tokens","tokens","0","0","0","1","1","0","0","0","0","name","0","version_number","version_number","version_number","ExpandStr","IncludeRequested","ProcessStrError","borrow","borrow","borrow_mut","borrow_mut","eq","final_state","fmt","fmt","from","from","inner","into","into","into_iter","into_state","location","ne","next","parse","process","to_string","tokenize","try_from","try_from","try_into","try_into","type_id","type_id","0","keywords","path","token","type_names","ATOM_KEYWORDATOM_","ATOM_KEYWORDATOM__61_63_74_69_76_65","ATOM_KEYWORDATOM__61_73_6D","ATOM_KEYWORDATOM__61_74_74_72_69_62_75_74_65","ATOM_KEYWORDATOM__62_72_65_61_6B","ATOM_KEYWORDATOM__62_75_66_66_65_72","ATOM_KEYWORDATOM__63_61_73_65","ATOM_KEYWORDATOM__63_61_73_74","ATOM_KEYWORDATOM__63_65_6E_74_72_6F_69_64","ATOM_KEYWORDATOM__63_6C_61_73_73","ATOM_KEYWORDATOM__63_6F_68_65_72_65_6E_74","ATOM_KEYWORDATOM__63_6F_6D_6D_6F_6E","ATOM_KEYWORDATOM__63_6F_6E_73_74","ATOM_KEYWORDATOM__63_6F_6E_74_69_6E_75_65","ATOM_KEYWORDATOM__64_65_66_61_75_6C_74","ATOM_KEYWORDATOM__64_69_73_63_61_72_64","ATOM_KEYWORDATOM__64_6F","ATOM_KEYWORDATOM__65_6C_73_65","ATOM_KEYWORDATOM__65_6E_75_6D","ATOM_KEYWORDATOM__65_78_74_65_72_6E","ATOM_KEYWORDATOM__65_78_74_65_72_6E_61_6C","ATOM_KEYWORDATOM__66_61_6C_73_65","ATOM_KEYWORDATOM__66_69_6C_74_65_72","ATOM_KEYWORDATOM__66_69_78_65_64","ATOM_KEYWORDATOM__66_6C_61_74","ATOM_KEYWORDATOM__66_6F_72","ATOM_KEYWORDATOM__67_6F_74_6F","ATOM_KEYWORDATOM__68_61_6C_66","ATOM_KEYWORDATOM__68_69_67_68_70","ATOM_KEYWORDATOM__69_66","ATOM_KEYWORDATOM__69_6E","ATOM_KEYWORDATOM__69_6E_6C_69_6E_65","ATOM_KEYWORDATOM__69_6E_6F_75_74","ATOM_KEYWORDATOM__69_6E_70_75_74","ATOM_KEYWORDATOM__69_6E_74_65_72_66_61_63_65","ATOM_KEYWORDATOM__69_6E_76_61_72_69_61_6E_74","ATOM_KEYWORDATOM__6C_61_79_6F_75_74","ATOM_KEYWORDATOM__6C_6F_6E_67","ATOM_KEYWORDATOM__6C_6F_77_70","ATOM_KEYWORDATOM__6D_65_64_69_75_6D_70","ATOM_KEYWORDATOM__6E_61_6D_65_73_70_61_63_65","ATOM_KEYWORDATOM__6E_6F_69_6E_6C_69_6E_65","ATOM_KEYWORDATOM__6E_6F_70_65_72_73_70_65_63_74_69_76_65","ATOM_KEYWORDATOM__6F_75_74","ATOM_KEYWORDATOM__6F_75_74_70_75_74","ATOM_KEYWORDATOM__70_61_72_74_69_74_69_6F_6E","ATOM_KEYWORDATOM__70_61_74_63_68","ATOM_KEYWORDATOM__70_72_65_63_69_73_65","ATOM_KEYWORDATOM__70_72_65_63_69_73_69_6F_6E","ATOM_KEYWORDATOM__70_75_62_6C_69_63","ATOM_KEYWORDATOM__72_65_61_64_6F_6E_6C_79","ATOM_KEYWORDATOM__72_65_73_6F_75_72_63_65","ATOM_KEYWORDATOM__72_65_73_74_72_69_63_74","ATOM_KEYWORDATOM__72_65_74_75_72_6E","ATOM_KEYWORDATOM__73_61_6D_70_6C_65","ATOM_KEYWORDATOM__73_68_61_72_65_64","ATOM_KEYWORDATOM__73_68_6F_72_74","ATOM_KEYWORDATOM__73_69_7A_65_6F_66","ATOM_KEYWORDATOM__73_6D_6F_6F_74_68","ATOM_KEYWORDATOM__73_74_61_74_69_63","ATOM_KEYWORDATOM__73_74_72_75_63_74","ATOM_KEYWORDATOM__73_75_62_72_6F_75_74_69_6E_65","ATOM_KEYWORDATOM__73_75_70_65_72_70","ATOM_KEYWORDATOM__73_77_69_74_63_68","ATOM_KEYWORDATOM__74_65_6D_70_6C_61_74_65","ATOM_KEYWORDATOM__74_68_69_73","ATOM_KEYWORDATOM__74_72_75_65","ATOM_KEYWORDATOM__74_79_70_65_64_65_66","ATOM_KEYWORDATOM__75_6E_69_66_6F_72_6D","ATOM_KEYWORDATOM__75_6E_69_6F_6E","ATOM_KEYWORDATOM__75_6E_73_69_67_6E_65_64","ATOM_KEYWORDATOM__75_73_69_6E_67","ATOM_KEYWORDATOM__76_61_72_79_69_6E_67","ATOM_KEYWORDATOM__76_6F_6C_61_74_69_6C_65","ATOM_KEYWORDATOM__77_68_69_6C_65","ATOM_KEYWORDATOM__77_72_69_74_65_6F_6E_6C_79","KeywordAtom","KeywordAtomStaticSet","borrow","borrow_mut","cmp","empty_string_index","eq","from","get","into","partial_cmp","try_from","try_into","type_id","Angle","ParsedPath","PathType","Quote","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","into","into","ne","path","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","ty","type_id","type_id","ACTIVE","ADD_ASSIGN","AMPERSAND","AND_ASSIGN","AND_OP","ASM","ASTERISK","ATOMIC_UINT","ATTRIBUTE","BANG","BAR","BOOL","BOOL_CONST","BREAK","BUFFER","BVEC2","BVEC3","BVEC4","CARET","CASE","CAST","CENTROID","CLASS","COHERENT","COLON","COMMA","COMMENT","COMMON","CONST","CONTINUE","DASH","DEC_OP","DEFAULT","DISCARD","DIV_ASSIGN","DMAT2","DMAT2X2","DMAT2X3","DMAT2X4","DMAT3","DMAT3X2","DMAT3X3","DMAT3X4","DMAT4","DMAT4X2","DMAT4X3","DMAT4X4","DO","DOUBLE","DOUBLE_CONST","DVEC2","DVEC3","DVEC4","ELSE","ENUM","EQUAL","EQ_OP","ERROR","EXTERN","EXTERNAL","ErrorKind","FILTER","FIXED","FLAT","FLOAT","FLOAT_CONST","FOR","GE_OP","GOTO","HALF","HASH","HIGHP","IDENT","IF","IIMAGE1D","IIMAGE1DARRAY","IIMAGE2D","IIMAGE2DARRAY","IIMAGE2DMS","IIMAGE2DMSARRAY","IIMAGE2DRECT","IIMAGE3D","IIMAGEBUFFER","IIMAGECUBE","IIMAGECUBEARRAY","IMAGE1D","IMAGE1DARRAY","IMAGE2D","IMAGE2DARRAY","IMAGE2DMS","IMAGE2DMSARRAY","IMAGE2DRECT","IMAGE3D","IMAGEBUFFER","IMAGECUBE","IMAGECUBEARRAY","IN","INC_OP","INLINE","INOUT","INPUT","INT","INTERFACE","INT_CONST","INVARIANT","ISAMPLER1D","ISAMPLER1DARRAY","ISAMPLER2D","ISAMPLER2DARRAY","ISAMPLER2DMS","ISAMPLER2DMSARRAY","ISAMPLER2DRECT","ISAMPLER3D","ISAMPLERBUFFER","ISAMPLERCUBE","ISAMPLERCUBEARRAY","ISUBPASSINPUT","ISUBPASSINPUTMS","ITEXTURE1D","ITEXTURE1DARRAY","ITEXTURE2D","ITEXTURE2DARRAY","ITEXTURE2DMS","ITEXTURE2DMSARRAY","ITEXTURE2DRECT","ITEXTURE3D","ITEXTUREBUFFER","ITEXTURECUBE","ITEXTURECUBEARRAY","IVEC2","IVEC3","IVEC4","InvalidDoubleLiteral","InvalidFloatLiteral","InvalidIntLiteral","InvalidToken","InvalidUIntLiteral","LANGLE","LAYOUT","LBRACE","LBRACKET","LEFT_ASSIGN","LEFT_OP","LE_OP","LONG","LOWP","LPAREN","MAT2","MAT2X2","MAT2X3","MAT2X4","MAT3","MAT3X2","MAT3X3","MAT3X4","MAT4","MAT4X2","MAT4X3","MAT4X4","MEDIUMP","MOD_ASSIGN","MUL_ASSIGN","NAMESPACE","NE_OP","NOINLINE","NOPERSPECTIVE","OR_ASSIGN","OR_OP","OTHER","OUT","OUTPUT","PARTITION","PATCH","PERCENT","PERIOD","PLUS","PRECISE","PRECISION","PUBLIC","QUESTION","RANGLE","RBRACE","RBRACKET","READONLY","RESERVED","RESOURCE","RESTRICT","RETURN","RIGHT_ASSIGN","RIGHT_OP","RPAREN","SAMPLE","SAMPLER","SAMPLER1D","SAMPLER1DARRAY","SAMPLER1DARRAYSHADOW","SAMPLER1DSHADOW","SAMPLER2D","SAMPLER2DARRAY","SAMPLER2DARRAYSHADOW","SAMPLER2DMS","SAMPLER2DMSARRAY","SAMPLER2DRECT","SAMPLER2DRECTSHADOW","SAMPLER2DSHADOW","SAMPLER3D","SAMPLERBUFFER","SAMPLERCUBE","SAMPLERCUBEARRAY","SAMPLERCUBEARRAYSHADOW","SAMPLERCUBESHADOW","SAMPLERSHADOW","SEMICOLON","SHARED","SHORT","SIZEOF","SLASH","SMOOTH","STATIC","STRUCT","SUBPASSINPUT","SUBPASSINPUTMS","SUBROUTINE","SUB_ASSIGN","SUPERP","SWITCH","TEMPLATE","TEXTURE1D","TEXTURE1DARRAY","TEXTURE2D","TEXTURE2DARRAY","TEXTURE2DMS","TEXTURE2DMSARRAY","TEXTURE2DRECT","TEXTURE3D","TEXTUREBUFFER","TEXTURECUBE","TEXTURECUBEARRAY","THIS","TILDE","TYPEDEF","TYPE_NAME","Token","TypeName","UIMAGE1D","UIMAGE1DARRAY","UIMAGE2D","UIMAGE2DARRAY","UIMAGE2DMS","UIMAGE2DMSARRAY","UIMAGE2DRECT","UIMAGE3D","UIMAGEBUFFER","UIMAGECUBE","UIMAGECUBEARRAY","UINT","UINT_CONST","UNIFORM","UNION","UNSIGNED","USAMPLER1D","USAMPLER1DARRAY","USAMPLER2D","USAMPLER2DARRAY","USAMPLER2DMS","USAMPLER2DMSARRAY","USAMPLER2DRECT","USAMPLER3D","USAMPLERBUFFER","USAMPLERCUBE","USAMPLERCUBEARRAY","USING","USUBPASSINPUT","USUBPASSINPUTMS","UTEXTURE1D","UTEXTURE1DARRAY","UTEXTURE2D","UTEXTURE2DARRAY","UTEXTURE2DMS","UTEXTURE2DMSARRAY","UTEXTURE2DRECT","UTEXTURE3D","UTEXTUREBUFFER","UTEXTURECUBE","UTEXTURECUBEARRAY","UVEC2","UVEC3","UVEC4","VARYING","VEC2","VEC3","VEC4","VOID","VOLATILE","WHILE","WRITEONLY","WS","XOR_ASSIGN","XOR_OP","__TOKEN_TOKENS","all_tokens","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","description","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_token","gate","hash","hash","into","into","into","kinds","ne","ne","parse","parse_digits","parse_int","parse_kw","parser_token","partial_cmp","partial_cmp","partial_cmp","strip_suffix","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","variant_name","0","0","0","0","0","0","0","0","0","0","ATOM_TYPENAMEATOM_","ATOM_TYPENAMEATOM__61_74_6F_6D_69_63_5F_75_69_6E_74","ATOM_TYPENAMEATOM__62_6F_6F_6C","ATOM_TYPENAMEATOM__62_76_65_63_32","ATOM_TYPENAMEATOM__62_76_65_63_33","ATOM_TYPENAMEATOM__62_76_65_63_34","ATOM_TYPENAMEATOM__64_6D_61_74_32","ATOM_TYPENAMEATOM__64_6D_61_74_32_78_32","ATOM_TYPENAMEATOM__64_6D_61_74_32_78_33","ATOM_TYPENAMEATOM__64_6D_61_74_32_78_34","ATOM_TYPENAMEATOM__64_6D_61_74_33","ATOM_TYPENAMEATOM__64_6D_61_74_33_78_32","ATOM_TYPENAMEATOM__64_6D_61_74_33_78_33","ATOM_TYPENAMEATOM__64_6D_61_74_33_78_34","ATOM_TYPENAMEATOM__64_6D_61_74_34","ATOM_TYPENAMEATOM__64_6D_61_74_34_78_32","ATOM_TYPENAMEATOM__64_6D_61_74_34_78_33","ATOM_TYPENAMEATOM__64_6D_61_74_34_78_34","ATOM_TYPENAMEATOM__64_6F_75_62_6C_65","ATOM_TYPENAMEATOM__64_76_65_63_32","ATOM_TYPENAMEATOM__64_76_65_63_33","ATOM_TYPENAMEATOM__64_76_65_63_34","ATOM_TYPENAMEATOM__66_6C_6F_61_74","ATOM_TYPENAMEATOM__66_76_65_63_32","ATOM_TYPENAMEATOM__66_76_65_63_33","ATOM_TYPENAMEATOM__66_76_65_63_34","ATOM_TYPENAMEATOM__68_76_65_63_32","ATOM_TYPENAMEATOM__68_76_65_63_33","ATOM_TYPENAMEATOM__68_76_65_63_34","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_31_44","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_32_44","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_32_44_4D_53","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_33_44","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_43_75_62_65","ATOM_TYPENAMEATOM__69_69_6D_61_67_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__69_6D_61_67_65_31_44","ATOM_TYPENAMEATOM__69_6D_61_67_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_6D_61_67_65_32_44","ATOM_TYPENAMEATOM__69_6D_61_67_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_6D_61_67_65_32_44_4D_53","ATOM_TYPENAMEATOM__69_6D_61_67_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__69_6D_61_67_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__69_6D_61_67_65_33_44","ATOM_TYPENAMEATOM__69_6D_61_67_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__69_6D_61_67_65_43_75_62_65","ATOM_TYPENAMEATOM__69_6D_61_67_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__69_6E_74","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_31_44","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_32_44","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_32_44_4D_53","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_32_44_52_65_63_74","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_33_44","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_42_75_66_66_65_72","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_43_75_62_65","ATOM_TYPENAMEATOM__69_73_61_6D_70_6C_65_72_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__69_73_75_62_70_61_73_73_49_6E_70_75_74","ATOM_TYPENAMEATOM__69_73_75_62_70_61_73_73_49_6E_70_75_74_4D_53","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_31_44","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_32_44","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_32_44_4D_53","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_33_44","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_43_75_62_65","ATOM_TYPENAMEATOM__69_74_65_78_74_75_72_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__69_76_65_63_32","ATOM_TYPENAMEATOM__69_76_65_63_33","ATOM_TYPENAMEATOM__69_76_65_63_34","ATOM_TYPENAMEATOM__6D_61_74_32","ATOM_TYPENAMEATOM__6D_61_74_32_78_32","ATOM_TYPENAMEATOM__6D_61_74_32_78_33","ATOM_TYPENAMEATOM__6D_61_74_32_78_34","ATOM_TYPENAMEATOM__6D_61_74_33","ATOM_TYPENAMEATOM__6D_61_74_33_78_32","ATOM_TYPENAMEATOM__6D_61_74_33_78_33","ATOM_TYPENAMEATOM__6D_61_74_33_78_34","ATOM_TYPENAMEATOM__6D_61_74_34","ATOM_TYPENAMEATOM__6D_61_74_34_78_32","ATOM_TYPENAMEATOM__6D_61_74_34_78_33","ATOM_TYPENAMEATOM__6D_61_74_34_78_34","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_31_44","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_31_44_41_72_72_61_79_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_31_44_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_41_72_72_61_79_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_4D_53","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_52_65_63_74","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_52_65_63_74_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_32_44_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_33_44","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_33_44_52_65_63_74","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_42_75_66_66_65_72","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_43_75_62_65","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_43_75_62_65_41_72_72_61_79_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_43_75_62_65_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_61_6D_70_6C_65_72_53_68_61_64_6F_77","ATOM_TYPENAMEATOM__73_75_62_70_61_73_73_49_6E_70_75_74","ATOM_TYPENAMEATOM__73_75_62_70_61_73_73_49_6E_70_75_74_4D_53","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_31_44","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_32_44","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_32_44_4D_53","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_33_44","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_43_75_62_65","ATOM_TYPENAMEATOM__74_65_78_74_75_72_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_31_44","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_32_44","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_32_44_4D_53","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_33_44","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_43_75_62_65","ATOM_TYPENAMEATOM__75_69_6D_61_67_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__75_69_6E_74","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_31_44","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_32_44","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_32_44_4D_53","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_32_44_52_65_63_74","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_33_44","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_42_75_66_66_65_72","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_43_75_62_65","ATOM_TYPENAMEATOM__75_73_61_6D_70_6C_65_72_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__75_73_75_62_70_61_73_73_49_6E_70_75_74","ATOM_TYPENAMEATOM__75_73_75_62_70_61_73_73_49_6E_70_75_74_4D_53","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_31_44","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_31_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_32_44","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_32_44_41_72_72_61_79","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_32_44_4D_53","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_32_44_4D_53_41_72_72_61_79","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_32_44_52_65_63_74","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_33_44","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_42_75_66_66_65_72","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_43_75_62_65","ATOM_TYPENAMEATOM__75_74_65_78_74_75_72_65_43_75_62_65_41_72_72_61_79","ATOM_TYPENAMEATOM__75_76_65_63_32","ATOM_TYPENAMEATOM__75_76_65_63_33","ATOM_TYPENAMEATOM__75_76_65_63_34","ATOM_TYPENAMEATOM__76_65_63_32","ATOM_TYPENAMEATOM__76_65_63_33","ATOM_TYPENAMEATOM__76_65_63_34","ATOM_TYPENAMEATOM__76_6F_69_64","Ident","Type","TypeNameAtom","TypeNameAtomStaticSet","TypeNameState","WarnType","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","empty_string_index","eq","fmt","from","from","get","into","into","is_type_name","partial_cmp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","line_map","text_token","unescaped","LineMap","add_line","borrow","borrow_mut","clone","clone_into","default","fmt","from","get_line_and_col","into","map","new","resolve","to_owned","try_from","try_into","type_id","TextToken","borrow","borrow_mut","clone","clone_into","deref","deref_mut","fmt","from","into","map","new","range","raw","text","to_owned","token","transmute","try_from","try_into","type_id","0","JustUnescaped","Raw","TokenText","TokenTextRepr","UnescapeIter","Unescaped","Unescaped","backslashes","backslashes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chars","chars","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into_iter","into_unescaped","ne","ne","new","next","push_str","raw","src","to_owned","to_owned","to_owned","to_owned","to_owned_string","to_string","to_string","to_string","to_string","try_as_str","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unescaped","0","0","0"],"q":["glsl_lang_pp","","","","","","","","","","","glsl_lang_pp::exts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::exts::names","","","","","","","","","","","","","","","","","","glsl_lang_pp::last","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::last::Event","","","","","","","","","","glsl_lang_pp::last::TokenState","glsl_lang_pp::last::token","glsl_lang_pp::lexer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::lexer::glue","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::lexer::glue::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::lexer::newline","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::lexer::pre","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::lexer::pre::State","glsl_lang_pp::lexer::pre::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::parser::ExpectAny","","glsl_lang_pp::parser::ast","","","","","","","","","","","","","","","","","","glsl_lang_pp::parser::error","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::parser::error::ErrorKind","","","","","glsl_lang_pp::parser::lang","","","","","","","","","","","","","","","","","","","glsl_lang_pp::parser::syntax","","","","","","","","","","","","","","","","","glsl_lang_pp::parser::syntax_kind","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor::IncludeMode","","glsl_lang_pp::processor::definition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor::definition::Definition","","glsl_lang_pp::processor::definition::MacroCall","glsl_lang_pp::processor::eventglsl_lang_pp::processor::event::DirectiveKind","","","","","","","","","","","","","","","","glsl_lang_pp::processor::event::ErrorKind","","","","","","","","","glsl_lang_pp::processor::event::Event","","","","","","","","","glsl_lang_pp::processor::event::ProcessingErrorKind","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor::event::SendEvent","","","","","","","","","","glsl_lang_pp::processor::event::send","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor::event::send::SendEvent","","","","","","","","","","glsl_lang_pp::processor::expand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor::expand::ExpandEvent","","","","glsl_lang_pp::processor::expand::ExpandState","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor::expand::HandleNodeResult","","","","glsl_lang_pp::processor::expand::LocationString","","glsl_lang_pp::processor::expand::if_stack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor::expand::if_stack::IfState","","glsl_lang_pp::processor::expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor::expr::EvalResult","","glsl_lang_pp::processor::fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor::fs::PathOrSource","","","glsl_lang_pp::processor::nodesglsl_lang_pp::processor::nodes::DefineError","glsl_lang_pp::processor::nodes::DefineKind","","glsl_lang_pp::processor::nodes::ElifError","glsl_lang_pp::processor::nodes::ExtensionError","","","glsl_lang_pp::processor::nodes::ExtensionName","glsl_lang_pp::processor::nodes::IfError","glsl_lang_pp::processor::nodes::IfEvalError","","","glsl_lang_pp::processor::nodes::IncludeError","","","glsl_lang_pp::processor::nodes::LineError","","","","glsl_lang_pp::processor::nodes::ParsedLine","","","","","glsl_lang_pp::processor::nodes::ParsedPragma","","","","glsl_lang_pp::processor::nodes::PragmaError","glsl_lang_pp::processor::nodes::VersionError","","","","glsl_lang_pp::processor::str","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::processor::str::ProcessStrError","glsl_lang_pp::types","","","","glsl_lang_pp::types::keywords","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::types::path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::types::tokenglsl_lang_pp::types::token::Token","","","","","","","","glsl_lang_pp::types::token::TypeName","","glsl_lang_pp::types::type_namesglsl_lang_pp::types::type_names::TypeNameState","glsl_lang_pp::util","","","glsl_lang_pp::util::line_map","","","","","","","","","","","","","","","","","","glsl_lang_pp::util::text_token","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::util::unescaped","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_pp::util::unescaped::TokenTextRepr","",""],"d":["","","","","Last preprocessing stage definitions","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","+=","&amp;","&amp;=","&amp;&amp;","","","\\\\\","!","|","^",":",",","Comment (single-line or multi-line)","","–","defined preprocessor keyword","Digit sequence","/=","=","==","Invalid token","=","","Identifier or keyword","++","&lt;","{","[","&lt;&lt;=","&lt;&lt;","&lt;=","Line continuation (required for tracking exact offsets)","(","Final stage lexer.","%=","*=","Newline","!=","|=","||","%",".","","","?","“string”","","}","]","=","",")",";","/","-=","~","","","Whitespace","^=","^^","Unglued token buffer. Since we’re pasting at most 3 …","Last stage lexer declaration","","First stage lexer declaration","Second stage lexer declaration","Final stage lexer.","","","","Unglued token buffer. Since we’re pasting at most 3 …","","","","Returns the argument unchanged.","Get a reference to the input slice","","Calls <code>U::from(self)</code>.","","Consume this lexer and return the line map","Get a reference to the line map","","","","","","Notify the lexer we are parsing an #include directive, and …","","","","","","+=","&amp;","&amp;=","&amp;&amp;","","","\\\\\","!","|","^",":",",","Comment (single-line or multi-line)","","–","defined preprocessor keyword","Digit sequence","/=","=","==","Invalid token","=","","Identifier or keyword","++","&lt;","{","[","&lt;&lt;=","&lt;&lt;","&lt;=","Line continuation (required for tracking exact offsets)","(","%=","*=","Newline","!=","|=","||","%",".","","","?","“string”","","}","]","=","",")",";","/","-=","~","","Whitespace","^=","^^","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Basic lexer to split input lines according to the GLSL spec","First stage token with location","Type of token for line splitting","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Insite an angle string","Line continuation character seen","Building a digit sequence","Building an identifier","Initial state of the preprocessor","Multi-line comment","Multi-line comment, saw a *","A lexer for early lexical analysis stages.","Inside a quote string","Single-line comment","Possibly a start of comment","","","Any kind of horizontal whitespace","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","&amp;","","","\\\\\","!","|","^",":",",","Comment (single-line or multi-line)","","defined preprocessor keyword","Digit sequence","=","Invalid token","","Identifier or keyword","&lt;","{","[","Line continuation (required for tracking exact offsets)","(","Newline","%",".","","?","“string”","","}","]",")",";","/","~","","Whitespace","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Parse a control line","","","","","","","","","","","","+=","&amp;","&amp;=","&amp;&amp;","","","\\\\\","!","|","^",":",",","Comment (single-line or multi-line)","","–","defined preprocessor keyword","Digit sequence","/=","=","==","Invalid token","=","","Identifier or keyword","++","&lt;","{","[","&lt;&lt;=","&lt;&lt;","&lt;=","(","%=","*=","Newline","!=","|=","||","%",".","","Concatenation expression","","#define","","","","#elif","#else","","#endif","#error","#error body","#extension","","#if","#ifdef","#ifndef","","#include","#include path","#line","#line body","#pragma","#pragma body","#undef","#version","","","?","“string”","","}","]","=","","AST root",")",";","/","-=","","~","Whitespace","^=","^^","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","GL_ARB_shading_language_include runtime includes","GL_GOOGLE_include_directive compile-time includes","Operating mode for #include directives","No #include directives are allowed","Current state of the preprocessor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current #if group of this level is included","","","","","","","No #if group of this level was included","One past #if group of this level was included, but not the …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Preprocessor based on a filesystem","","","","","","","","","","","","","","","","Mapping from #include/input paths to canonical paths","","","","","","","","","","","","","","Cache of parsed files (preprocessor token sequences)","","","Mapping from canonical paths to FileIds","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Filesystem abstraction","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Parse a given source block as if it belonged in a specific …","","","","","","","","","","","","","","List of include paths in resolution order","","","","","","","","","","","","","","","","","","","","","","","All extensions","","","","A preprocessor definition","","","","","","","","","","","","","","","","","","","","","","","","Extension behavior","","Extension name","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specific extensioneturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Type of this definition","","","","","Name of this definition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","true if this definition can’t be #undef-inedeturns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","“active”","+=","&amp;","&amp;=","&amp;&amp;","“asm”","","“atomic_uint”","“attribute”","!","|","“bool”","Bool constant","“break”","“buffer”","“bvec2”","“bvec3”","“bvec4”","^","“case”","“cast”","“centroid”","“class”","“coherent”",":",",","Comment (single-line or multi-line)","“common”","“const”","“continue”","","–","“default”","“discard”","/=","“dmat2”","“dmat2x2”","“dmat2x3”","“dmat2x4”","“dmat3”","“dmat3x2”","“dmat3x3”","“dmat3x4”","“dmat4”","“dmat4x2”","“dmat4x3”","“dmat4x4”","“do”","“double”","Double constant","“dvec2”","“dvec3”","“dvec4”","“else”","“enum”","=","==","Marker for invalid tokens","“extern”","“external”","","“filter”","“fixed”","“flat”","“float”","Float constant","“for”","=","“goto”","“half”","","“highp”","Identifier","“if”","“iimage1D”","“iimage1DArray”","“iimage2D”","“iimage2DArray”","“iimage2DMS”","“iimage2DMSArray”","“iimage2DRect”","“iimage3D”","“iimageBuffer”","“iimageCube”","“iimageCubeArray”","“image1D”","“image1DArray”","“image2D”","“image2DArray”","“image2DMS”","“image2DMSArray”","“image2DRect”","“image3D”","“imageBuffer”","“imageCube”","“imageCubeArray”","“in”","++","“inline”","“inout”","“input”","“int”","“interface”","Int constant","“invariant”","“isampler1D”","“isampler1DArray”","“isampler2D”","“isampler2DArray”","“isampler2DMS”","“isampler2DMSArray”","“isampler2DRect”","“isampler3D”","“isamplerBuffer”","“isamplerCube”","“isamplerCubeArray”","“isubpassInput”","“isubpassInputMS”","“itexture1D”","“itexture1DArray”","“itexture2D”","“itexture2DArray”","“itexture2DMS”","“itexture2DMSArray”","“itexture2DRect”","“itexture3D”","“itextureBuffer”","“itextureCube”","“itextureCubeArray”","“ivec2”","“ivec3”","“ivec4”","","","","","","&lt;","“layout”","{","[","&lt;&lt;=","&lt;&lt;","&lt;=","“long”","“lowp”","(","“mat2”","“mat2x2”","“mat2x3”","“mat2x4”","“mat3”","“mat3x2”","“mat3x3”","“mat3x4”","“mat4”","“mat4x2”","“mat4x3”","“mat4x4”","“mediump”","%=","*=","“namespace”","!=","“noinline”","“noperspective”","|=","||","Generic type name","“out”","“output”","“partition”","“patch”","%",".","","“precise”","“precision”","“public”","?","","}","]","“readonly”","Reserved for future use","“resource”","“restrict”","“return”","=","",")","“sample”","“sampler”","“sampler1D”","“sampler1DArray”","“sampler1DArrayShadow”","“sampler1DShadow”","“sampler2D”","“sampler2DArray”","“sampler2DArrayShadow”","“sampler2DMS”","“sampler2DMSArray”","“sampler2DRect”","“sampler2DRectShadow”","“sampler2DShadow”","“sampler3D”","“samplerBuffer”","“samplerCube”","“samplerCubeArray”","“samplerCubeArrayShadow”","“samplerCubeShadow”","“samplerShadow”",";","“shared”","“short”","“sizeof”","/","“smooth”","“static”","“struct”","“subpassInput”","“subpassInputMS”","“subroutine”","-=","“superp”","“switch”","“template”","“texture1D”","“texture1DArray”","“texture2D”","“texture2DArray”","“texture2DMS”","“texture2DMSArray”","“texture2DRect”","“texture3D”","“textureBuffer”","“textureCube”","“textureCubeArray”","“this”","~","“typedef”","Type name","","","“uimage1D”","“uimage1DArray”","“uimage2D”","“uimage2DArray”","“uimage2DMS”","“uimage2DMSArray”","“uimage2DRect”","“uimage3D”","“uimageBuffer”","“uimageCube”","“uimageCubeArray”","“uint”","Unsigned int constant","“uniform”","“union”","“unsigned”","“usampler1D”","“usampler1DArray”","“usampler2D”","“usampler2DArray”","“usampler2DMS”","“usampler2DMSArray”","“usampler2DRect”","“usampler3D”","“usamplerBuffer”","“usamplerCube”","“usamplerCubeArray”","“using”","“usubpassInput”","“usubpassInputMS”","“utexture1D”","“utexture1DArray”","“utexture2D”","“utexture2DArray”","“utexture2DMS”","“utexture2DMSArray”","“utexture2DRect”","“utexture3D”","“utextureBuffer”","“utextureCube”","“utextureCubeArray”","“uvec2”","“uvec3”","“uvec4”","“varying”","“vec2”","“vec3”","“vec4”","“void”","“volatile”","“while”","“writeonly”","Whitespaace","^=","^^","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Add a new line boundary","","","","","","","Returns the argument unchanged.","Split an offset into line and column information","Calls <code>U::from(self)</code>.","","Construct a new, empty LineMap","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,4,2,3,5,4,2,3,4,2,3,4,5,4,2,3,4,5,4,2,3,5,5,0,5,4,5,4,2,3,5,4,2,3,5,4,2,3,5,5,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,7,8,8,8,0,0,7,0,8,0,0,0,7,7,9,8,9,10,11,8,7,10,11,8,7,7,7,10,8,7,10,8,7,10,11,8,7,10,11,10,11,8,7,11,10,12,11,8,7,10,11,7,11,11,10,11,10,11,10,10,7,0,10,11,10,11,8,7,10,11,8,7,10,11,8,7,10,11,7,13,14,15,13,15,14,13,16,16,16,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,18,18,18,19,0,19,0,0,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,19,19,19,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,20,20,20,0,0,0,20,20,20,21,20,21,21,20,21,20,21,21,21,20,20,21,20,21,20,21,21,21,21,21,21,21,20,21,20,21,20,21,20,21,22,22,22,22,22,22,22,0,22,22,22,0,0,22,22,23,22,23,22,23,22,23,22,22,23,22,23,22,23,23,23,22,23,23,23,23,22,23,23,23,23,23,23,23,23,23,23,22,23,0,22,23,22,23,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,0,26,0,0,0,0,0,26,0,27,28,26,27,28,26,28,28,28,28,26,26,28,0,28,28,28,28,26,27,28,26,28,27,28,26,0,27,28,27,28,27,28,28,28,28,28,28,28,27,28,28,28,0,0,28,26,28,27,28,26,27,28,26,27,28,26,29,30,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,34,35,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,0,39,0,0,40,39,40,41,39,40,41,40,39,40,41,39,40,41,41,41,41,41,40,40,39,40,41,0,40,41,40,41,39,40,41,41,0,0,0,40,41,41,41,39,40,39,40,40,41,0,40,40,39,40,41,39,40,41,0,41,41,0,39,40,41,39,40,41,39,40,41,39,40,41,40,39,42,43,0,44,45,44,0,0,45,44,44,44,46,45,44,46,45,44,44,44,44,46,44,44,44,46,45,44,46,45,44,44,44,44,46,46,44,46,44,46,44,44,44,46,44,44,46,46,44,46,0,46,45,44,46,45,44,46,45,44,47,47,48,49,50,51,52,49,49,49,49,49,49,49,49,49,49,0,49,49,49,49,50,50,50,50,51,52,0,51,50,52,49,0,0,0,50,49,49,49,50,50,50,50,49,49,50,49,50,49,0,53,50,53,0,0,49,0,0,51,52,0,50,49,53,49,50,53,52,49,53,50,54,55,52,49,53,50,54,55,52,49,53,50,54,55,49,53,50,54,55,52,52,52,52,49,53,50,54,55,52,52,55,55,49,49,53,53,50,54,55,55,52,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,53,53,53,53,53,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,54,54,54,55,52,52,52,52,52,52,54,49,53,50,54,55,52,55,52,52,56,54,54,55,54,55,52,49,53,50,54,55,52,54,54,55,57,57,0,55,54,56,54,54,54,56,54,54,55,49,53,50,54,55,49,53,55,52,49,53,50,54,55,52,49,53,50,54,55,52,49,53,50,54,55,52,53,53,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,76,76,77,76,77,78,79,80,78,80,81,79,78,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,96,97,98,99,96,97,100,99,101,102,103,104,105,103,104,106,105,105,103,106,51,51,51,0,0,51,57,51,57,51,57,51,57,51,57,51,57,51,57,57,51,51,57,51,57,51,57,57,57,57,51,57,51,57,51,57,51,103,104,105,103,104,106,105,105,103,106,107,108,108,109,107,108,109,0,0,0,0,107,0,107,107,0,110,107,107,110,111,111,112,107,108,110,109,111,112,107,108,110,109,110,110,111,111,111,110,110,110,111,112,107,108,108,110,109,109,109,112,112,112,0,112,111,112,107,108,110,109,112,110,111,111,111,111,112,112,110,111,112,112,111,111,111,112,112,112,111,110,110,111,112,107,108,110,109,111,112,107,108,110,109,111,112,107,108,110,109,113,114,115,114,116,116,117,118,119,120,121,117,118,119,120,121,120,121,117,118,119,120,121,118,119,118,122,123,123,123,124,125,126,127,127,127,0,0,0,126,126,126,128,126,128,126,127,128,126,127,126,126,126,126,126,127,127,128,126,127,128,128,126,127,126,128,128,128,128,128,128,126,127,128,126,127,128,126,127,128,126,127,126,129,130,131,0,0,131,132,132,132,132,131,132,131,132,132,131,132,131,131,132,132,132,131,132,131,132,132,131,132,132,132,132,131,132,132,132,132,132,132,132,132,132,132,132,131,132,131,132,131,132,131,132,132,133,134,135,0,0,0,136,0,0,136,0,0,136,137,138,139,137,136,140,138,139,137,136,140,140,135,139,139,136,139,136,136,139,140,136,135,139,137,140,137,137,140,139,137,136,140,138,139,137,136,136,136,140,140,140,136,138,139,137,136,140,138,137,138,138,136,140,140,138,140,140,136,137,138,137,135,139,138,140,140,140,138,138,140,140,140,139,136,138,138,139,137,136,140,138,139,137,136,140,138,139,137,136,140,141,142,141,143,144,144,145,0,0,0,0,0,0,0,0,146,0,0,0,0,0,146,0,0,0,0,144,147,148,149,0,0,0,0,150,151,152,153,0,0,0,0,0,0,0,0,154,0,155,152,155,151,151,150,147,147,0,156,156,156,0,152,151,150,157,158,151,148,149,154,152,155,155,159,151,157,150,147,144,153,145,0,0,0,0,147,146,143,145,0,145,147,0,0,0,0,146,160,160,161,162,160,163,164,165,166,167,168,169,147,144,146,143,161,155,162,160,153,170,157,171,159,172,173,174,158,175,150,163,156,151,152,148,164,165,149,176,177,178,179,180,145,154,166,167,168,169,147,144,146,143,161,155,162,160,153,170,157,171,159,172,173,174,158,175,150,163,156,151,152,148,164,165,149,176,177,178,179,180,145,154,166,167,168,169,147,144,146,143,161,155,162,160,153,170,157,171,159,172,173,174,158,175,150,163,156,151,152,148,164,165,149,176,177,178,179,180,145,154,166,167,168,169,147,144,146,143,161,155,162,160,153,170,157,171,159,172,173,174,158,175,150,163,156,151,152,148,164,165,149,176,177,178,179,180,145,154,169,166,161,161,167,168,169,147,144,146,143,143,161,155,162,160,153,170,157,171,159,172,173,174,158,175,150,163,156,151,152,148,164,165,149,176,177,178,179,180,145,154,164,165,0,0,166,166,175,163,164,165,166,167,168,169,147,147,144,146,143,143,161,155,155,162,160,153,170,157,157,171,159,159,172,173,174,158,158,175,150,150,163,156,151,151,152,152,148,148,164,165,149,149,176,177,177,178,179,179,180,145,154,154,166,167,168,169,147,147,144,146,143,143,143,161,155,162,160,153,170,157,171,159,172,173,174,158,175,150,163,156,151,152,148,148,164,165,149,149,176,177,178,179,180,145,154,144,146,162,170,171,172,173,166,166,167,168,169,147,144,146,143,161,155,162,160,153,170,157,171,159,172,173,174,158,175,150,163,156,151,152,148,164,165,149,176,177,178,179,180,145,154,166,181,146,170,170,156,174,170,161,170,169,147,143,161,155,162,160,153,170,157,171,172,173,174,175,150,163,156,151,152,148,164,165,149,180,145,154,166,143,162,160,166,166,169,170,162,163,180,169,175,175,169,170,170,180,180,161,147,148,149,166,167,168,169,147,144,146,143,161,155,162,160,153,170,157,171,159,172,173,174,158,175,150,163,156,151,152,148,164,165,149,176,177,178,179,180,145,154,147,143,155,157,159,158,150,151,152,148,149,177,179,154,162,160,166,166,167,168,169,169,147,144,146,143,161,161,155,162,160,153,170,170,157,171,171,159,172,172,173,173,174,174,158,175,175,150,163,163,156,151,152,148,164,164,165,165,149,176,176,177,178,178,179,180,180,145,154,166,167,168,169,147,144,146,143,161,155,162,160,153,170,157,171,159,172,173,174,158,175,150,163,156,151,152,148,164,165,149,176,177,178,179,180,145,154,166,167,168,169,147,144,146,143,161,155,162,160,153,170,157,171,159,172,173,174,158,175,150,163,156,151,152,148,164,165,149,176,177,178,179,180,145,154,180,180,161,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,202,203,204,205,206,207,208,209,210,211,212,0,213,0,214,213,214,213,213,214,213,213,214,213,214,214,213,214,214,214,213,214,0,0,213,214,214,213,214,213,214,213,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,216,216,216,216,216,216,216,216,216,216,216,217,0,0,217,218,217,218,217,218,217,218,217,218,217,218,218,217,218,217,218,217,218,218,218,217,218,218,217,218,217,218,218,217,219,219,219,219,219,219,219,220,219,219,219,220,219,219,219,220,220,220,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,220,220,220,220,219,220,219,220,220,220,219,219,219,219,219,219,219,0,219,219,219,220,219,219,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,219,219,219,219,219,220,219,219,219,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,221,221,221,221,221,219,219,219,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,220,220,220,220,219,219,219,219,219,219,219,219,219,220,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,220,219,219,219,219,219,219,219,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,219,219,219,219,219,219,219,219,220,220,219,219,219,219,219,220,220,220,220,220,220,220,220,220,220,220,219,219,219,219,0,0,220,220,220,220,220,220,220,220,220,220,220,220,219,219,219,219,220,220,220,220,220,220,220,220,220,220,220,219,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,219,220,220,220,220,219,219,219,219,219,219,0,219,220,219,221,220,219,221,220,219,221,220,219,221,220,221,219,220,219,221,220,220,219,219,221,221,220,219,221,219,220,220,221,220,219,221,219,220,219,220,219,219,219,219,220,219,221,219,220,219,221,220,219,221,220,219,221,220,219,221,220,219,221,219,222,223,224,225,226,227,228,229,230,231,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,232,0,0,0,232,233,232,233,232,232,232,233,233,233,232,233,232,233,233,232,232,233,232,233,232,233,232,233,232,234,0,0,0,0,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,0,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,237,238,238,0,0,0,0,238,239,240,240,239,237,238,240,239,237,238,239,240,239,237,238,239,237,238,239,237,238,239,239,237,237,238,240,239,239,237,238,240,239,237,238,240,237,237,238,239,240,237,237,239,239,237,237,238,237,239,239,237,237,237,240,239,237,238,240,239,237,238,240,239,237,238,237,241,242,243],"f":[null,null,[[],["syntaxnode",3,[["preprocessorlang",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0]],["registry",3]],[[["",0]],["registry",3]],null,[[]],[[]],[[]],[[]],[[["",0],["extnameatom",6]],["option",4,[["extensionspec",3]]]],[[]],[[]],[[]],[[]],[[["",0]],["extnameatom",6]],null,null,[[["extnameatom",6],["vec",3,[["typenameatom",6]]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["extnameatomstaticset",3]],["ordering",4]],[[],["u32",0]],[[["",0],["extnameatomstaticset",3]],["bool",0]],[[]],[[],["phfstrset",3]],[[]],[[["",0],["extnameatomstaticset",3]],["option",4,[["ordering",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",0]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4,[["token",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tokenstate",4]],[[["",0],["",0]]],null,[[["",0],["event",4]],["bool",0]],[[["",0],["tokenstate",4]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["extension",3]],["bool",0]],null,[[]],[[]],[[]],[[]],[[]],[[["",0],["typenameatom",6]],["typenamestate",4]],[[["",0]],["expandlocation",3]],[[["",0]],["expandlocation",3]],[[["",0],["event",4]],["bool",0]],[[["",0],["tokenstate",4]],["bool",0]],[[["registry",3],["u16",0],["bool",0]]],[[["u16",0],["bool",0],["registry",3]]],[[["option",4,[["typenamestate",4]]],["bool",0]]],[[["",0]],["option",4]],null,[[["",0],["typenameatom",6]],["bool",0]],[[["",0],["typenameatom",6]],["bool",0]],null,[[["",0],["fileid",3]],["option",4,[["path",3]]]],[[["",0],["extensionspec",3],["extensionbehavior",4]]],null,[[["",0]]],null,[[["",0],["expandlocation",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[],["bool",0]],null,null,null,null,null,null,null,null,null,null,null,[[["u16",0],["bool",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["lexer",3]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]],["str",0]],null,[[]],[[]],[[],["linemap",3]],[[["",0]],["linemap",3]],[[["",0],["texttoken",3,[["token",4]]]],["option",4,[["texttoken",6]]]],[[["",0],["texttoken",3,[["token",4]]]],["option",4,[["texttoken",6]]]],[[["str",0]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["texttoken",3,[["token",4]]]]]],[[["",0],["bool",0]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["token",4]],[[["",0],["",0]]],[[["",0],["token",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["pretoken",4]]],[[]],[[["",0]],["bool",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["newlinetokenkind",4]],[[["",0]],["newlinesplitter",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["usize",0]],["textrange",3]],null,[[["",0],["newlinetokenkind",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["linemap",3]],[[["",0]],["linemap",3]],null,[[["str",0]]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["state",4]],[[["",0]],["prelexer",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[["",0],["state",4]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["str",0]],null,[[]],[[]],[[]],[[],["linemap",3]],[[["",0]],["linemap",3]],[[["",0],["state",4]],["bool",0]],[[["str",0]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["texttoken",3,[["newlinetokenkind",4]]]]]],[[["",0]],["option",4]],null,null,[[["",0],["bool",0]]],null,null,null,[[["",0]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["token",4]],[[["",0],["",0]]],[[["",0],["token",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["str",0]]],[[]],[[["",0]],["bool",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],null,[[["",0]]],[[["",0]],["checkpoint",3]],[[["",0]],["expectany",4]],[[["",0],["",0]]],[[["",0]]],null,null,[[["",0]],["expectany",4]],[[["",0],["token",4]],["expectany",4]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,[[["str",0]]],[[["str",0]]],[[],["ast",3]],[[],["ast",3]],[[],["option",4,[["syntaxnode",3,[["preprocessorlang",3]]]]]],[[],["option",4,[["syntaxnode",3,[["preprocessorlang",3]]]]]],[[["",0]],["option",4,[["texttoken",6]]]],null,[[["",0],["errorkind",4],["textrange",3]]],[[["",0],["texttoken",6]],["str",0]],[[["",0]]],[[["",0]]],null,null,[[["",0],["syntaxkind",4]]],[[["",0],["checkpoint",3],["syntaxkind",4]]],null,null,[[["",0],["texttoken",6]],["unescaped",3]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["ast",3]],[[["",0],["",0]]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]],["greennode",3]],null,[[]],[[]],null,[[["greennode",3],["vec",3,[["located",3,[["errorkind",4]]]]],["linemap",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["errorkind",4]],[[["",0],["",0]]],[[["",0],["errorkind",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["errorkind",4]],["bool",0]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["preprocessorlang",3]],[[["",0],["",0]]],[[["",0],["preprocessorlang",3]],["ordering",4]],[[],["preprocessorlang",3]],[[["",0],["preprocessorlang",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]]],[[]],[[["syntaxkind",3]]],[[],["syntaxkind",3]],[[["",0],["preprocessorlang",3]],["option",4,[["ordering",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3],["checkpoint",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],[[["parserrun",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["syntaxkind",4]],[[["",0],["",0]]],[[["",0],["syntaxkind",4]],["ordering",4]],[[["",0],["syntaxkind",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["token",4]]],[[["",0],["",0]]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["syntaxkind",4]],["option",4,[["ordering",4]]]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0],["extensionname",4],["extensionbehavior",4]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["processorstatebuilder",3]],[[["",0]],["includemode",4]],[[["",0]],["processorstate",3]],[[["",0]],["processorstatebuilder",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["bool",0]]],null,[[["bool",0]]],null,[[["",0]],["bool",0]],null,[[]],[[]],[[]],null,[[["",0],["define",3],["fileid",3]],["bool",0]],[[]],null,null,[[["",0],["includemode",4]],["bool",0]],[[["",0],["processorstate",3]],["bool",0]],[[["bool",0]]],null,null,null,null,[[["",0],["extension",3]]],[[]],null,[[],["processorstate",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["processorstatebuilder",3]]],[[]],null,[[["",0],["str",0]],["option",4,[["definition",4]]]],null,[[]],[[]],[[]],[[["",0],["includemode",4]],["bool",0]],[[["",0],["processorstate",3]],["bool",0]],[[["registry",3]]],null,[[["registry",3]],["processorstatebuilder",3]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[],["bool",0]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["usize",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["definition",4]],[[["",0],["",0]]],[[["fileid",3],["syntaxnode",3,[["preprocessorlang",3]]],["option",4,[["hashmap",3]]],["nodespan",3]]],null,[[["",0],["definition",4]],["bool",0]],[[["",0]],["fileid",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["str",0]],[[["",0],["definition",4]],["bool",0]],[[["",0]],["bool",0]],[[["definition",4],["expandlocation",3],["option",4,[["nodespan",3]]]],["result",4,[["option",4],["processingerror",6]]]],[[["definition",4],["syntaxtoken",3,[["preprocessorlang",3]]],["expandlocation",3]],["result",4,[["option",4],["processingerror",6]]]],[[["",0]],["bool",0]],null,[[["nodespan",3],["expandlocation",3]],["vec",3,[["event",4]]]],[[["processorstate",3],["expandlocation",3]],["vec",3,[["event",4]]]],[[["fileid",3],["definefunction",3],["nodespan",3],["expandlocation",3]],["vec",3,[["event",4]]]],[[["fileid",3],["defineobject",3],["nodespan",3],["expandlocation",3]],["vec",3,[["event",4]]]],[[["",0],["nodespan",3],["expandlocation",3]],["vec",3,[["event",4]]]],[[["processorstate",3],["expandlocation",3],["hashset",3]],["vec",3,[["event",4]]]],[[["",0],["nodespan",3],["processorstate",3],["expandlocation",3]],["vec",3,[["event",4]]]],[[["str",0],["syntaxkind",4],["nodespan",3]]],[[["processorstate",3],["vec",3],["expandlocation",3]],["vec",3,[["event",4]]]],[[["processorstate",3],["vec",3],["expandlocation",3],["hashset",3],["option",4,[["nodespan",3]]]],["vec",3,[["event",4]]]],[[["",0]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["option",4,[["outputtoken",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["processingerrorkind",4]],[[["",0]],["errorkind",4]],[[["",0]],["directivekind",4]],[[["",0]],["outputtoken",3]],[[["",0]],["eventdirective",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["directive",3,[["into",8,[["directivekind",4]]]]],["bool",0]]],[[["expandlocation",3],["bool",0]]],[[["directive",3,[["into",8,[["directivekind",4]]]]],["bool",0],["expandlocation",3]]],[[["fileid",3]]],[[["",0],["processingerrorkind",4]],["bool",0]],[[["",0],["errorkind",4]],["bool",0]],[[["",0],["directivekind",4]],["bool",0]],[[["",0],["outputtoken",3]],["bool",0]],[[["",0],["eventdirective",3]],["bool",0]],[[["",0],["event",4]],["bool",0]],[[["into",8,[["errorkind",4]]],["expandlocation",3],["bool",0]]],[[["",0]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["iferror",4]],["processingerrorkind",4]],[[["option",4,[["smolstr",3]]]],["processingerrorkind",4]],[[]],[[["parsedpath",3]],["processingerrorkind",4]],[[["eliferror",4]],["processingerrorkind",4]],[[["ifdeferror",4]],["processingerrorkind",4]],[[],["processingerrorkind",4]],[[["string",3]],["processingerrorkind",4]],[[["includeerror",4]],["processingerrorkind",4]],[[["lineerror",4]],["processingerrorkind",4]],[[["pragmaerror",4]],["processingerrorkind",4]],[[["errorerror",4]],["processingerrorkind",4]],[[],["processingerrorkind",4]],[[["iferror",4]]],[[["endiferror",4]],["processingerrorkind",4]],[[["extensionerror",4]],["processingerrorkind",4]],[[["versionerror",4]],["processingerrorkind",4]],[[],["processingerrorkind",4]],[[["elseerror",4]],["processingerrorkind",4]],[[["defineerror",4]],["processingerrorkind",4]],[[["smolstr",3]],["processingerrorkind",4]],[[]],[[],["errorkind",4]],[[],["errorkind",4]],[[["processingerrorkind",4]],["errorkind",4]],[[["errorkind",4]],["errorkind",4]],[[["line",3]],["directivekind",4]],[[["error",3]],["directivekind",4]],[[["extension",3]],["directivekind",4]],[[["version",3]],["directivekind",4]],[[["ifndef",3]],["directivekind",4]],[[["else",3]],["directivekind",4]],[[["undef",3]],["directivekind",4]],[[["include",3]],["directivekind",4]],[[["endif",3]],["directivekind",4]],[[["elif",3]],["directivekind",4]],[[["empty",3]],["directivekind",4]],[[["ifdef",3]],["directivekind",4]],[[["define",3]],["directivekind",4]],[[["if",3]],["directivekind",4]],[[]],[[["pragma",3]],["directivekind",4]],[[["invalid",3]],["directivekind",4]],[[]],[[]],[[]],[[]],[[],["event",4]],[[["outputtoken",3]]],[[]],[[],["event",4]],[[],["event",4]],[[],["event",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["error",6]]]],[[],["option",4,[["outputtoken",3]]]],[[["",0]],["bool",0]],[[["",0]],["syntaxkind",4]],[[["",0]],["syntaxkind",4]],[[["",0]],["syntaxkind",4]],[[["",0]],["directivekind",4]],null,null,[[["located",3,[["into",8,[["errorkind",4]]]]],["bool",0]]],[[["",0],["processingerrorkind",4]],["bool",0]],[[["",0],["errorkind",4]],["bool",0]],[[["",0],["directivekind",4]],["bool",0]],[[["",0],["outputtoken",3]],["bool",0]],[[["",0],["eventdirective",3]],["bool",0]],[[["",0],["event",4]],["bool",0]],[[["syntaxkind",4],["tokentext",3],["nodespan",3]]],[[["nodespan",3]]],null,null,null,null,null,null,[[["",0]],["tokentext",3]],[[["",0]],["str",0]],[[["",0]],["tokentext",3]],null,[[["",0]],["nodespan",3]],[[["",0]],["nodespan",3]],[[["",0]],["nodespan",3]],[[["",0]],["nodespan",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["tokenlike",8],["bool",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["extensionname",4],["nodespan",3],["expandlocation",3]]],[[["extnameatom",6],["option",4,[["typenameatom",6]]],["nodespan",3],["expandlocation",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["sendnode",3]],[[["",0]],["sendevent",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["sendnode",3]],["bool",0]],[[["",0],["sendevent",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["syntaxnode",3]]],[[]],[[]],[[["event",4]]],[[]],[[]],[[["",0],["sendnode",3]],["bool",0]],[[["",0],["sendevent",4]],["bool",0]],null,null,[[["",0]],["string",3]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["textsize",3],["parsedline",4]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["locationstring",4]],[[["",0],["",0]]],[[["",0]],["fileid",3]],[[["",0]],["fileid",3]],null,[[["",0],["locationstring",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["event",4]]],[[]],[[],["handlenoderesult",4]],[[["event",4]],["handlenoderesult",4]],[[]],[[["",0],["processorstate",3],["syntaxnode",3,[["preprocessorlang",3]]]],["handlenoderesult",4]],[[["",0],["processorstate",3],["syntaxelementchildren",3,[["preprocessorlang",3]]],["vec",3,[["located",3,[["errorkind",4]]]]],["nodeortoken",4,[["syntaxnode",3,[["preprocessorlang",3]]],["syntaxtoken",3,[["preprocessorlang",3]]]]]],["option",4,[["event",4]]]],[[["",0],["processorstate",3],["syntaxtoken",3,[["preprocessorlang",3]]],["syntaxelementchildren",3,[["preprocessorlang",3]]],["vec",3,[["located",3,[["errorkind",4]]]]]],["option",4,[["event",4]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],null,[[["",0]],["option",4]],null,[[["",0],["u32",0]],["u32",0]],[[["",0]],["expandlocation",3]],null,[[["",0],["locationstring",4]],["bool",0]],[[["fileid",3]]],[[["processorstate",3]]],[[["",0]],["option",4]],[[["",0],["textsize",3]]],[[["",0],["textsize",3]]],[[["",0],["textsize",3]]],[[["",0],["processorstate",3]]],[[["",0]],["option",4,[["processorstate",3]]]],null,[[["",0]],["locationstring",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["ifstate",4]],[[["",0],["",0]]],[[]],[[["",0]],["bool",0]],[[["",0],["ifstate",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[]],[[]],[[]],[[["",0],["ifstate",4]],["bool",0]],[[]],[[["",0],["bool",0]],["result",4,[["iferror",4]]]],[[["",0]],["result",4,[["iferror",4]]]],[[["",0]],["result",4,[["iferror",4]]]],[[["",0],["bool",0]]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["bool",0]]],null,null,null,null,null,null,[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["option",4,[["result",4,[["i32",0]]]]],["option",4,[["result",4,[["i32",0]]]]]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["outputtoken",3]]]],[[["",0]],["exprevaluator",3]],[[["",0]],["evalresult",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["evalresult",4]],["bool",0]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[]],[[]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0],["evalresult",4]],["bool",0]],[[["processorstate",3]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["evalresult",4]]]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0]],["option",4,[["outputtoken",3]]]],[[["",0]],["option",4,[["syntaxkind",4]]]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],[[["",0]],["option",4,[["result",4,[["i32",0]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["option",4,[["pathbuf",3]]]],[[["",0]],["ast",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0],["path",3]],["result",4,[["pathbuf",3]]]],[[["",0],["path",3]],["result",4,[["pathbuf",3]]]],[[["",0]],["std",3]],[[["",0]],["pathorsource",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["pathorsource",4]],["ordering",4]],[[],["std",3]],[[]],[[["",0],["pathorsource",4]],["bool",0]],[[["",0],["path",3]],["bool",0]],[[["",0],["path",3]],["bool",0]],[[["processorstate",3]],["expandone",3]],null,[[["",0]],["fileid",3]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["pathorsource",4]],[[["pathbuf",3]],["pathorsource",4]],[[]],null,[[["",0],["fileid",3]],["option",4]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["processorstate",3]]]],[[["",0]],["expandlocation",3]],[[["",0],["pathorsource",4]],["bool",0]],[[]],[[]],[[["",0]],["option",4]],[[["",0],["path",3]],["result",4,[["parsedfile",3]]]],[[["",0],["str",0],["path",3]],["parsedfile",3]],[[["",0],["pathorsource",4]],["option",4,[["ordering",4]]]],[[["processorstate",3]],["expandstack",3]],null,null,[[["",0],["path",3]],["result",4,[["cow",4,[["str",0]]]]]],[[["",0],["path",3]],["result",4,[["cow",4,[["str",0]]]]]],[[["",0],["fileid",3]],["option",4,[["path",3]]]],[[["",0],["fileid",3]],["option",4,[["path",3]]]],[[["",0],["fileid",3],["parsedpath",3]],["option",4,[["pathbuf",3]]]],[[["",0],["parsedpath",3]],["option",4,[["pathbuf",3]]]],null,null,[[["",0]],["vec",3]],null,[[["",0]],["vec",3]],[[["",0]]],[[["",0]]],[[["u16",0],["bool",0],["registry",3]],["tokenizer",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],null,null,[[["",0]],["syntaxnode",3]],[[["",0]],["syntaxnode",3]],null,null,nulldirective",3]],[[["",0]],["invalid",3]],[[["",0]],["empty",3]],[[["",0]],["version",3]],[[["",0]],["versionerror",4]],[[["",0]],["versionprofile",4]],[[["",0]],["extensionbehavior",4]],[[["",0]],["extensionname",4]],[[["",0]],["extension",3]],[[["",0]],["extensionerror",4]],[[["",0]],["defineobject",3]],[[["",0]],["definefunction",3]],[[["",0]],["definekind",4]],[[["",0]],["define",3]],[[["",0]],["defineerror",4]],[[["",0]],["ifdef",3]],[[["",0]],["ifdeferror",4]],[[["",0]],["ifndef",3]],[[["",0]],["undef",3]],[[["",0]],["error",3]],[[["",0]],["errorerror",4]],[[["",0]],["include",3]],[[["",0]],["includeerror",4]],[[["",0]],["line",3]],[[["",0]],["parsedline",4]],[[["",0]],["lineerror",4]],[[["",0]],["ifevalerror",4]],[[["",0]],["iferror",4]],[[["",0]],["if",3]],[[["",0]],["elif",3]],[[["",0]],["eliferror",4]],[[["",0]],["else",3]],[[["",0]],["elseerror",4]],[[["",0]],["endif",3]],[[["",0]],["endiferror",4]],[[["",0]],["pragma",3]],[[["",0]],["parsedpragma",4]],[[["",0]],["pragmaerrorextensionname",4]]],[[["extensionname",4]]],[[["",0],["invalid",3]],["bool",0]],[[["",0],["empty",3]],["bool",0]],[[["",0],["version",3]],["bool",0]],[[["",0],["versionerror",4]],["bool",0]],[[["",0],["versionprofile",4]],["bool",0]],[[["",0],["extensionbehavior",4]],["bool",0]],[[["",0],["extnameatom",6]],["bool",0]],[[["",0],["extensionname",4]],["bool",0]],[[["",0],["extension",3]],["bool",0]],[[["",0],["extensionerror",4]],["bool",0]],[[["",0],["defineobject",3]],["bool",0]],[[["",0],["definefunction",3]],["bool",0]],[[["",0],["definekind",4]],["bool",0]],[[["",0],["define",3]],["bool",0]],[[["",0],["defineerror",4]],["bool",0]],[[["",0],["ifdef",3]],["bool",0]],[[["",0],["ifdeferror",4]],["bool",0]],[[["",0],["ifndef",3]],["bool",0]],[[["",0],["undef",3]],["bool",0]],[[["",0],["error",3]],["bool",0]],[[["",0],["errorerror",4]],["bool",0]],[[["",0],["include",3]],["bool",0]],[[["",0],["includeerror",4]],["bool",0]],[[["",0],["line",3]],["bool",0]],[[["",0],["parsedline",4]],["bool",0]],[[["",0],["lineerror",4]],["bool",0]],[[["",0],["ifevalerror",4]],["bool",0]],[[["",0],["iferror",4]],["bool",0]],[[["",0],["if",3]],["bool",0]],[[["",0],["elif",3]],["bool",0]],[[["",0],["eliferror",4]],["bool",0]],[[["",0],["else",3]],["bool",0]],[[["",0],["elseerror",4]],["bool",0]],[[["",0],["endif",3]],["bool",0]],[[["",0],["endiferror",4]],["bool",0]],[[["",0],["pragma",3]],["bool",0]],[[["",0],["parsedpragma",4]],["bool",0]],[[["",0],["pragmaerror",4]],["bool",0]],[[["",0],["processorstate",3],["expandlocation",3]]],[[["",0],["processorstate",3],["expandlocation",3]]],[[["fileid",3],["syntaxnode",3],["processorstate",3],["expandlocation",3]]],[[["fileid",3],["syntaxnode",3],["processorstate",3],["expandlocation",3]]],[[["",0]],["fileid",3]],null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["error",4]]],[[]],[[]],[[]],[[["str",0]]],[[["extnameatom",6]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ifevalerror",4]]],[[]],[[]],[[]],[[]],[[["ifevalerror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["smolstr",3],["definefunction",3],["bool",0]]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["syntaxnode",3,[["preprocessorlang",3]]]],[[["",0]],["bool",0]],[[["",0]],["definekind",4]],null,[[["",0]],["u32",0]],null,[[["",0]],["str",0]],null,null,[[["",0],["version",3]],["bool",0]],[[["",0],["versionerror",4]],["bool",0]],[[["",0],["extensionname",4]],["bool",0]],[[["",0],["extension",3]],["bool",0]],[[["",0],["extensionerror",4]],["bool",0]],[[["",0],["defineobject",3]],["bool",0]],[[["",0],["definefunction",3]],["bool",0]],[[["",0],["definekind",4]],["bool",0]],[[["",0],["define",3]],["bool",0]],[[["",0],["defineerror",4]],["bool",0]],[[["",0],["ifdef",3]],["bool",0]],[[["",0],["ifndef",3]],["bool",0]],[[["",0],["undef",3]],["bool",0]],[[["",0],["error",3]],["bool",0]],[[["",0],["include",3]],["bool",0]],[[["",0],["includeerror",4]],["bool",0]],[[["",0],["line",3]],["bool",0]],[[["",0],["parsedline",4]],["bool",0]],[[["",0],["lineerror",4]],["bool",0]],[[["",0],["ifevalerror",4]],["bool",0]],[[["",0],["iferror",4]],["bool",0]],[[["",0],["if",3]],["bool",0]],[[["",0],["elif",3]],["bool",0]],[[["",0],["eliferror",4]],["bool",0]],[[["",0],["pragma",3]],["bool",0]],[[["",0],["parsedpragma",4]],["bool",0]],[[["",0],["pragmaerror",4]],["bool",0]],[[["fileid",3],["syntaxnode",3,[["preprocessorlang",3]]]]],[[["cow",4,[["str",0]]]]],[[["syntaxnode",3,[["preprocessorlang",3]]]]],[[["vec",3,[["smolstr",3]]],["syntaxnode",3,[["preprocessorlang",3]]]]],[[["",0]],["syntaxnode",3]],null,null,[[["smolstr",3],["defineobject",3],["bool",0]]],[[]],[[["",0],["processorstate",3],["expandlocation",3]],["result",4,[["parsedline",4],["lineerror",4]]]],[[],["option",4,[["bool",0]]]],null,[[["",0],["processorstate",3],["expandlocation",3]],["result",4,[["parsedpath",3],["includeerror",4]]]],null,null,[[["",0]],["bool",0]],null,[[["",0]],["str",0]],null,[[["extensionname",4]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["parsedpragma",4]],null,[[["extensionname",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["processstrerror",4]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[]],[[]],[[],["option",4,[["processorstate",3]]]],[[["",0]],["expandlocation",3]],[[["",0],["processstrerror",4]],["bool",0]],[[["",0]],["option",4]],[[["str",0]],["ast",3]],[[["str",0],["processorstate",3]],["expandstr",3]],[[["",0]],["string",3]],[[["u16",0],["bool",0],["registry",3]],["tokenizer",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["keywordatomstaticset",3]],["ordering",4]],[[],["u32",0]],[[["",0],["keywordatomstaticset",3]],["bool",0]],[[]],[[],["phfstrset",3]],[[]],[[["",0],["keywordatomstaticset",3]],["option",4,[["ordering",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["parsedpath",3]],[[["",0]],["pathtype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["parsedpath",3]],["bool",0]],[[["",0],["pathtype",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["parsedpath",3]],["bool",0]],null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["typename",4]],[[["",0]],["token",4]],[[["",0]],["errorkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["typename",4]],["ordering",4]],[[["",0],["errorkind",4]],["ordering",4]],[[["",0]],["tokendescription",3]],[[["",0],["typename",4]],["bool",0]],[[["",0],["token",4]],["bool",0]],[[["",0],["errorkind",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["texttoken",6],["str",0],["u16",0],["bool",0]]],[[["bool",0],["bool",0],["typenameatom",6]],["option",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0]]],[[["",0],["typename",4]],["bool",0]],[[["",0],["token",4]],["bool",0]],[[["str",0],["u16",0],["bool",0]],["option",4]],[[["str",0]]],[[["str",0],["u32",0]],["result",4,[["errorkind",4]]]],[[["keywordatom",6]],["option",4]],[[["",0]],["str",0]],[[["",0],["typename",4]],["option",4,[["ordering",4]]]],[[["",0],["token",4]],["option",4,[["ordering",4]]]],[[["",0],["errorkind",4]],["option",4,[["ordering",4]]]],[[["str",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["str",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["typenamestate",4]],[[["",0],["",0]]],[[["",0],["typenameatomstaticset",3]],["ordering",4]],[[],["u32",0]],[[["",0],["typenameatomstaticset",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["phfstrset",3]],[[]],[[]],[[["",0]],["bool",0]],[[["",0],["typenameatomstaticset",3]],["option",4,[["ordering",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0],["u32",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["linemap",3]],[[["",0],["",0]]],[[]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["u32",0]]],[[]],null,[[]],[[["",0],["textsize",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["texttoken",3]],[[["",0],["",0]]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["texttoken",3]],[[["textrange",3]]],null,[[["",0],["str",0]],["str",0]],[[["",0],["str",0]],["tokentext",3]],[[["",0]]],null,[[],["texttoken",3,[["from",8]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["matchindices",3,[["char",0]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["unescapeiter",3]],null,[[["",0]],["unescaped",3]],[[["",0]],["tokentext",3]],[[["",0]],["tokentextrepr",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["str",0]],["bool",0]],[[["",0],["tokentext",3]],["bool",0]],[[["",0],["tokentextrepr",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["str",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["tokentext",3]],["bool",0]],[[["",0],["tokentextrepr",4]],["bool",0]],[[["str",0]]],[[["",0]],["option",4]],[[["",0],["tokentext",3]]],[[["str",0]]],null,[[["",0]]],[[["",0]],["tokentext",3]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["cow",4,[["str",0]]]],[[["",0]],["string",3]],[[["",0]],["cow",4,[["str",0]]]],[[["",0]],["string",3]],[[["",0]],["option",4,[["str",0]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["str",0]]],null,null,null],"p":[[6,"DirectiveResult"],[3,"DEFAULT_REGISTRY"],[3,"EMPTY_REGISTRY"],[3,"Registry"],[3,"ExtensionSpec"],[3,"ExtNameAtomStaticSet"],[4,"TokenState"],[4,"Event"],[8,"MaybeToken"],[3,"TypeTable"],[3,"Tokenizer"],[8,"LocatedIterator"],[13,"EnterFile"],[13,"Directive"],[13,"Error"],[13,"Token"],[13,"Warn"],[4,"Token"],[3,"Lexer"],[4,"NewlineTokenKind"],[3,"NewlineSplitter"],[4,"State"],[3,"PreLexer"],[13,"Digits"],[4,"Token"],[4,"ExpectAny"],[3,"Parser"],[3,"ParserRun"],[13,"Found"],[13,"Unexpected"],[3,"Ast"],[4,"ErrorKind"],[13,"Unexpected"],[13,"EndOfInput"],[13,"UnknownPreprocessorDirective"],[13,"ExtraTokensInPreprocessorDirective"],[3,"PreprocessorLang"],[4,"SyntaxKind"],[4,"IncludeMode"],[3,"ProcessorState"],[3,"ProcessorStateBuilder"],[13,"ArbInclude"],[13,"GoogleInclude"],[4,"Definition"],[4,"MacroCall"],[3,"MacroInvocation"],[13,"Regular"],[13,"Function"],[4,"ProcessingErrorKind"],[4,"DirectiveKind"],[4,"SendEvent"],[4,"Event"],[4,"ErrorKind"],[3,"OutputToken"],[3,"EventDirective"],[8,"TokenLike"],[3,"SendNode"],[13,"Empty"],[13,"Version"],[13,"Extension"],[13,"Define"],[13,"IfDef"],[13,"IfNDef"],[13,"If"],[13,"Elif"],[13,"Else"],[13,"EndIf"],[13,"Undef"],[13,"Error"],[13,"Include"],[13,"Line"],[13,"Pragma"],[13,"Invalid"],[13,"Parse"],[13,"Processing"],[13,"WarnExtUse"],[13,"UnsupportedExt"],[13,"EnterFile"],[13,"Directive"],[13,"Error"],[13,"Token"],[13,"DirectiveVersion"],[13,"DirectiveExtension"],[13,"DirectiveDefine"],[13,"DirectiveIfDef"],[13,"DirectiveIf"],[13,"DirectiveElif"],[13,"DirectiveElse"],[13,"DirectiveEndIf"],[13,"DirectiveError"],[13,"DirectiveInclude"],[13,"DirectiveLine"],[13,"DirectivePragma"],[13,"DirectiveIfNDef"],[13,"DirectiveUndef"],[13,"MismatchedArguments"],[13,"ProtectedDefine"],[13,"UnterminatedMacroInvocation"],[13,"UnexpectedDirective"],[13,"ErrorDirective"],[13,"IncludeNotFound"],[13,"InvalidTokenPaste"],[13,"EnterFile"],[13,"Error"],[13,"Directive"],[13,"Token"],[4,"ExpandState"],[4,"ExpandEvent"],[4,"HandleNodeResult"],[4,"LocationString"],[3,"ExpandLocation"],[3,"ExpandOne"],[13,"Event"],[13,"EnterFile"],[13,"Completed"],[13,"Init"],[13,"Iterate"],[13,"EnterNewFile"],[13,"PendingOne"],[13,"PendingEvents"],[13,"ExpandedTokens"],[13,"Event"],[13,"EnterFile"],[13,"Number"],[13,"String"],[4,"IfState"],[4,"IfError"],[3,"IfStack"],[13,"Active"],[13,"One"],[4,"EvalResult"],[3,"ExprEvaluator"],[13,"Constant"],[13,"Token"],[8,"FileSystem"],[4,"PathOrSource"],[3,"ParsedFile"],[3,"ExpandStack"],[3,"Std"],[3,"Processor"],[13,"Source"],[13,"Path"],[4,"ExtensionName"],[4,"VersionProfile"],[4,"ParsedPragma"],[4,"ExtensionBehavior"],[4,"VersionError"],[4,"IfError"],[4,"ElifError"],[4,"IncludeError"],[4,"LineError"],[4,"IfEvalError"],[4,"DefineKind"],[4,"PragmaError"],[4,"ExtensionError"],[4,"ParsedLine"],[4,"DefineError"],[4,"ErrorError"],[4,"IfDefError"],[3,"DefineFunction"],[3,"Extension"],[3,"DefineObject"],[3,"Line"],[3,"If"],[3,"Elif"],[3,"Directive"],[3,"Invalid"],[3,"Empty"],[3,"Version"],[3,"Define"],[3,"IfDef"],[3,"IfNDef"],[3,"Undef"],[3,"Error"],[3,"Include"],[3,"Else"],[4,"ElseError"],[3,"EndIf"],[4,"EndIfError"],[3,"Pragma"],[8,"DirectiveExt"],[13,"MissingBody"],[13,"Object"],[13,"Function"],[13,"Eval"],[13,"InvalidAllBehavior"],[13,"MissingExtensionBehavior"],[13,"InvalidExtensionBehavior"],[13,"Specific"],[13,"Eval"],[13,"InvalidExpr"],[13,"MalformedExpr"],[13,"ExtraTokens"],[13,"InvalidPathLiteral"],[13,"MalformedPath"],[13,"ExtraTokens"],[13,"InvalidLineNumber"],[13,"InvalidPath"],[13,"MalformedLine"],[13,"ExtraTokens"],[13,"Line"],[13,"LineAndFileNumber"],[13,"LineAndPath"],[13,"StdGl"],[13,"Optimize"],[13,"Debug"],[13,"Unknown"],[13,"IncorrectSyntax"],[13,"InvalidVersionNumber"],[13,"InvalidVersionProfile"],[13,"ProfileUnsupported"],[13,"EsProfileRequired"],[4,"ProcessStrError"],[3,"ExpandStr"],[13,"IncludeRequested"],[3,"KeywordAtomStaticSet"],[4,"PathType"],[3,"ParsedPath"],[4,"Token"],[4,"TypeName"],[4,"ErrorKind"],[13,"IDENT"],[13,"TYPE_NAME"],[13,"FLOAT_CONST"],[13,"INT_CONST"],[13,"UINT_CONST"],[13,"BOOL_CONST"],[13,"DOUBLE_CONST"],[13,"ERROR"],[13,"RESERVED"],[13,"OTHER"],[4,"TypeNameState"],[3,"TypeNameAtomStaticSet"],[13,"WarnType"],[3,"LineMap"],[3,"TextToken"],[3,"TokenText"],[4,"TokenTextRepr"],[3,"Unescaped"],[3,"UnescapeIter"],[13,"Raw"],[13,"Unescaped"],[13,"JustUnescaped"]]},\
"glsl_lang_quote":{"doc":"<code>glsl-lang-quote</code> offers proc-macros to quote GLSL syntax in …","t":[14,14,5,14,0,0,8,10,8,14,10,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["glsl","glsl_expr","glsl_internal","glsl_statement","quoted","tokenize","Quoted","quote","Tokenize","impl_tokenize","tokenize","tokenize_array_spec","tokenize_array_spec_dim","tokenize_arrayed_identifier","tokenize_assignment_op","tokenize_binary_op","tokenize_block","tokenize_case_label","tokenize_compound_statement","tokenize_condition","tokenize_declaration","tokenize_expr","tokenize_expr_statement","tokenize_external_declaration","tokenize_for_init_statement","tokenize_for_rest_statement","tokenize_fully_specified_type","tokenize_function_definition","tokenize_function_identifier","tokenize_function_parameter_declaration","tokenize_function_parameter_declarator","tokenize_function_prototype","tokenize_identifier","tokenize_init_declarator_list","tokenize_initializer","tokenize_interpolation_qualifier","tokenize_iteration_statement","tokenize_jump_statement","tokenize_layout_qualifier","tokenize_layout_qualifier_spec","tokenize_path","tokenize_precision_qualifier","tokenize_preprocessor","tokenize_preprocessor_define","tokenize_preprocessor_elseif","tokenize_preprocessor_error","tokenize_preprocessor_extension","tokenize_preprocessor_extension_behavior","tokenize_preprocessor_extension_name","tokenize_preprocessor_if","tokenize_preprocessor_ifdef","tokenize_preprocessor_ifndef","tokenize_preprocessor_include","tokenize_preprocessor_line","tokenize_preprocessor_pragma","tokenize_preprocessor_undef","tokenize_preprocessor_version","tokenize_preprocessor_version_profile","tokenize_rs_ident","tokenize_selection_rest_statement","tokenize_selection_statement","tokenize_single_declaration","tokenize_single_declaration_no_type","tokenize_span","tokenize_statement","tokenize_storage_qualifier","tokenize_struct_field","tokenize_struct_non_declaration","tokenize_switch_statement","tokenize_text_range","tokenize_text_size","tokenize_translation_unit","tokenize_type_name","tokenize_type_qualifier","tokenize_type_qualifier_spec","tokenize_type_specifier","tokenize_type_specifier_non_array","tokenize_unary_op"],"q":["glsl_lang_quote","","","","","","glsl_lang_quote::quoted","","glsl_lang_quote::tokenize","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Parse a translation unit at compile time","Parse an expression at compile time","","Parse a statement at compile time","A set of small traits that enable tokenizing some common …","The <code>Tokenize</code> trait, turning glsl into <code>TokenStream</code>s.","","","Tokenize a value into a stream of tokens.","","Inject self into a <code>TokenStream</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,[[["tokenstream",3]],["tokenstream",3]],null,null,null,null,[[["",0]],["tokenstream",3]],null,null,[[["",0],["tokenstream",3]]],[[["arrayspecifier",6]],["tokenstream",3]],[[["arrayspecifierdimension",6]],["tokenstream",3]],[[["arrayedidentifier",6]],["tokenstream",3]],[[["assignmentop",6]],["tokenstream",3]],[[["binaryop",6]],["tokenstream",3]],[[["block",6]],["tokenstream",3]],[[["caselabel",6]],["tokenstream",3]],[[["compoundstatement",6]],["tokenstream",3]],[[["condition",6]],["tokenstream",3]],[[["declaration",6]],["tokenstream",3]],[[["expr",6]],["tokenstream",3]],[[["exprstatement",6]],["tokenstream",3]],[[["externaldeclaration",6]],["tokenstream",3]],[[["forinitstatement",6]],["tokenstream",3]],[[["forreststatement",6]],["tokenstream",3]],[[["fullyspecifiedtype",6]],["tokenstream",3]],[[["functiondefinition",6]],["tokenstream",3]],[[["funidentifier",6]],["tokenstream",3]],[[["functionparameterdeclaration",6]],["tokenstream",3]],[[["functionparameterdeclarator",6]],["tokenstream",3]],[[["functionprototype",6]],["tokenstream",3]],[[["identifier",6]],["tokenstream",3]],[[["initdeclaratorlist",6]],["tokenstream",3]],[[["initializer",6]],["tokenstream",3]],[[["interpolationqualifier",6]],["tokenstream",3]],[[["iterationstatement",6]],["tokenstream",3]],[[["jumpstatement",6]],["tokenstream",3]],[[["layoutqualifier",6]],["tokenstream",3]],[[["layoutqualifierspec",6]],["tokenstream",3]],[[["path",6]],["tokenstream",3]],[[["precisionqualifier",6]],["tokenstream",3]],[[["preprocessor",6]],["tokenstream",3]],[[["preprocessordefine",6]],["tokenstream",3]],[[["preprocessorelseif",6]],["tokenstream",3]],[[["preprocessorerror",6]],["tokenstream",3]],[[["preprocessorextension",6]],["tokenstream",3]],[[["preprocessorextensionbehavior",6]],["tokenstream",3]],[[["preprocessorextensionname",6]],["tokenstream",3]],[[["preprocessorif",6]],["tokenstream",3]],[[["preprocessorifdef",6]],["tokenstream",3]],[[["preprocessorifndef",6]],["tokenstream",3]],[[["preprocessorinclude",6]],["tokenstream",3]],[[["preprocessorline",6]],["tokenstream",3]],[[["preprocessorpragma",6]],["tokenstream",3]],[[["preprocessorundef",6]],["tokenstream",3]],[[["preprocessorversion",6]],["tokenstream",3]],[[["preprocessorversionprofile",6]],["tokenstream",3]],[[["str",0]],["tokenstream",3]],[[["selectionreststatement",6]],["tokenstream",3]],[[["selectionstatement",6]],["tokenstream",3]],[[["singledeclaration",6]],["tokenstream",3]],[[["singledeclarationnotype",6]],["tokenstream",3]],[[["option",4]],["tokenstream",3]],[[["statement",6]],["tokenstream",3]],[[["storagequalifier",6]],["tokenstream",3]],[[["structfieldspecifier",6]],["tokenstream",3]],[[["structspecifier",6]],["tokenstream",3]],[[["switchstatement",6]],["tokenstream",3]],[[["textrange",3]],["tokenstream",3]],[[["textsize",3]],["tokenstream",3]],[[["translationunit",3]],["tokenstream",3]],[[["typename",6]],["tokenstream",3]],[[["typequalifier",6]],["tokenstream",3]],[[["typequalifierspec",6]],["tokenstream",3]],[[["typespecifier",6]],["tokenstream",3]],[[["typespecifiernonarray",6]],["tokenstream",3]],[[["unaryop",6]],["tokenstream",3]]],"p":[[8,"Quoted"],[8,"Tokenize"]]},\
"glsl_lang_types":{"doc":"","t":[0,12,12,12,12,12,13,13,13,13,13,13,13,6,3,6,4,6,3,13,13,6,4,13,13,13,13,13,13,6,4,13,13,13,6,13,3,13,13,13,13,13,13,6,13,4,13,13,13,6,4,13,13,13,6,3,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,4,6,3,13,13,13,6,4,13,13,13,13,6,4,6,3,6,3,13,6,4,6,13,3,13,6,4,6,3,6,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,3,6,4,13,13,13,6,4,13,13,13,6,4,13,6,4,13,13,13,6,3,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,8,24,8,3,13,13,13,13,13,13,13,6,4,13,13,13,13,13,13,6,4,6,13,4,6,4,6,3,6,3,6,6,4,3,6,4,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,4,6,3,13,13,13,13,6,3,6,3,3,13,13,6,13,4,13,6,4,13,6,3,6,3,13,13,13,13,6,3,13,3,3,3,6,13,3,6,3,6,4,6,13,3,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["ast","0","0","0","0","0","Absolute","Add","Add","Add","All","And","And","ArraySpecifier","ArraySpecifierData","ArraySpecifierDimension","ArraySpecifierDimensionData","ArrayedIdentifier","ArrayedIdentifierData","Assignment","Assignment","AssignmentOp","AssignmentOpData","AtomicUInt","Attribute","BVec2","BVec3","BVec4","Binary","BinaryOp","BinaryOpData","BitAnd","BitOr","BitXor","Block","Block","BlockData","Bool","BoolConst","Bracket","Break","Buffer","Case","CaseLabel","CaseLabel","CaseLabelData","Centroid","Coherent","Comma","Comment","CommentData","Compatibility","Complement","Compound","CompoundStatement","CompoundStatementData","Condition","ConditionData","Const","Continue","Core","DMat2","DMat22","DMat23","DMat24","DMat3","DMat32","DMat33","DMat34","DMat4","DMat42","DMat43","DMat44","DVec2","DVec3","DVec4","Dec","Declaration","Declaration","Declaration","Declaration","DeclarationData","Def","Define","Disable","Discard","Div","Div","DoWhile","Dot","Double","DoubleConst","Else","Else","ElseIf","Enable","EndIf","Equal","Equal","Error","Es","ExplicitlySized","Expr","Expr","Expr","ExprData","ExprStatement","ExprStatementData","Expression","Expression","Extension","ExternalDeclaration","ExternalDeclarationData","Flat","Float","FloatConst","For","ForInitStatement","ForInitStatementData","ForRestStatement","ForRestStatementData","FullySpecifiedType","FullySpecifiedTypeData","FunCall","FunIdentifier","FunIdentifierData","FunctionDefinition","FunctionDefinition","FunctionDefinitionData","FunctionLike","FunctionParameterDeclaration","FunctionParameterDeclarationData","FunctionParameterDeclarator","FunctionParameterDeclaratorData","FunctionPrototype","FunctionPrototype","FunctionPrototypeData","Gt","Gte","High","IImage1D","IImage1DArray","IImage2D","IImage2DArray","IImage2DMs","IImage2DMsArray","IImage2DRect","IImage3D","IImageBuffer","IImageCube","IImageCubeArray","ISampler1D","ISampler1DArray","ISampler2D","ISampler2DArray","ISampler2DMs","ISampler2DMsArray","ISampler2DRect","ISampler3D","ISamplerBuffer","ISamplerCube","ISamplerCubeArray","IVec2","IVec3","IVec4","Identifier","Identifier","IdentifierData","If","IfDef","IfNDef","Image1D","Image1DArray","Image2D","Image2DArray","Image2DMs","Image2DMsArray","Image2DRect","Image3D","ImageBuffer","ImageCube","ImageCubeArray","In","InOut","Inc","Include","InitDeclaratorList","InitDeclaratorList","InitDeclaratorListData","Initializer","InitializerData","Int","IntConst","Interpolation","InterpolationQualifier","InterpolationQualifierData","Invariant","Invariant","Iteration","IterationStatement","IterationStatementData","Jump","JumpStatement","JumpStatementData","LShift","LShift","Layout","LayoutQualifier","LayoutQualifierData","LayoutQualifierSpec","LayoutQualifierSpecData","Line","List","Low","Lt","Lte","Mat2","Mat22","Mat23","Mat24","Mat3","Mat32","Mat33","Mat34","Mat4","Mat42","Mat43","Mat44","Medium","Minus","Mod","Mod","Mult","Mult","Multi","Named","NoPerspective","Node","NodeContent","NodeContent","NodeDisplay","NodeSpan","NonEqual","Not","ObjectLike","Or","Or","Out","Patch","Path","PathData","PostDec","PostInc","Pragma","Precise","Precision","Precision","PrecisionQualifier","PrecisionQualifierData","Preprocessor","Preprocessor","PreprocessorData","PreprocessorDefine","PreprocessorDefineData","PreprocessorElseIf","PreprocessorElseIfData","PreprocessorError","PreprocessorErrorData","PreprocessorExtension","PreprocessorExtensionBehavior","PreprocessorExtensionBehaviorData","PreprocessorExtensionData","PreprocessorExtensionName","PreprocessorExtensionNameData","PreprocessorIf","PreprocessorIfData","PreprocessorIfDef","PreprocessorIfDefData","PreprocessorIfNDef","PreprocessorIfNDefData","PreprocessorInclude","PreprocessorIncludeData","PreprocessorLine","PreprocessorLineData","PreprocessorPragma","PreprocessorPragmaData","PreprocessorUndef","PreprocessorUndefData","PreprocessorVersion","PreprocessorVersionData","PreprocessorVersionProfile","PreprocessorVersionProfileData","RShift","RShift","ReadOnly","Relative","Require","Restrict","Return","Sample","Sampler1D","Sampler1DArray","Sampler1DArrayShadow","Sampler1DShadow","Sampler2D","Sampler2DArray","Sampler2DArrayShadow","Sampler2DMs","Sampler2DMsArray","Sampler2DRect","Sampler2DRectShadow","Sampler2DShadow","Sampler3D","SamplerBuffer","SamplerCube","SamplerCubeArray","SamplerCubeArrayShadow","SamplerCubeShadow","Selection","SelectionRestStatement","SelectionRestStatementData","SelectionStatement","SelectionStatementData","Shared","Shared","Simple","Single","SingleDeclaration","SingleDeclarationData","SingleDeclarationNoType","SingleDeclarationNoTypeData","SmolStr","Smooth","Specific","Statement","Statement","StatementData","Storage","StorageQualifier","StorageQualifierData","Struct","StructFieldSpecifier","StructFieldSpecifierData","StructSpecifier","StructSpecifierData","Sub","Sub","Subroutine","Switch","SwitchStatement","SwitchStatementData","Ternary","TextRange","TextSize","TranslationUnit","TypeName","TypeName","TypeNameData","TypeQualifier","TypeQualifierData","TypeQualifierSpec","TypeQualifierSpecData","TypeSpecifier","TypeSpecifier","TypeSpecifierData","TypeSpecifierNonArray","TypeSpecifierNonArrayData","UImage1D","UImage1DArray","UImage2D","UImage2DArray","UImage2DMs","UImage2DMsArray","UImage2DRect","UImage3D","UImageBuffer","UImageCube","UImageCubeArray","UInt","UIntConst","USampler1D","USampler1DArray","USampler2D","USampler2DArray","USampler2DMs","USampler2DMsArray","USampler2DRect","USampler3D","USamplerBuffer","USamplerCube","USamplerCubeArray","UVec2","UVec3","UVec4","Unary","UnaryOp","UnaryOpData","Undef","Uniform","Unnamed","Unsized","Variable","Varying","Vec2","Vec3","Vec4","Version","Void","Volatile","Warn","While","WriteOnly","Xor","Xor","add","add","add","add","add_assign","add_assign","array_spec","array_specifier","array_specifier","as_ident","as_ident_mut","as_ref","as_rs_ident","as_rs_ident","as_rs_ident","as_str","as_str","as_str","at","behavior","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","command","cond","condition","condition","condition","contains","contains_inclusive","contains_range","content","cover","cover_offset","declare_var","default","default","default","deref","deref","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dimensions","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_children","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","display_extra","empty","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_lexer","from_str","hash","hash","hash","hash","hash","hash","hash","head","head","ident","ident","ident","ident","ident","ident","identifier","identifiers","ids","initializer","initializer","intersect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_node","is_empty","is_empty","is_empty","is_heap_allocated","is_multi","is_single","len","len","len","line","map","map_spanned","message","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new_end","new_inline","new_inline_from_ascii","new_start","of","ordering","parameters","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","post_expr","profile","prototype","qualifier","qualifier","qualifier","qualifiers","range","range","raw","rest","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_id","source_string_number","span","spanned","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start","start_bound","statement","statement_list","sub","sub","sub","sub","sub_assign","sub_assign","sum","tail","text","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","up_to","variable","version","0","0","0","0","0","0","1","2","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","2","2","2","0","0","0","0","0","0","0","0","0","1","1","0","0","0","0","0","1","1","1","2","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","args","ident","ident","value","value","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"q":["glsl_lang_types","glsl_lang_types::astglsl_lang_types::ast::ArraySpecifierDimensionData","glsl_lang_types::ast::CaseLabelData","glsl_lang_types::ast::CommentData","","glsl_lang_types::ast::ConditionData","","","","glsl_lang_types::ast::DeclarationData","","","","","","glsl_lang_types::ast::ExprData","","","","","","","","","","","","","","","","","","","","","","","","","","","glsl_lang_types::ast::ExternalDeclarationData","","","glsl_lang_types::ast::ForInitStatementData","","glsl_lang_types::ast::FunIdentifierData","","glsl_lang_types::ast::FunctionParameterDeclarationData","","","","glsl_lang_types::ast::InitializerData","","glsl_lang_types::ast::IterationStatementData","","","","","","","glsl_lang_types::ast::JumpStatementData","glsl_lang_types::ast::LayoutQualifierSpecData","","glsl_lang_types::ast::PathData","","glsl_lang_types::ast::PreprocessorData","","","","","","","","","","","","glsl_lang_types::ast::PreprocessorDefineData","","","","","glsl_lang_types::ast::PreprocessorExtensionNameData","glsl_lang_types::ast::SelectionRestStatementData","","","glsl_lang_types::ast::StatementData","","","","","","","","glsl_lang_types::ast::StorageQualifierData","glsl_lang_types::ast::TypeQualifierSpecData","","","","glsl_lang_types::ast::TypeSpecifierNonArrayData",""],"d":["GLSL abstract syntax tree and grammar.","","","","","","Specified with angle brackets.","<code>+</code> unary operator","<code>+</code> binary operator","<code>+=</code> assignment operator","All extensions you could ever imagine in your whole …","<code>&amp;&amp;</code> binary operator","<code>&amp;=</code> assignment operator","Type alias for <code>Node&lt;ArraySpecifierData&gt;</code>","Dimensionality of an array.","Type alias for <code>Node&lt;ArraySpecifierDimensionData&gt;</code>","One array specifier dimension.","Type alias for <code>Node&lt;ArrayedIdentifierData&gt;</code>","An identifier with an optional array specifier.","An assignment is also an expression. Gathers an expression …","A variable declaration used as a condition","Type alias for <code>Node&lt;AssignmentOpData&gt;</code>","All possible operators for assigning expressions.","<code>atomic_uint</code> type specifier","<code>attribute</code> storage qualifier","<code>bvec2</code> type specifier","<code>bvec3</code> type specifier","<code>bvec4</code> type specifier","A binary expression, gathering two expressions and a …","Type alias for <code>Node&lt;BinaryOpData&gt;</code>","All binary operators that exist in GLSL.","<code>&amp;</code> binary operator","<code>|</code> binary operator","<code>^</code> binary operator","Type alias for <code>Node&lt;BlockData&gt;</code>","Block declaration","A general purpose block, containing fields and possibly a …","<code>bool</code> type specifier","Boolean constant expression.","Add an array specifier to an expression.","<code>break</code> jump statement","<code>buffer</code> storage qualifier","<code>case:</code> case label","Type alias for <code>Node&lt;CaseLabelData&gt;</code>","Switch statement case label","Case label statement.","<code>centroid</code> storage qualifier","<code>coherent</code> storage qualifier","An expression that contains several, separated with comma.","Type alias for <code>Node&lt;CommentData&gt;</code>","A comment","<code>compatibility</code> version profile","<code>~</code> unary operator","Statement block","Type alias for <code>Node&lt;CompoundStatementData&gt;</code>","Compound statement (with no new scope).","Type alias for <code>Node&lt;ConditionData&gt;</code>","Condition.","<code>const</code> storage qualifier","<code>continue</code> jump statement","<code>core</code> version profile","<code>dmat2</code> type specifier","<code>dmat2x2</code> type specifier","<code>dmat2x3</code> type specifier","<code>dmat2x4</code> type specifier","<code>dmat3</code> type specifier","<code>dmat3x2</code> type specifier","<code>dmat3x3</code> type specifier","<code>dmat3x4</code> type specifier","<code>dmat4</code> type specifier","<code>dmat4x2</code> type specifier","<code>dmat4x3</code> type specifier","<code>dmat4x4</code> type specifier","<code>dvec2</code> type specifier","<code>dvec3</code> type specifier","<code>dvec4</code> type specifier","<code>--</code> unary operator","Type alias for <code>Node&lt;DeclarationData&gt;</code>","Declaration","Declaration","Variable declaration","A declaration.","<code>default:</code> case label","<code>#define</code> preprocessor directive","<code>disable</code> preprocessor extension behavior","<code>discard</code> jump statement","<code>/</code> binary operator","<code>/=</code> assignment operator","<code>do</code> iteration statement","An expression associated with a field selection (struct).","<code>double</code> type specifier","Double precision floating expression.","The first argument is the body of the if, the rest is the …","<code>#else</code> preprocessor directive","<code>#elseif</code> preprocessor directive","<code>enable</code> preprocessor extension behavior","<code>#endif</code> preprocessor directive","<code>==</code> binary operator","<code>=</code> assignment operator","<code>#error</code> preprocessor directive","<code>es</code> version profile","<code>[expr]</code> dimension","Type alias for <code>Node&lt;ExprData&gt;</code>","Expression used for the function name","An expression","The most general form of an expression.","Type alias for <code>Node&lt;ExprStatementData&gt;</code>","Expression statement.","Expression statement","Expression","<code>#extension</code> preprocessor directive","Type alias for <code>Node&lt;ExternalDeclarationData&gt;</code>","External declaration.","<code>flat</code> interpolation qualifier","<code>float</code> type specifier","Single precision floating expression.","<code>for</code> iteration statement","Type alias for <code>Node&lt;ForInitStatementData&gt;</code>","For init statement.","Type alias for <code>Node&lt;ForRestStatementData&gt;</code>","For init statement.","Type alias for <code>Node&lt;FullySpecifiedTypeData&gt;</code>","Fully specified type.","A functional call. It has a function identifier and a list …","Type alias for <code>Node&lt;FunIdentifierData&gt;</code>","Function identifier.","Type alias for <code>Node&lt;FunctionDefinitionData&gt;</code>","Function definition","Function definition.","A preprocessor function definition","Type alias for <code>Node&lt;FunctionParameterDeclarationData&gt;</code>","Function parameter declaration.","Type alias for <code>Node&lt;FunctionParameterDeclaratorData&gt;</code>","Function parameter declarator.","Type alias for <code>Node&lt;FunctionPrototypeData&gt;</code>","Function prototype declaration","Function prototype.","<code>&gt;</code> binary operator","<code>&gt;=</code> binary operator","<code>high</code> precision qualifier","<code>iimage1D</code> type specifier","<code>iimage1DArray</code> type specifier","<code>iimage2D</code> type specifier","<code>iimage2DArray</code> type specifier","<code>iimage2DMS</code> type specifier","<code>iimage2DMSArray</code> type specifier","<code>iimage2DRect</code> type specifier","<code>iimage3D</code> type specifier","<code>iimageBuffer</code> type specifier","<code>iimageCube</code> type specifier","<code>iimageCubeArray</code> type specifier","<code>isampler1D</code> type specifier","<code>isampler1DArray</code> type specifier","<code>isampler2D</code> type specifier","<code>isampler2DArray</code> type specifier","<code>isampler2DMS</code> type specifier","<code>isampler2DMSArray</code> type specifier","<code>isampler2DRect</code> type specifier","<code>isampler3D</code> type specifier","<code>isamplerBuffer</code> type specifier","<code>isamplerCube</code> type specifier","<code>isamplerCubeArray</code> type specifier","<code>ivec2</code> type specifier","<code>ivec3</code> type specifier","<code>ivec4</code> type specifier","Type alias for <code>Node&lt;IdentifierData&gt;</code>","An <code>ident = expr</code> layout qualifier","A generic identifier.","<code>#if</code> preprocessor directive","<code>#ifdef</code> preprocessor directive","<code>#ifndef</code> preprocessor directive","<code>image1D</code> type specifier","<code>image1DArray</code> type specifier","<code>image2D</code> type specifier","<code>image2DArray</code> type specifier","<code>image2DMS</code> type specifier","<code>image2DMSArray</code> type specifier","<code>image2DRect</code> type specifier","<code>image3D</code> type specifier","<code>imageBuffer</code> type specifier","<code>imageCube</code> type specifier","<code>imageCubeArray</code> type specifier","<code>in</code> storage qualifier","<code>inout</code> storage qualifier","<code>++</code> unary operator","<code>#include</code> preprocessor directive","Type alias for <code>Node&lt;InitDeclaratorListData&gt;</code>","List of declarators and initializers","Init declarator list.","Type alias for <code>Node&lt;InitializerData&gt;</code>","Initializer.","<code>int</code> type specifier","Integral constant expression.","Interpolation qualifier","Type alias for <code>Node&lt;InterpolationQualifierData&gt;</code>","Interpolation qualifier.","<code>invariant</code> qualifier","Invariant declaration","Iteration statement","Type alias for <code>Node&lt;IterationStatementData&gt;</code>","Iteration statement.","Jump statement","Type alias for <code>Node&lt;JumpStatementData&gt;</code>","Jump statement.","<code>&lt;&lt;</code> binary operator","<code>&lt;&lt;=</code> assignment operator","Layout qualifier","Type alias for <code>Node&lt;LayoutQualifierData&gt;</code>","Layout qualifier.","Type alias for <code>Node&lt;LayoutQualifierSpecData&gt;</code>","Layout qualifier spec.","<code>#line</code> preprocessor directive","Multiple initializer","<code>low</code> precision qualifier","<code>&lt;</code> binary operator","<code>&lt;=</code> binary operator","<code>mat2</code> type specifier","<code>mat2x2</code> type specifier","<code>mat2x3</code> type specifier","<code>mat2x4</code> type specifier","<code>mat3</code> type specifier","<code>mat3x2</code> type specifier","<code>mat3x3</code> type specifier","<code>mat3x4</code> type specifier","<code>mat4</code> type specifier","<code>mat4x2</code> type specifier","<code>mat4x3</code> type specifier","<code>mat4x4</code> type specifier","<code>medium</code> precision qualifier","<code>-</code> unary operator","<code>%</code> binary operator","<code>%=</code> assignment operator","<code>*</code> binary operator","<code>*</code> assignment operator","Multi-line comment","Named parameter","<code>noperspective</code> interpolation qualifier","A syntax node with span information","Trait for AST node contents.","Mark a type as representing data in an AST node","Trait for displaying a syntax node","Span information for a node, constructed from a pair of …","<code>!=</code> binary operator","<code>!</code> unary operator","A preprocessor definition","<code>||</code> binary operator","<code>|=</code> assignment operator","<code>out</code> storage qualifier","<code>patch</code> storage qualifier","Type alias for <code>Node&lt;PathData&gt;</code>","A path literal.","Post-decrementation of an expression.","Post-incrementation of an expression.","<code>#pragma</code> preprocessor directive","<code>precise</code> qualifier","Precision qualifier","Precision declaration","Type alias for <code>Node&lt;PrecisionQualifierData&gt;</code>","Precision qualifier.","Type alias for <code>Node&lt;PreprocessorData&gt;</code>","Preprocessor directive","Some basic preprocessor directives.","Type alias for <code>Node&lt;PreprocessorDefineData&gt;</code>","A #define preprocessor directive.","Type alias for <code>Node&lt;PreprocessorElseIfData&gt;</code>","An #else preprocessor directive.","Type alias for <code>Node&lt;PreprocessorErrorData&gt;</code>","An #error preprocessor directive.","Type alias for <code>Node&lt;PreprocessorExtensionData&gt;</code>","Type alias for <code>Node&lt;PreprocessorExtensionBehaviorData&gt;</code>","An #extension behavior annotation.","An #extension preprocessor directive.","Type alias for <code>Node&lt;PreprocessorExtensionNameData&gt;</code>","An #extension name annotation.","Type alias for <code>Node&lt;PreprocessorIfData&gt;</code>","An #if preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIfDefData&gt;</code>","An #ifdef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIfNDefData&gt;</code>","A #ifndef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorIncludeData&gt;</code>","An #include name annotation.","Type alias for <code>Node&lt;PreprocessorLineData&gt;</code>","A #line preprocessor directive.","Type alias for <code>Node&lt;PreprocessorPragmaData&gt;</code>","A #pragma preprocessor directive. Holds compiler-specific …","Type alias for <code>Node&lt;PreprocessorUndefData&gt;</code>","A #undef preprocessor directive.","Type alias for <code>Node&lt;PreprocessorVersionData&gt;</code>","A #version preprocessor directive.","Type alias for <code>Node&lt;PreprocessorVersionProfileData&gt;</code>","A #version profile annotation.","<code>&gt;&gt;</code> binary operator","<code>&gt;&gt;=</code> assignment operator","<code>readonly</code> storage qualifier","Specified with double quotes.","<code>require</code> preprocessor extension behavior","<code>restrict</code> storage qualifier","<code>return</code> jump statement","<code>sample</code> storage qualifier","<code>sampler1D</code> type specifier","<code>sampler1DArray</code> type specifier","<code>sampler1DArrayShadow</code> type specifier","<code>sampler1DShadow</code> type specifier","<code>sampler2D</code> type specifier","<code>sampler2DArray</code> type specifier","<code>sampler2DArrayShadow</code> type specifier","<code>sampler2DMS</code> type specifier","<code>sampler2DMSArray</code> type specifier","<code>sampler2DRect</code> type specifier","<code>sampler2DRectShadow</code> type specifier","<code>sampler2DShadow</code> type specifier","<code>sampler3D</code> type specifier","<code>samplerBuffer</code> type specifier","<code>samplerCube</code> type specifier","<code>samplerCubeArray</code> type specifier","<code>samplerCubeArrayShadow</code> type specifier","<code>samplerCubeShadow</code> type specifier","<code>if/...</code> statement","Type alias for <code>Node&lt;SelectionRestStatementData&gt;</code>","Selection rest statement.","Type alias for <code>Node&lt;SelectionStatementData&gt;</code>","Selection statement.","<code>shared</code> storage qualifier","<code>shared</code> layout qualifier","Simple initializer","Single-line comment","Type alias for <code>Node&lt;SingleDeclarationData&gt;</code>","Single declaration.","Type alias for <code>Node&lt;SingleDeclarationNoTypeData&gt;</code>","A single declaration with implicit, already-defined type.","A <code>SmolStr</code> is a string type that has the following …","<code>smooth</code> interpolation qualifier","A specific extension.","Type alias for <code>Node&lt;StatementData&gt;</code>","Body of the if.","Statement.","Storage qualifier","Type alias for <code>Node&lt;StorageQualifierData&gt;</code>","Storage qualifier.","<code>struct</code> type specifier","Type alias for <code>Node&lt;StructFieldSpecifierData&gt;</code>","Struct field specifier. Used to add fields to struct …","Type alias for <code>Node&lt;StructSpecifierData&gt;</code>","Struct specifier. Used to create new, user-defined types.","<code>-</code> binary operator","<code>-=</code> assignment operator","<code>subroutine</code> storage qualifier","<code>switch</code> statement","Type alias for <code>Node&lt;SwitchStatementData&gt;</code>","Switch statement.","A ternary conditional expression, gathering three …","A range in text, represented as a pair of <code>TextSize</code>.","A measure of text length. Also, equivalently, an index …","Starting rule.","Type alias for <code>Node&lt;TypeNameData&gt;</code>","Raw type name","Any type name.","Type alias for <code>Node&lt;TypeQualifierData&gt;</code>","Type qualifier.","Type alias for <code>Node&lt;TypeQualifierSpecData&gt;</code>","Type qualifier spec.","Type alias for <code>Node&lt;TypeSpecifierData&gt;</code>","Type name used for the function name (as a constructor)","Type specifier.","Type alias for <code>Node&lt;TypeSpecifierNonArrayData&gt;</code>","Type specifier (non-array).","<code>uimage1D</code> type specifier","<code>uimage1DArray</code> type specifier","<code>uimage2D</code> type specifier","<code>uimage2DArray</code> type specifier","<code>uimage2DMS</code> type specifier","<code>uimage2DMSArray</code> type specifier","<code>uimage2DRect</code> type specifier","<code>uimage3D</code> type specifier","<code>uimageBuffer</code> type specifier","<code>uimageCube</code> type specifier","<code>uimageCubeArray</code> type specifier","<code>uint</code> type specifier","Unsigned integral constant expression.","<code>usampler1D</code> type specifier","<code>usampler1DArray</code> type specifier","<code>usampler2D</code> type specifier","<code>usampler2DArray</code> type specifier","<code>usampler2DMS</code> type specifier","<code>usampler2DMSArray</code> type specifier","<code>usampler2DRect</code> type specifier","<code>usampler3D</code> type specifier","<code>usamplerBuffer</code> type specifier","<code>usamplerCube</code> type specifier","<code>usamplerCubeArray</code> type specifier","<code>uvec2</code> type specifier","<code>uvec3</code> type specifier","<code>uvec4</code> type specifier","A unary expression, gathering a single expression and a …","Type alias for <code>Node&lt;UnaryOpData&gt;</code>","All unary operators that exist in GLSL.","<code>#undef</code> preprocessor directive","<code>uniform</code> storage qualifier","Unnamed parameter","<code>[]</code> dimension","A variable expression, using an identifier.","<code>varying</code> storage qualifier","<code>vec2</code> type specifier","<code>vec3</code> type specifier","<code>vec4</code> type specifier","<code>#version</code> preprocessor directive","<code>void</code> type specifier","<code>volatile</code> storage qualifier","<code>warn</code> preprocessor extension behavior","<code>while</code> iteration statement","<code>writeonly</code> storage qualifier","<code>^^</code> binary operator","<code>^=</code> assignment operator","","","","","","","Attached array specification","Array part of the specifier","Array specification","Try to parse this function identifier as a raw identifier","Try to parse this function identifier as a mutable raw …","","Parses this identifier as a glsl-lang-quote Rust identifier","Try to parse this function identifier as a <code>glsl-lang-quote</code> …","Try to parse this function identifier as a <code>glsl-lang-quote</code> …","Returns this identifier as a string slice","","Return this type name as a string slice","Create a new <code>TextRange</code> with the given <code>offset</code> and <code>len</code> (…","Behavior for the extension","Body of the switch statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add an offset to this range.","Checked addition. Returns <code>None</code> if overflow occurred.","Subtract an offset from this range.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raw pragma text","Condition to evaluate","Loop condition","Condition expression","Condition expression","Check if this range contains an offset.","Check if this range contains an offset.","Check if this range completely contains another range.","Contents of this syntax node","Extends the range to cover <code>other</code> as well.","Extends the range to cover <code>other</code> offsets as well.","Declare a new variable.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of all the dimensions – possibly unsized or …","Obtain a display wrapper for the current node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display the node’s children","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Display extra information for the node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a zero-length range at the specified offset (…","Ending position of the node","","","","The end point of this range.","","","","Return the end of this span as a LexerPosition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Field specifications","Declared fields","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Create a new node span from two lexer positions","","","","","","","","","First declaration","Expression to evaluate and switch on","Create a function identifier from an identifier","Raw identifier","Parameter name","Declared identifier","Identifier to test","Identifier to test","Associated identifiers","List of declared identifiers for this field","List of layout qualifiers","Initializer expression","Initializer expression","The range covered by both ranges, if it exists. If the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the wrapped syntax node, discarding the span …","Convert the contents into a node","","Check if this range is empty.","Return true if this range is empty","","true if this comment is a multi-line comment","true if this comment is a single-line comment","","The size of this range.","Return the length of this span","Line index","Map this content of this node into a new node","Map this content of this node into a new node with the …","Error message","Name of the syntax node’s type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Structure name","Block name","Function name","Declared identifier","Identifier to undefine","Name of the target extension","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>TextRange</code> with the given <code>start</code> and <code>end</code> (…","Create a new syntax node with span information","Create a new node span","Create a new ArrayedIdentifier from a raw identifier and a …","Create a new FullySpecifiedType from a …","Return a 0-length span located at the end of the given …","Constructs inline variant of <code>SmolStr</code>.","","Return a 0-length span located at the start of the given …","The text size of some primitive text-like object.","Relative order of the two ranges (overlapping ranges are …","Function parameters","","","","","","","Include path","Loop increment operation","Version profile","Function prototype","Type qualifiers for the field","Optional type qualifier","Block type qualifier","List of type qualifiers","Return the span range","Range of the node in the input slice","","Rest of the selection statement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source id of the node","","","","","","","Return the source identifier for this node span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The index of this span into the list of parsed units. This …","Source index","Span in the input this node was parsed from","Add span information to a syntax node","Starting position of the node","","","","The start point of this range.","","","","Return the start of this span as a LexerPosition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Function body","List of statements","","","","","","","","Following declarations","Get the comment’s text, regardless of its typeype name portion of the specifier","Type of the field","Type specifier","Return type","Parameter type","Declaration type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a range up to the given end (<code>..end</code>).","Construct an <code>Expr::Variable(name)</code> from an identifier <code>name</code>","Version number","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of arguments for the function","Identifier for the definition","Identifier for the definition","Associated value","Associated value","","","","","","","","","","","","","","","","","","",""],"i":[0,1,2,3,4,5,6,7,8,9,10,8,9,0,0,0,0,0,0,11,12,0,0,13,14,13,13,13,11,0,0,8,8,8,0,15,0,13,11,11,16,14,17,0,18,0,14,14,11,0,0,19,7,18,0,0,0,0,14,16,19,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,7,0,20,18,21,0,17,22,23,16,8,9,24,11,13,11,25,22,22,23,22,8,9,22,19,26,0,27,12,0,0,0,18,21,22,0,0,28,13,11,24,0,0,0,0,0,0,11,0,0,0,20,0,29,0,0,0,0,0,15,0,8,8,30,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,31,0,22,22,22,13,13,13,13,13,13,13,13,13,13,13,14,14,7,22,0,15,0,0,0,13,11,32,0,0,32,15,18,0,0,18,0,0,8,9,32,0,0,0,0,22,33,30,8,8,13,13,13,13,13,13,13,13,13,13,13,13,30,7,8,9,8,9,34,35,28,0,0,0,0,0,8,7,29,8,9,14,14,0,0,11,11,22,32,32,15,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,14,6,23,14,16,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,0,0,0,0,14,31,33,34,0,0,0,0,0,28,10,0,25,0,32,0,0,13,0,0,0,0,8,9,14,18,0,0,11,0,0,0,0,13,0,0,0,0,0,0,27,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,0,0,22,14,35,26,11,14,13,13,13,22,13,14,23,24,14,8,9,36,36,37,37,36,37,38,39,40,27,27,41,1,27,11,1,2,3,36,42,43,1,2,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,1,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,36,37,36,37,1,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,1,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,2,37,41,44,67,58,59,60,62,36,36,36,41,36,36,18,2,36,37,2,41,41,1,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,50,70,1,2,3,6,13,41,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,70,1,1,2,2,3,3,6,6,13,13,41,39,39,45,45,46,46,38,38,47,47,32,32,14,14,48,48,31,31,30,30,28,28,49,49,50,50,26,26,15,15,51,51,27,27,52,52,35,35,53,53,54,54,40,40,55,55,33,33,11,11,7,7,8,8,9,9,4,4,20,20,56,56,57,57,18,18,5,5,58,58,12,12,25,25,43,43,17,17,24,24,21,21,59,59,16,16,22,22,29,29,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,19,19,42,42,10,10,23,23,34,34,70,1,1,2,2,3,3,6,6,13,13,41,39,39,45,45,46,46,38,38,47,47,32,32,14,14,48,48,31,31,30,30,28,28,49,49,50,50,26,26,15,15,51,51,27,27,52,52,35,35,53,53,54,54,40,40,55,55,33,33,11,11,7,7,8,8,9,9,4,4,20,20,56,56,57,57,18,18,5,5,58,58,12,12,25,25,43,43,17,17,24,24,21,21,59,59,16,16,22,22,29,29,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,19,19,42,42,10,10,23,23,34,34,36,70,1,2,3,36,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,36,36,1,2,2,2,2,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,45,51,1,1,2,2,3,3,36,37,6,13,41,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,1,1,1,2,2,3,3,3,3,36,36,37,37,37,6,6,13,13,13,41,41,41,44,39,39,39,39,45,45,46,46,38,38,38,47,47,32,32,14,14,48,48,31,31,30,30,28,28,49,49,49,50,50,26,26,15,15,51,51,27,27,52,52,35,35,53,53,54,54,40,40,55,55,33,33,33,33,11,11,11,11,11,11,11,7,7,8,8,9,9,4,4,20,20,56,56,57,57,18,18,5,5,58,58,12,12,25,25,43,43,17,17,24,24,21,21,59,59,16,16,22,22,29,29,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,19,19,42,42,10,10,23,23,34,34,2,2,2,2,57,44,2,1,2,3,36,37,41,44,54,43,27,38,53,55,63,64,51,46,48,40,55,36,1,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,41,71,2,36,44,2,34,34,2,36,44,66,41,41,61,70,1,1,2,2,3,3,6,6,13,13,41,39,39,45,45,46,46,38,38,47,47,32,32,14,14,48,48,31,31,30,30,28,28,49,49,50,50,26,26,15,15,51,51,27,27,52,52,35,35,53,53,54,54,40,40,55,55,33,33,11,11,7,7,8,8,9,9,4,4,20,20,56,56,57,57,18,18,5,5,58,58,12,12,25,25,43,43,17,17,24,24,21,21,59,59,16,16,22,22,29,29,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,19,19,42,42,10,10,23,23,34,34,45,51,52,40,68,42,1,3,36,37,6,13,44,39,45,46,38,47,32,14,48,31,49,50,26,15,51,27,52,35,53,54,40,55,33,11,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,42,10,34,2,36,41,44,38,49,44,2,2,44,37,36,52,1,2,3,37,41,44,65,59,69,56,46,49,51,47,44,44,37,58,1,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,70,1,2,3,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,44,66,41,71,70,1,2,3,36,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,36,36,56,57,36,36,37,37,36,37,37,54,34,1,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,1,2,2,3,41,1,2,3,36,37,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,1,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,39,46,49,52,53,40,1,2,3,36,37,6,13,41,44,39,45,46,38,47,32,14,48,31,30,28,49,50,26,15,51,27,52,35,53,54,40,55,33,11,7,8,9,4,20,56,57,18,5,58,12,25,43,17,24,21,59,16,22,29,60,61,62,63,64,65,66,67,68,69,19,42,10,23,34,36,11,69,72,73,74,75,76,77,77,77,78,79,80,81,82,80,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,89,90,91,92,93,94,95,98,90,91,92,99,100,101,102,103,104,105,106,107,106,107,108,109,110,111,112,110,111,112,112,113,114,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,129,130,129,131,132,133,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textsize",3]],[[["textsize",3]],["textsize",3]],[[["",0]]],[[["",0]]],null,null,null,[[["",0]],["option",4,[["identifier",6]]]],[[["",0]],["option",4,[["identifier",6]]]],[[["",0]],["",0]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["option",4,[["str",0]]]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[["textsize",3],["textsize",3]],["textrange",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["strtextsize",3]],["option",4,[["textrange",3]]]],[[["textsize",3]],["option",4,[["textsize",3]]]],[[["textsize",3]],["option",4,[["textrange",3]]]],[[["textsize",3]],["option",4,[["textsize",3]]]],[[["",0]],["identifierdata",3]],[[["",0]],["smolstr",3]],[[["",0]],["typenamedata",3]],[[["",0]],["textrange",3]],[[["",0]],["textsize",3]],[[["",0]],["pathdata",4]],[[["",0]],["typespecifiernonarraydata",4]],[[["",0]],["node",3]],[[["",0]],["nodespan",3]],[[["",0]],["typespecifierdata",3]],[[["",0]],["structspecifierdata",3]],[[["",0]],["structfieldspecifierdata",3]],[[["",0]],["arrayedidentifierdata",3]],[[["",0]],["typequalifierdata",3]],[[["",0]],["typequalifierspecdata",4]],[[["",0]],["storagequalifierdata",4]],[[["",0]],["layoutqualifierdata",3]],[[["",0]],["layoutqualifierspecdata",4]],[[["",0]],["precisionqualifierdata",4]],[[["",0]],["interpolationqualifierdata",4]],[[["",0]],["fullyspecifiedtypedata",3]],[[["",0]],["arrayspecifierdata",3]],[[["",0]],["arrayspecifierdimensiondata",4]],[[["",0]],["declarationdata",4]],[[["",0]],["blockdata",3]],[[["",0]],["funidentifierdata",4]],[[["",0]],["functionprototypedata",3]],[[["",0]],["functionparameterdeclarationdata",4]],[[["",0]],["functionparameterdeclaratordata",3]],[[["",0]],["initdeclaratorlistdata",3]],[[["",0]],["singledeclarationdata",3]],[[["",0]],["singledeclarationnotypedata",3]],[[["",0]],["initializerdata",4]],[[["",0]],["exprdata",4]],[[["",0]],["unaryopdata",4]],[[["",0]],["binaryopdata",4]],[[["",0]],["assignmentopdata",4]],[[["",0]],["translationunit",3]],[[["",0]],["externaldeclarationdata",4]],[[["",0]],["functiondefinitiondata",3]],[[["",0]],["compoundstatementdata",3]],[[["",0]],["statementdata",4]],[[["",0]],["exprstatementdata",3]],[[["",0]],["selectionstatementdata",3]],[[["",0]],["conditiondata",4]],[[["",0]],["selectionreststatementdata",4]],[[["",0]],["switchstatementdata",3]],[[["",0]],["caselabeldata",4]],[[["",0]],["iterationstatementdata",4]],[[["",0]],["forinitstatementdata",4]],[[["",0]],["forreststatementdata",3]],[[["",0]],["jumpstatementdata",4]],[[["",0]],["preprocessordata",4]],[[["",0]],["preprocessordefinedata",4]],[[["",0]],["preprocessorelseifdata",3]],[[["",0]],["preprocessorerrordata",3]],[[["",0]],["preprocessorifdata",3]],[[["",0]],["preprocessorifdefdata",3]],[[["",0]],["preprocessorifndefdata",3]],[[["",0]],["preprocessorincludedata",3]],[[["",0]],["preprocessorlinedata",3]],[[["",0]],["preprocessorpragmadata",3]],[[["",0]],["preprocessorundefdata",3]],[[["",0]],["preprocessorversiondata",3]],[[["",0]],["preprocessorversionprofiledata",4]],[[["",0]],["preprocessorextensiondata",3]],[[["",0]],["preprocessorextensionnamedata",4]],[[["",0]],["preprocessorextensionbehaviordata",4]],[[["",0]],["commentdatasmolstr",3]],["ordering",4]],[[["",0],["textsize",3]],["ordering",4]],[[["",0],["node",3]],["ordering",4]],[[["",0],["nodespan",3]],["ordering",4]],null,null,null,null,null,[[["textsize",3]],["bool",0]],[[["textsize",3]],["bool",0]],[[["textrange",3]],["bool",0]],null,[[["textrange",3]],["textrange",3]],[[["textsize",3]],["textrange",3]],[[]],[[],["smolstr",3]],[[],["textrange",3]],[[],["textsize",3]],[[["",0]],["str",0]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4,[["smolstr",3]]]],[[],["result",4]],[[],["result",4,[["textrange",3]]]],[[],["result",4,[["textsize",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["node",3]]]],[[],["result",4,[["nodespan",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3,[["node",3]]]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0]],["nodedisplaywrapper",3]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["textsize",3]],["textrange",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[],["textsize",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["lexerposition",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],null,[[["",0]],["bound",4,[["textsize",3]]]],[[["",0],["identifierdata",3]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["string",3]],["bool",0]],[[["",0],["string",3]],["bool",0]],[[["",0],["smolstr",3]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["typenamedata",3]],["bool",0]],[[["",0],["textrange",3]],["bool",0]],[[["",0],["textsize",3]],["bool",0]],[[["",0],["pathdata",4]],["bool",0]],[[["",0],["typespecifiernonarraydata",4]],["bool",0]],[[["",0],["node",3]],["bool",0]],[[["",0],["nodespan",3]],["bool",0]],[[["",0],["typespecifierdata",3]],["bool",0]],[[["",0],["structspecifierdata",3]],["bool",0]],[[["",0],["structfieldspecifierdata",3]],["bool",0]],[[["",0],["arrayedidentifierdata",3]],["bool",0]],[[["",0],["typequalifierdata",3]],["bool",0]],[[["",0],["typequalifierspecdata",4]],["bool",0]],[[["",0],["storagequalifierdata",4]],["bool",0]],[[["",0],["layoutqualifierdata",3]],["bool",0]],[[["",0],["layoutqualifierspecdata",4]],["bool",0]],[[["",0],["precisionqualifierdata",4]],["bool",0]],[[["",0],["interpolationqualifierdata",4]],["bool",0]],[[["",0],["fullyspecifiedtypedata",3]],["bool",0]],[[["",0],["arrayspecifierdata",3]],["bool",0]],[[["",0],["arrayspecifierdimensiondata",4]],["bool",0]],[[["",0],["declarationdata",4]],["bool",0]],[[["",0],["blockdata",3]],["bool",0]],[[["",0],["funidentifierdata",4]],["bool",0]],[[["",0],["functionprototypedata",3]],["bool",0]],[[["",0],["functionparameterdeclarationdata",4]],["bool",0]],[[["",0],["functionparameterdeclaratordata",3]],["bool",0]],[[["",0],["initdeclaratorlistdata",3]],["bool",0]],[[["",0],["singledeclarationdata",3]],["bool",0]],[[["",0],["singledeclarationnotypedata",3]],["bool",0]],[[["",0],["initializerdata",4]],["bool",0]],[[["",0],["exprdata",4]],["bool",0]],[[["",0],["unaryopdata",4]],["bool",0]],[[["",0],["binaryopdata",4]],["bool",0]],[[["",0],["assignmentopdata",4]],["bool",0]],[[["",0],["translationunit",3]],["bool",0]],[[["",0],["externaldeclarationdata",4]],["bool",0]],[[["",0],["functiondefinitiondata",3]],["bool",0]],[[["",0],["compoundstatementdata",3]],["bool",0]],[[["",0],["statementdata",4]],["bool",0]],[[["",0],["exprstatementdata",3]],["bool",0]],[[["",0],["selectionstatementdata",3]],["bool",0]],[[["",0],["conditiondata",4]],["bool",0]],[[["",0],["selectionreststatementdata",4]],["bool",0]],[[["",0],["switchstatementdata",3]],["bool",0]],[[["",0],["caselabeldata",4]],["bool",0]],[[["",0],["iterationstatementdata",4]],["bool",0]],[[["",0],["forinitstatementdata",4]],["bool",0]],[[["",0],["forreststatementdata",3]],["bool",0]],[[["",0],["jumpstatementdata",4]],["bool",0]],[[["",0],["preprocessordata",4]],["bool",0]],[[["",0],["preprocessordefinedata",4]],["bool",0]],[[["",0],["preprocessorelseifdata",3]],["bool",0]],[[["",0],["preprocessorerrordata",3]],["bool",0]],[[["",0],["preprocessorifdata",3]],["bool",0]],[[["",0],["preprocessorifdefdata",3]],["bool",0]],[[["",0],["preprocessorifndefdata",3]],["bool",0]],[[["",0],["preprocessorincludedata",3]],["bool",0]],[[["",0],["preprocessorlinedata",3]],["bool",0]],[[["",0],["preprocessorpragmadata",3]],["bool",0]],[[["",0],["preprocessorundefdata",3]],["bool",0]],[[["",0],["preprocessorversiondata",3]],["bool",0]],[[["",0],["preprocessorversionprofiledata",4]],["bool",0]],[[["",0],["preprocessorextensiondata",3]],["bool",0]],[[["",0],["preprocessorextensionnamedata",4]],["bool",0]],[[["",0],["preprocessorextensionbehaviordata",4]],["bool",0]],[[["",0],["commentdata",4]],["bool",0]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["node",3,[["identifierdata",3]]]]],[[["str",0]]],[[]],[[],["smolstr",3]],[[["identifierdata",3]]],[[]],[[["node",3,[["typenamedata",3]]]]],[[["str",0]]],[[]],[[["nodespan",3]],["textrange",3]],[[["u32",0]],["textsize",3]],[[]],[[["lexerposition",3]],["textsize",3]],[[["node",3,[["pathdata",4]]]]],[[]],[[["node",3,[["typespecifiernonarraydata",4]]]]],[[]],[[["typename",6]]],[[["never",0]]],[[]],[[],["node",3]],[[]],[[["node",3,[["typespecifierdata",3]]]]],[[["typespecifiernonarray",6]]],[[]],[[["typespecifiernonarraydata",4]]],[[]],[[["node",3,[["structspecifierdata",3]]]]],[[["node",3,[["structfieldspecifierdata",3]]]]],[[]],[[["node",3,[["arrayedidentifierdata",3]]]]],[[["str",0]]],[[]],[[["node",3,[["typequalifierdata",3]]]]],[[]],[[]],[[["node",3,[["typequalifierspecdata",4]]]]],[[]],[[["node",3,[["storagequalifierdata",4]]]]],[[["node",3,[["layoutqualifierdata",3]]]]],[[]],[[]],[[["node",3,[["layoutqualifierspecdata",4]]]]],[[]],[[["node",3,[["precisionqualifierdata",4]]]]],[[]],[[["node",3,[["interpolationqualifierdata",4]]]]],[[["typespecifiernonarraydata",4]]],[[]],[[["node",3,[["fullyspecifiedtypedata",3]]]]],[[["node",3,[["arrayspecifierdata",3]]]]],[[]],[[]],[[["node",3,[["arrayspecifierdimensiondata",4]]]]],[[["node",3,[["declarationdata",4]]]]],[[]],[[["node",3,[["blockdata",3]]]]],[[]],[[]],[[["node",3,[["funidentifierdata",4]]]]],[[["node",3,[["functionprototypedata",3]]]]],[[]],[[["node",3,[["functionparameterdeclarationdata",4]]]]],[[]],[[]],[[["node",3,[["functionparameterdeclaratordata",3]]]]],[[["node",3,[["initdeclaratorlistdata",3]]]]],[[]],[[["node",3,[["singledeclarationdata",3]]]]],[[]],[[["node",3,[["singledeclarationnotypedata",3]]]]],[[]],[[["node",3,[["initializerdata",4]]]]],[[]],[[["exprdata",4]]],[[["expr",6]]],[[["bool",0]],["exprdata",4]],[[["u32",0]],["exprdata",4]],[[["i32",0]],["exprdata",4]],[[["node",3,[["exprdata",4]]]]],[[["f64",0]],["exprdata",4]],[[]],[[["f32",0]],["exprdata",4]],[[]],[[["node",3,[["unaryopdata",4]]]]],[[["node",3,[["binaryopdata",4]]]]],[[]],[[]],[[["node",3,[["assignmentopdata",4]]]]],[[["node",3,[["translationunit",3]]]]],[[]],[[]],[[["node",3,[["externaldeclarationdata",4]]]]],[[["node",3,[["functiondefinitiondata",3]]]]],[[]],[[["node",3,[["compoundstatementdata",3]]]]],[[]],[[["node",3,[["statementdata",4]]]]],[[]],[[["node",3,[["exprstatementdata",3]]]]],[[]],[[]],[[["node",3,[["selectionstatementdata",3]]]]],[[["node",3,[["conditiondata",4]]]]],[[]],[[["node",3,[["selectionreststatementdata",4]]]]],[[]],[[["node",3,[["switchstatementdata",3]]]]],[[]],[[["node",3,[["caselabeldata",4]]]]],[[]],[[["node",3,[["iterationstatementdata",4]]]]],[[]],[[["node",3,[["forinitstatementdata",4]]]]],[[]],[[]],[[["node",3,[["forreststatementdata",3]]]]],[[]],[[["node",3,[["jumpstatementdata",4]]]]],[[]],[[["node",3,[["preprocessordata",4]]]]],[[["node",3,[["preprocessordefinedata",4]]]]],[[]],[[]],[[["node",3,[["preprocessorelseifdata",3]]]]],[[["node",3,[["preprocessorerrordata",3]]]]],[[]],[[["node",3,[["preprocessorifdata",3]]]]],[[]],[[["node",3,[["preprocessorifdefdata",3]]]]],[[]],[[["node",3,[["preprocessorifndefdata",3]]]]],[[]],[[["node",3,[["preprocessorincludedata",3]]]]],[[]],[[]],[[["node",3,[["preprocessorlinedata",3]]]]],[[["node",3,[["preprocessorpragmadata",3]]]]],[[]],[[["node",3,[["preprocessorundefdata",3]]]]],[[]],[[]],[[["node",3,[["preprocessorversiondata",3]]]]],[[["node",3,[["preprocessorversionprofiledata",4]]]]],[[]],[[]],[[["node",3,[["preprocessorextensiondata",3]]]]],[[]],[[["node",3,[["preprocessorextensionnamedata",4]]]]],[[]],[[["node",3,[["preprocessorextensionbehaviordata",4]]]]],[[["node",3,[["commentdata",4]]]]],[[]],[[],["smolstr",3]],[[],["smolstr",3]],[[],["smolstr",3]],[[],["smolstr",3]],[[]],[[["lexerposition",3],["lexerposition",3]],["nodespan",3]],[[["str",0]],["result",4,[["smolstr",3]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[]],null,null,null,null,null,null,null,null,null,null,[[["textrange",3]],["option",4,[["textrange",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["node",3]],[[["",0]],["bool",0]],[[],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[],["textsize",3]],[[["",0]],["textsize",3]],null,[[],["node",3]],[[],["node",3]],null,[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],null,null,null,null,null,null,[[["",0],["identifierdata",3]],["bool",0]],[[["",0],["typenamedata",3]],["bool",0]],[[["",0],["textrange",3]],["bool",0]],[[["",0],["textsize",3]],["bool",0]],[[["",0],["pathdata",4]],["bool",0]],[[["",0],["typespecifiernonarraydata",4]],["bool",0]],[[["",0],["nodespan",3]],["bool",0]],[[["",0],["typespecifierdata",3]],["bool",0]],[[["",0],["structspecifierdata",3]],["bool",0]],[[["",0],["structfieldspecifierdata",3]],["bool",0]],[[["",0],["arrayedidentifierdata",3]],["bool",0]],[[["",0],["typequalifierdata",3]],["bool",0]],[[["",0],["typequalifierspecdata",4]],["bool",0]],[[["",0],["storagequalifierdata",4]],["bool",0]],[[["",0],["layoutqualifierdata",3]],["bool",0]],[[["",0],["layoutqualifierspecdata",4]],["bool",0]],[[["",0],["fullyspecifiedtypedata",3]],["bool",0]],[[["",0],["arrayspecifierdata",3]],["bool",0]],[[["",0],["arrayspecifierdimensiondata",4]],["bool",0]],[[["",0],["declarationdata",4]],["bool",0]],[[["",0],["blockdata",3]],["bool",0]],[[["",0],["funidentifierdata",4]],["bool",0]],[[["",0],["functionprototypedata",3]],["bool",0]],[[["",0],["functionparameterdeclarationdata",4]],["bool",0]],[[["",0],["functionparameterdeclaratordata",3]],["bool",0]],[[["",0],["initdeclaratorlistdata",3]],["bool",0]],[[["",0],["singledeclarationdata",3]],["bool",0]],[[["",0],["singledeclarationnotypedata",3]],["bool",0]],[[["",0],["initializerdata",4]],["bool",0]],[[["",0],["exprdata",4]],["bool",0]],[[["",0],["translationunit",3]],["bool",0]],[[["",0],["externaldeclarationdata",4]],["bool",0]],[[["",0],["functiondefinitiondata",3]],["bool",0]],[[["",0],["compoundstatementdata",3]],["bool",0]],[[["",0],["statementdata",4]],["bool",0]],[[["",0],["exprstatementdata",3]],["bool",0]],[[["",0],["selectionstatementdata",3]],["bool",0]],[[["",0],["conditiondata",4]],["bool",0]],[[["",0],["selectionreststatementdata",4]],["bool",0]],[[["",0],["switchstatementdata",3]],["bool",0]],[[["",0],["caselabeldata",4]],["bool",0]],[[["",0],["iterationstatementdata",4]],["bool",0]],[[["",0],["forinitstatementdata",4]],["bool",0]],[[["",0],["forreststatementdata",3]],["bool",0]],[[["",0],["jumpstatementdata",4]],["bool",0]],[[["",0],["preprocessordata",4]],["bool",0]],[[["",0],["preprocessordefinedata",4]],["bool",0]],[[["",0],["preprocessorelseifdata",3]],["bool",0]],[[["",0],["preprocessorerrordata",3]],["bool",0]],[[["",0],["preprocessorifdata",3]],["bool",0]],[[["",0],["preprocessorifdefdata",3]],["bool",0]],[[["",0],["preprocessorifndefdata",3]],["bool",0]],[[["",0],["preprocessorincludedata",3]],["bool",0]],[[["",0],["preprocessorlinedata",3]],["bool",0]],[[["",0],["preprocessorpragmadata",3]],["bool",0]],[[["",0],["preprocessorundefdata",3]],["bool",0]],[[["",0],["preprocessorversiondata",3]],["bool",0]],[[["",0],["preprocessorextensiondata",3]],["bool",0]],[[["",0],["preprocessorextensionnamedata",4]],["bool",0]],[[["",0],["commentdata",4]],["bool",0]],[[],["smolstr",3]],[[["textsize",3],["textsize",3]],["textrange",3]],[[["option",4,[["nodespan",3]]]],["node",3]],[[["fileid",3],["textrange",3]],["nodespan",3]],[[]],[[["typespecifiernonarray",6]]],[[["fileid",3],["usize",0]],["nodespan",3]],[[["str",0]],["smolstr",3]],[[["usize",0]],["smolstr",3]],[[["fileid",3]],["nodespan",3]],[[],["textsize",3]],[[["textrange",3]],["ordering",4]],null,[[["",0],["identifierdata",3]],["option",4,[["ordering",4]]]],[[["",0],["smolstr",3]],["option",4,[["ordering",4]]]],[[["",0],["typenamedata",3]],["option",4,[["ordering",4]]]],[[["",0],["textsize",3]],["option",4,[["ordering",4]]]],[[["",0],["node",3]],["option",4,[["ordering",4]]]],[[["",0],["nodespan",3]],["option",4,[["ordering",4]]]],null,null,null,null,null,null,null,null,[[["",0]],["textrange",3]],null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["fileid",3]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["fileid",3]]]],null,null,null,[[["lexerposition",3],["lexerposition",3]],["node",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[],["textsize",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["lexerposition",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]],["option",4,[["textsize",3]]]],null,[[["",0]],["bound",4,[["textsize",3]]]],null,null,[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textsize",3]],[[["textsize",3]],["textsize",3]],[[["",0]]],[[["",0]]],[[],["textsize",3]],null,[[["",0]],["str",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",0]],["result",4,[["textsize",3],["tryfrominterror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["textsize",3]],["textrange",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"IdentifierData"],[3,"SmolStr"],[3,"TypeNameData"],[3,"TranslationUnit"],[3,"ExprStatementData"],[4,"PathData"],[4,"UnaryOpData"],[4,"BinaryOpData"],[4,"AssignmentOpData"],[4,"PreprocessorExtensionNameData"],[4,"ExprData"],[4,"ConditionData"],[4,"TypeSpecifierNonArrayData"],[4,"StorageQualifierData"],[4,"DeclarationData"],[4,"JumpStatementData"],[4,"CaseLabelData"],[4,"StatementData"],[4,"PreprocessorVersionProfileData"],[4,"ExternalDeclarationData"],[4,"ForInitStatementData"],[4,"PreprocessorData"],[4,"PreprocessorExtensionBehaviorData"],[4,"IterationStatementData"],[4,"SelectionRestStatementData"],[4,"ArraySpecifierDimensionData"],[4,"FunIdentifierData"],[4,"InterpolationQualifierData"],[4,"PreprocessorDefineData"],[4,"PrecisionQualifierData"],[4,"LayoutQualifierSpecData"],[4,"TypeQualifierSpecData"],[4,"InitializerData"],[4,"CommentData"],[4,"FunctionParameterDeclarationData"],[3,"TextRange"],[3,"TextSize"],[3,"ArrayedIdentifierData"],[3,"TypeSpecifierData"],[3,"SingleDeclarationData"],[3,"Node"],[3,"PreprocessorExtensionData"],[3,"SwitchStatementData"],[3,"NodeSpan"],[3,"StructSpecifierData"],[3,"StructFieldSpecifierData"],[3,"TypeQualifierData"],[3,"LayoutQualifierData"],[3,"FullySpecifiedTypeData"],[3,"ArraySpecifierData"],[3,"BlockData"],[3,"FunctionPrototypeData"],[3,"FunctionParameterDeclaratorData"],[3,"InitDeclaratorListData"],[3,"SingleDeclarationNoTypeData"],[3,"FunctionDefinitionData"],[3,"CompoundStatementData"],[3,"SelectionStatementData"],[3,"ForRestStatementData"],[3,"PreprocessorElseIfData"],[3,"PreprocessorErrorData"],[3,"PreprocessorIfData"],[3,"PreprocessorIfDefData"],[3,"PreprocessorIfNDefData"],[3,"PreprocessorIncludeData"],[3,"PreprocessorLineData"],[3,"PreprocessorPragmaData"],[3,"PreprocessorUndefData"],[3,"PreprocessorVersionData"],[8,"NodeDisplay"],[8,"NodeContent"],[13,"ExplicitlySized"],[13,"Case"],[13,"Single"],[13,"Multi"],[13,"Expr"],[13,"Assignment"],[13,"FunctionPrototype"],[13,"InitDeclaratorList"],[13,"Precision"],[13,"Block"],[13,"Invariant"],[13,"Variable"],[13,"IntConst"],[13,"UIntConst"],[13,"BoolConst"],[13,"FloatConst"],[13,"DoubleConst"],[13,"Unary"],[13,"Binary"],[13,"Ternary"],[13,"Assignment"],[13,"Bracket"],[13,"FunCall"],[13,"Dot"],[13,"PostInc"],[13,"PostDec"],[13,"Comma"],[13,"Preprocessor"],[13,"FunctionDefinition"],[13,"Declaration"],[13,"Expression"],[13,"Declaration"],[13,"TypeSpecifier"],[13,"Expr"],[13,"Named"],[13,"Unnamed"],[13,"Simple"],[13,"List"],[13,"While"],[13,"DoWhile"],[13,"For"],[13,"Return"],[13,"Identifier"],[13,"Absolute"],[13,"Relative"],[13,"Define"],[13,"ElseIf"],[13,"Error"],[13,"If"],[13,"IfDef"],[13,"IfNDef"],[13,"Include"],[13,"Line"],[13,"Pragma"],[13,"Undef"],[13,"Version"],[13,"Extension"],[13,"FunctionLike"],[13,"ObjectLike"],[13,"Specific"],[13,"Statement"],[13,"Else"],[13,"Declaration"],[13,"Expression"],[13,"Selection"],[13,"Switch"],[13,"CaseLabel"],[13,"Iteration"],[13,"Jump"],[13,"Compound"],[13,"Subroutine"],[13,"Storage"],[13,"Layout"],[13,"Precision"],[13,"Interpolation"],[13,"TypeName"],[13,"Struct"]]},\
"lang_util":{"doc":"<code>lang-util</code> is a crate that implements utilities to parse …","t":[12,12,3,8,24,3,3,3,24,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,0,11,11,11,11,0,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,3,8,13,3,6,4,3,8,13,13,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,5,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,17,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,4,8,3,3,13,13,13,8,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,12,12,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,8,8,8,3,0,12,12,0,10,10,10,10,10,10,10,10,12,10,12,10,3,8,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,8,8,3,11,11,11,11,12,10,10,10,10,10,10,11,11,14,11,11,10,10,11,12,11,10,10,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,8,3,10,11,11,11,11,11,11,11,11,11,10,12,11,11,10,12,11,11,11,11,11,11,10,12],"n":["0","0","FileId","NodeContent","NodeContent","SmolStr","TextRange","TextSize","Token","add","add","add","add","add_assign","add_assign","as_str","at","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_sub","checked_sub","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","contains","contains_inclusive","contains_range","cover","cover_offset","default","default","default","deref","deserialize","deserialize","deserialize","display_children","display_extra","empty","end","end","end_bound","eq","eq","eq","eq","eq","eq","eq","error","file_id","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_str","hash","hash","hash","intersect","into","into","into","is_empty","is_empty","is_heap_allocated","len","len","located","name","ne","ne","new","new","new_inline","new_inline_from_ascii","node","of","ordering","partial_cmp","partial_cmp","position","raw","serialize","serialize","serialize","start","start","start_bound","sub","sub","sub","sub","sub_assign","sub_assign","sum","to_owned","to_owned","to_owned","to_string","to_string","token","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","up_to","0","0","ExtraToken","InvalidToken","KindDisplay","LexicalError","LexicalError","ListDisplay","ParseError","ParseErrorKind","TokenDescription","TokenExt","UnrecognizedEof","UnrecognizedToken","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","description","eq","eq","error_location","fmt","fmt","fmt","fmt","fmt","fmt","formatted","from","from","from","from","from","from","hash","into","into","into","into","kinds","location","ne","ne","parser_token","partial_cmp","serialize","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","variant_name","error","expected","expected","token","token","0","BUILTIN_BIT","FileId","MAX_VALUE","borrow","borrow_mut","builtin","clone","clone_into","cmp","default","deserialize","eq","fmt","fmt","from","from","from","from","hash","into","ne","new","number","partial_cmp","serialize","to_owned","to_string","try_from","try_into","type_id","FileIdResolver","FileOverride","HasFileNumber","Located","LocatedBuilder","None","Number","Path","Resolver","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone_into","clone_into","col","column","column","column","current_file","current_file","current_file","current_file","current_file","default","default","eq","eq","file_override","file_override","file_override","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","inner","inner","into","into","into","into_inner","is_none","line","line_number","line_number","line_number","map","ne","new","path","path","path","pos","pos","pos","pos","resolve","resolve","resolve","resolve_file","resolve_path","set_current_file","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","Node","NodeContent","NodeContentDisplay","NodeDisplay","NodeDisplayWrapper","content","content","current_level","display","display","display_children","display_children","display_extra","display_extra","end","name","name","node","source_id","span","start","Node","NodeContent","as_ref","borrow","borrow_mut","clone","clone_into","cmp","content","deref","deref_mut","deserialize","display","display_children","display_extra","end","eq","fmt","fmt","from","from","from","hash","into","into_inner","into_node","into_node","into_node","map","map_spanned","name","new","partial_cmp","serialize","source_id","span","spanned","spanned","spanned","start","to_owned","to_string","try_from","try_into","type_id","NodeContentDisplay","NodeDisplay","NodeDisplayWrapper","borrow","borrow_mut","clone","clone_into","current_level","display","display_children","display_children","display_extra","display_extra","end","fmt","fmt","forward_display","from","into","name","name","new","node","set_level","source_id","start","to_owned","to_string","try_from","try_into","type_id","LexerPosition","NodeSpan","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","deserialize","deserialize","end","eq","eq","fmt","fmt","fmt","from","from","from_lexer","hash","hash","into","into","is_empty","len","ne","ne","new","new","new_end","new_raw","new_start","offset","partial_cmp","partial_cmp","range","range","serialize","serialize","source_id","source_id","source_id","start","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Token","TokenDescriptor","all_tokens","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","kinds","kinds","ne","new","parser_token","parser_token","partial_cmp","serialize","to_owned","try_from","try_into","type_id","variant_name","variant_name"],"q":["lang_util","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lang_util::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lang_util::error::ParseErrorKind","","","","","lang_util::file_id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lang_util::located","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lang_util::located::FileOverride","","lang_util::node","","","","","","","","","","","","","","","","","","","","","lang_util::node::content","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lang_util::node::display","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lang_util::position","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lang_util::token","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Unique file identifier","Trait for AST node contents.","Mark a type as representing data in an AST node","A <code>SmolStr</code> is a string type that has the following …","A range in text, represented as a pair of <code>TextSize</code>.","A measure of text length. Also, equivalently, an index …","Derive <code>lang_util::error::Token</code> for an enum usable with …","","","","","","","","Create a new <code>TextRange</code> with the given <code>offset</code> and <code>len</code> (…","","","","","","","","Add an offset to this range.","Checked addition. Returns <code>None</code> if overflow occurred.","Subtract an offset from this range.","Checked subtraction. Returns <code>None</code> if overflow occurred.","","","","","","","","","Check if this range contains an offset.","Check if this range contains an offset.","Check if this range completely contains another range.","Extends the range to cover <code>other</code> as well.","Extends the range to cover <code>other</code> offsets as well.","","","","","","","","","","Create a zero-length range at the specified offset (…","The end point of this range.","","","","","","","","","","Error type definitions","File identifier definition","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","The range covered by both ranges, if it exists. If the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Check if this range is empty.","","","The size of this range.","Located type definition","","","","","Creates a new <code>TextRange</code> with the given <code>start</code> and <code>end</code> (…","Constructs inline variant of <code>SmolStr</code>.","","AST type definitions","The text size of some primitive text-like object.","Relative order of the two ranges (overlapping ranges are …","","","Input position representation types","","","","","The start point of this range.","","","","","","","","","","","","","","","Token derive support definitions","","","","","","","","","","","Create a range up to the given end (<code>..end</code>).","","","Extra token after input","An invalid token was encountered during lexical analysis","","An error produced by lexical analysis","Lexical analysis error","","A parsing error wrapped from lalrpop_util’s error type","Parsing error kind","Information about a lexed token","Methods provided for all Token implementations","Unexpected end of file","Unexpected token","","","","","","","","","","","","","Return a descriptor for the current token","","","Return the LexerLocation of a lalrpop_util::ParseError","","","","","","","String representation of the lexed token","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","List of kinds this token belongs to","Return the location at which this error occurred","","","Parser token name","","","","","","","","","","","","","","","","","","","","","Variant name","Lexical error","List of expected token names","List of expected token names","The unexpected token","The extra token","","","Unique file identifier","","","","Create a new file identifier for a built-in string","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Create a new file identifier","Get the number behind this id, regardless of its type","","","","","","","","Trait for resolving file identifiers to file names","Represents a file location override","Trait for objects that can return the current file number","Wraps an object with location data","Builder for a Located struct","No override","Override with a raw file number","Override with a path","Trait for objects that can resolve offsets to line and …","","","","","","","Create a builder for this located type","","","","","Get the column number for this location","Set the resolved column number","Resolved column number","Resolved column number","Return the current file identifier","Set the file identifier","Get the current file identifier","File identifier for the error","File identifier for the error","","","","","Set the source file override","Overriden file location","Overriden file location","Build the final Located object from the given inner object","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return a reference to the inner value","Inner error, without location information","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inner value","Return true if this file override is empty","Get the line number for this location","Set the resolved line number","Resolved line number","Resolved line number","Transform the inner value wrapped by this instance","","Create a new builder for Located with default values","Set the source path","Path corresponding to the file identifier","Path corresponding to the file identifier","Set the raw position","Get the raw position into the source","Position at which the error occurred","Position at which the error occurred","Resolve the raw offset into a (line, column) tuple","Return the path corresponding to the FileId, if known","Resolve the raw offset (see LocatedBuilder::pos) to line …","Resolve the raw offset (see LocatedBuilder::pos) to line …","Resolve the given file id into a path name, and store it …","Set the current file identifier","","","","","","","","","","","","","","","","A syntax node with span information","Trait for AST node contents.","Trait for displaying an AST node’s content","Trait for displaying a syntax node","A wrapper for a syntax node to be displayed","","Contents of this syntax node","","","Obtain a display wrapper for the current node","Display the node’s children","Display the node’s children","Display extra information for the node","Display extra information for the node","Ending position of the node","Name of the node","Name of the syntax node’s type","","Source id of the node","Span in the input this node was parsed from","Starting position of the node","A syntax node with span information","Trait for AST node contents.","","","","","","","Contents of this syntax node","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Return the wrapped syntax node, discarding the span …","Convert the contents into a node","Convert the contents into a node","Convert the contents into a node","Map this content of this node into a new node","Map this content of this node into a new node with the …","","Create a new syntax node with span information","","","","Span in the input this node was parsed from","Add span information to a syntax node","Add span information to a syntax node","Add span information to a syntax node","","","","","","","Trait for displaying an AST node’s content","Trait for displaying a syntax node","A wrapper for a syntax node to be displayed","","","","","","Obtain a display wrapper for the current node","Display the node’s children","Display the node’s children","Display extra information for the node","Display extra information for the node","Ending position of the node","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Name of the node","Name of the syntax node’s type","Create a new NodeDisplayWrapper","","Set the level of this display wrapper","Source id of the node","Starting position of the node","","","","","","A position in the lexer’s input","Span information for a node, constructed from a pair of …","","","","","","","","","","","","","","Return the end of this span as a LexerPosition","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new node span from two lexer positions","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if this range is empty","Return the length of this span","","","Create a new LexerPosition","Create a new node span","Return a 0-length span located at the end of the given …","Create a new LexerPosition","Return a 0-length span located at the start of the given …","Raw byte offset","","","Return the span range","Range of the node in the input slice","","","Return the source identifier for this node span","Source id","The index of this span into the list of parsed units. This …","Return the start of this span as a LexerPosition","","","","","","","","","","Trait to implement for a token to be used with <code>lang_util</code>’…","Information about a known token","Return the descriptions for all known tokens","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Return the token kinds this token belongs to","List of kinds this token belongs to","","Create a new token descriptor","Return the name used by the lalrpop parser for this token","Parser token name","","","","","","","Return the variant name of the current token","Variant name"],"i":[1,2,0,0,0,0,0,0,0,3,3,4,4,3,4,1,3,1,1,3,4,1,3,4,3,4,3,4,1,3,4,1,3,4,1,4,3,3,3,3,3,1,3,4,1,1,3,4,1,1,3,3,3,3,1,1,1,1,1,3,4,0,0,1,1,3,4,1,1,3,3,4,4,4,1,1,1,1,1,1,3,4,3,1,3,4,1,3,1,1,3,0,1,3,4,1,3,1,1,0,4,3,1,4,0,4,1,3,4,3,3,3,3,3,4,4,3,4,4,1,3,4,1,1,0,1,3,4,4,1,3,4,1,3,4,3,5,6,7,7,0,0,7,0,0,0,0,0,7,7,5,6,8,7,5,6,8,7,8,7,8,7,9,8,7,0,5,6,8,8,7,7,8,5,6,8,8,7,7,8,5,6,8,7,8,10,8,7,8,8,8,8,7,5,6,8,7,5,6,8,7,5,6,8,7,5,6,8,7,8,11,12,13,13,14,2,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,15,15,15,0,15,16,17,15,16,17,17,15,17,15,17,17,16,16,17,18,16,17,16,17,15,16,15,17,16,16,17,16,15,15,17,17,15,15,15,15,16,17,17,17,15,16,17,17,15,17,16,16,17,17,15,16,16,16,17,16,17,16,17,19,20,16,16,16,17,15,17,15,17,15,16,17,15,16,17,15,16,17,21,22,0,0,0,0,0,0,23,24,0,25,26,25,26,25,25,26,25,24,25,23,25,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,27,27,27,23,23,23,23,23,23,23,23,27,27,27,23,23,23,23,23,23,0,0,0,24,24,24,24,24,25,26,25,26,25,25,24,24,0,24,24,26,25,24,24,24,25,25,24,24,24,24,24,0,0,28,29,28,29,28,29,28,29,28,29,28,28,29,29,28,29,28,28,29,28,29,29,28,29,28,29,29,29,28,29,28,29,29,28,29,28,28,29,29,29,28,29,29,28,29,29,28,29,28,28,29,28,29,28,29,0,0,30,31,31,31,31,31,31,31,31,31,30,31,31,31,30,31,31,31,31,31,31,31,30,31],"f":[null,null,null,null,null,null,null,null,null,[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textsize",3]],[[["textsize",3]],["textsize",3]],[[["",0]]],[[["",0]]],[[["",0]],["str",0]],[[["textsize",3],["textsize",3]],["textrange",3]],[[["",0]],["",0]],[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["textsize",3]],["option",4,[["textrange",3]]]],[[["textsize",3]],["option",4,[["textsize",3]]]],[[["textsize",3]],["option",4,[["textrange",3]]]],[[["textsize",3]],["option",4,[["textsize",3]]]],[[["",0]],["smolstr",3]],[[["",0]],["textrange",3]],[[["",0]],["textsize",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["smolstr",3]],["ordering",4]],[[["",0],["textsize",3]],["ordering",4]],[[["textsize",3]],["bool",0]],[[["textsize",3]],["bool",0]],[[["textrange",3]],["bool",0]],[[["textrange",3]],["textrange",3]],[[["textsize",3]],["textrange",3]],[[],["smolstr",3]],[[],["textrange",3]],[[],["textsize",3]],[[["",0]],["str",0]],[[],["result",4,[["smolstr",3]]]],[[],["result",4,[["textrange",3]]]],[[],["result",4,[["textsize",3]]]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["textsize",3]],["textrange",3]],[[],["textsize",3]],null,[[["",0]],["bound",4,[["textsize",3]]]],[[["",0],["smolstr",3]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["string",3]],["bool",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["string",3]],["bool",0]],[[["",0],["textrange",3]],["bool",0]],[[["",0],["textsize",3]],["bool",0]],null,null,[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[],["smolstr",3]],[[]],[[["nodespan",3]]],[[["u32",0]],["textsize",3]],[[["lexerposition",3]]],[[]],[[],["smolstr",3]],[[],["smolstr",3]],[[],["smolstr",3]],[[],["smolstr",3]],[[["str",0]],["result",4,[["smolstr",3]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["textrange",3]],["option",4,[["textrange",3]]]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[],["textsize",3]],null,[[],["option",4,[["str",0]]]],[[["",0],["textrange",3]],["bool",0]],[[["",0],["textsize",3]],["bool",0]],[[],["smolstr",3]],[[["textsize",3],["textsize",3]],["textrange",3]],[[["str",0]],["smolstr",3]],[[["usize",0]],["smolstr",3]],null,[[],["textsize",3]],[[["textrange",3]],["ordering",4]],[[["",0],["smolstr",3]],["option",4,[["ordering",4]]]],[[["",0],["textsize",3]],["option",4,[["ordering",4]]]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[],["textsize",3]],null,[[["",0]],["bound",4,[["textsize",3]]]],[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textrange",3]],[[["textsize",3]],["textsize",3]],[[["textsize",3]],["textsize",3]],[[["",0]]],[[["",0]]],[[],["textsize",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",0]],["result",4,[["textsize",3],["tryfrominterror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["textsize",3]],["textrange",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tokendescription",3]],[[["",0]],["parseerrorkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["tokendescription",3]],[[["",0],["tokendescription",3]],["bool",0]],[[["",0],["parseerrorkind",4]],["bool",0]],[[["parseerror",4]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[["",0]]],[[]],[[["parseerror",4,[["lexerposition",3]]]]],[[]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],null,[[["",0]]],[[["",0],["tokendescription",3]],["bool",0]],[[["",0],["parseerrorkind",4]],["bool",0]],null,[[["",0],["tokendescription",3]],["option",4,[["ordering",4]]]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["u32",0]]],[[["",0]],["fileid",3]],[[["",0],["",0]]],[[["",0],["fileid",3]],["ordering",4]],[[]],[[],["result",4]],[[["",0],["fileid",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["u32",0]]],[[["nodespan",3]]],[[["lexerposition",3]]],[[["",0],["",0]]],[[]],[[["",0],["fileid",3]],["bool",0]],[[["u32",0]]],[[["",0]],["u32",0]],[[["",0],["fileid",3]],["option",4,[["ordering",4]]]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["locatedbuilder",3]],[[["",0]],["fileoverride",4]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["u32",0]],[[["u32",0]]],null,null,[[["",0]],["fileid",3]],[[]],[[["",0]],["option",4,[["fileid",3]]]],null,null,[[]],[[],["locatedbuilder",3]],[[["",0],["fileoverride",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[]],null,null,[[],["located",3]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[],["fileoverride",4]],[[["string",3]],["fileoverride",4]],[[["u32",0]],["fileoverride",4]],[[]],[[]],[[]],[[["",0]],["",0]],null,[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["u32",0]],[[["u32",0]]],null,null,[[],["located",3]],[[["",0],["fileoverride",4]],["bool",0]],[[]],[[]],null,null,[[]],[[["",0]],["textrange",3]],null,null,[[["",0],["textsize",3]]],[[["",0],["fileid",3]],["option",4,[["path",3]]]],[[]],[[]],[[]],[[["",0],["fileid",3]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["nodedisplaywrapper",3]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["option",4,[["textsize",3]]]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],null,[[["",0]],["option",4,[["fileid",3]]]],null,[[["",0]],["option",4,[["textsize",3]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["node",3]],[[["",0],["",0]]],[[["",0],["",0]],["ordering",4]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[["",0]],["nodedisplaywrapper",3]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["never",0]]],[[["",0],["",0]]],[[]],[[]],[[],["node",3]],[[],["node",3]],[[],["node",3]],[[],["node",3,[["nodecontent",8]]]],[[],["node",3,[["nodecontent",8]]]],[[],["option",4,[["str",0]]]],[[["option",4,[["nodespan",3]]]]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["",0]],["result",4]],[[["",0]],["option",4,[["fileid",3]]]],null,[[["lexerposition",3],["lexerposition",3]],["node",3]],[[["lexerposition",3],["lexerposition",3]],["node",3]],[[["lexerposition",3],["lexerposition",3]],["node",3]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["nodedisplaywrapper",3]],[[["",0],["",0]]],null,[[["",0]],["nodedisplaywrapper",3]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["usize",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[],["option",4,[["str",0]]]],[[],["option",4,[["str",0]]]],[[["str",0],["usize",0]]],null,[[["usize",0]]],[[["",0]],["option",4,[["fileid",3]]]],[[["",0]],["option",4,[["textsize",3]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["lexerposition",3]],[[["",0]],["nodespan",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["lexerposition",3]],["ordering",4]],[[["",0],["",0]],["ordering",4]],[[],["lexerposition",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["lexerposition",3]],[[["",0],["lexerposition",3]],["bool",0]],[[["",0],["nodespan",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["lexerposition",3],["lexerposition",3]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["textsize",3]],[[["",0],["lexerposition",3]],["bool",0]],[[["",0],["nodespan",3]],["bool",0]],[[["fileid",3],["textsize",3]]],[[["fileid",3],["textrange",3]]],[[["fileid",3],["usize",0]]],[[["fileid",3]]],[[["fileid",3]]],null,[[["",0],["lexerposition",3]],["option",4,[["ordering",4]]]],[[["",0],["",0]],["option",4,[["ordering",4]]]],[[["",0]],["textrange",3]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["fileid",3]],null,null,[[["",0]],["lexerposition",3]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tokendescriptor",3]],[[["",0],["",0]]],[[["",0],["tokendescriptor",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]]],[[]],[[["",0]]],null,[[["",0],["tokendescriptor",3]],["bool",0]],[[["str",0],["str",0]]],[[["",0]],["str",0]],null,[[["",0],["tokendescriptor",3]],["option",4,[["ordering",4]]]],[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["str",0]],null],"p":[[3,"SmolStr"],[3,"FileId"],[3,"TextRange"],[3,"TextSize"],[3,"ListDisplay"],[3,"KindDisplay"],[4,"ParseErrorKind"],[3,"TokenDescription"],[8,"TokenExt"],[8,"LexicalError"],[13,"LexicalError"],[13,"UnrecognizedEof"],[13,"UnrecognizedToken"],[13,"ExtraToken"],[4,"FileOverride"],[3,"LocatedBuilder"],[3,"Located"],[8,"HasFileNumber"],[8,"Resolver"],[8,"FileIdResolver"],[13,"Number"],[13,"Path"],[3,"Node"],[3,"NodeDisplayWrapper"],[8,"NodeDisplay"],[8,"NodeContentDisplay"],[8,"NodeContent"],[3,"LexerPosition"],[3,"NodeSpan"],[8,"Token"],[3,"TokenDescriptor"]]},\
"lang_util_derive":{"doc":"<code>lang-util-derive</code> is a proc-macro crate providing …","t":[24,24,0,0,3,3,11,11,11,11,0,11,12,11,11,11,11,12,12,11,11,12,5,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,4,4,13,13,13,13,13,13,3,3,6,3,3,3,3,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,5,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,12,11,11,5,5,11,11,11,5,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12],"n":["NodeContent","Token","node_content","token","NodeContentOpts","NodeDisplay","borrow","borrow","borrow_mut","borrow_mut","content_display","default","display","from","from","from_derive_input","from_list","generics","ident","into","into","leaf","node_content","try_from","try_from","try_into","try_into","type_id","type_id","DisplayFieldOpts","DisplayVariantOpts","NodeDisplayField","NodeDisplayVariant","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","display","display","extra","extra","fields","from","from","from","from","from_field","from_list","from_list","from_variant","ident","ident","into","into","into","into","is_unit_enum","node_content_display","skip","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AsParser","AsParserError","InvalidAs","InvalidTokenAttribute","MissingDisplayImpl","NoTokenOrAs","Path","RawString","Token","TokenAttr","TokenAttrTy","TokenDisplay","TokenOpts","TokenVariant","TokenVariantField","all_tokens_arm","args","as_parser","as_parser","attrs","base_ident","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","data","display","display_arm","display_arm_body","display_impl","empty_variant_header","fallback_token","fields","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from_derive_input","from_field","from_list","from_list","from_list","from_nested_meta","from_string","from_string","from_variant","generics","get_prefixed_fmt","ident","ident","ident","into","into","into","into","into","into","into","into","kinds","kinds_arm","kinds_body","parse_as_parser","parse_token_attr","parser_token_arm","parser_token_body","to_string","token","token","token","token_impl","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant","variant_name_arm","0","0","0"],"q":["lang_util_derive","","","","lang_util_derive::node_content","","","","","","","","","","","","","","","","","","","","","","","","","lang_util_derive::node_content::content_display","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lang_util_derive::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lang_util_derive::token::AsParser","","lang_util_derive::token::AsParserError"],"d":["Mark a type as representing data in an AST node","Derive <code>lang_util::error::Token</code> for an enum usable with …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Use this field when formatting extra data","Value to use as extra format instead of the variant name","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Skip formatting this field or variant","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,1,2,0,1,2,1,2,2,1,2,2,1,2,1,0,1,2,1,2,1,2,0,0,0,0,3,4,5,6,3,4,5,6,3,4,5,6,3,4,6,3,4,5,6,5,3,4,6,5,6,3,4,5,6,0,0,3,3,4,5,6,3,4,5,6,3,4,5,6,0,0,7,7,7,7,8,8,0,0,0,0,0,0,0,9,10,9,11,11,9,10,12,8,9,13,11,7,14,10,12,8,9,13,11,7,14,14,11,9,9,0,9,11,11,7,7,10,10,12,8,9,9,13,11,7,14,14,13,10,12,8,8,10,8,11,14,9,13,11,14,10,12,8,9,13,11,7,14,11,9,9,0,0,9,9,7,0,12,9,0,10,12,8,9,13,11,7,14,10,12,8,9,13,11,7,14,10,12,8,9,13,11,7,14,9,9,15,16,17],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[],["nodedisplay",3]],null,[[]],[[]],[[["deriveinput",3]],["result",6]],[[],["result",6]],null,null,[[]],[[]],null,[[["tokenstream",3]],["tokenstream",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["displayfieldopts",3]],[[],["displayvariantopts",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[["field",3]],["result",6]],[[],["result",6]],[[],["result",6]],[[["variant",3]],["result",6]],null,null,[[]],[[]],[[]],[[]],[[["dataenum",3]],["bool",0]],[[["deriveinput",3],["nodecontentopts",3],["tokenstream",3],["str",0]],["tokenstream",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["tokenstream",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0]],["tokenstream",3]],[[["",0]],["tokenstream",3]],[[["ident",3],["tokenstream",3]],["tokenstream",3]],[[["",0]],["tokenstream",3]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["deriveinput",3]],["result",6]],[[["field",3]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["nestedmeta",4]],["result",6]],[[["str",0]],["result",6]],[[["str",0]],["result",6]],[[["variant",3]],["result",6]],null,[[["",0],["str",0]],["string",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0]],["tokenstream",3]],[[["",0]],["tokenstream",3]],[[["tokenvariant",3],["option",4]],["result",4,[["string",3],["asparsererror",4]]]],[[["tokenvariant",3]],["option",4]],[[["",0]],["tokenstream",3]],[[["",0]],["tokenstream",3]],[[["",0]],["string",3]],[[["tokenstream",3]],["tokenstream",3]],null,null,[[["ident",3],["tokenstream",3]],["tokenstream",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["tokenstream",3]],null,null,null],"p":[[3,"NodeDisplay"],[3,"NodeContentOpts"],[3,"DisplayFieldOpts"],[3,"DisplayVariantOpts"],[3,"NodeDisplayField"],[3,"NodeDisplayVariant"],[4,"AsParserError"],[4,"AsParser"],[3,"Token"],[3,"TokenDisplay"],[3,"TokenVariant"],[3,"TokenAttr"],[3,"TokenVariantField"],[3,"TokenOpts"],[13,"Path"],[13,"RawString"],[13,"InvalidTokenAttribute"]]},\
"lang_util_dev":{"doc":"lang-util-dev provides utilities for developing language …","t":[0,8,3,10,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11],"n":["test_util","PathKey","Paths","all","borrow","borrow_mut","finish","from","into","local_results","local_results_prefix","new","path","paths","public_results","public_results_prefix","try_from","try_into","type_id"],"q":["lang_util_dev","lang_util_dev::test_util","","","","","","","","","","","","","","","","",""],"d":["Testing utilities","Key for differentiating between kinds of test outputs","Test output manager","Return the list of all possible test output kinds","","","Complete the testing process for this test case","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Local (generated) test results","Return the directory name for the local results","Create a new output manager for the given input path","Obtain a path for a given output kind","Computed file names","Valid (bumped) test results","Return the directory name for the public results","","",""],"i":[0,0,0,1,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2],"f":[null,null,null,[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],null,[[],["str",0]],[[["path",3]],["result",6]],[[["",0]],["pathbuf",3]],null,null,[[],["str",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[8,"PathKey"],[3,"Paths"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};